trigger:
  batch: true
  branches:
    include:
    - v3
    - v3-release
pr:
- v3
variables:
  dotnetVersion: 3.1.300
  runCodesignValidationInjection: false

jobs:

# Test pull requests on linux and mac
- job: LinuxBuild
  pool:
    vmImage: 'ubuntu-latest'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  - bash: ./build.sh
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)
      MICROSOFT_GRAPH_CLIENT_SECRET: $(MICROSOFT_GRAPH_CLIENT_SECRET)
      GIT_TOKEN_HTTP_AUTH_SSO_DISABLED: $(GIT_TOKEN_HTTP_AUTH_SSO_DISABLED)
      GIT_TOKEN_HTTP_AUTH_INSUFFICIENT_PERMISSION: $(GIT_TOKEN_HTTP_AUTH_INSUFFICIENT_PERMISSION)

- job: MacBuild
  pool:
    vmImage: 'macOS-latest'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  - bash: ./build.sh
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)
      MICROSOFT_GRAPH_CLIENT_SECRET: $(MICROSOFT_GRAPH_CLIENT_SECRET)
      GIT_TOKEN_HTTP_AUTH_SSO_DISABLED: $(GIT_TOKEN_HTTP_AUTH_SSO_DISABLED)
      GIT_TOKEN_HTTP_AUTH_INSUFFICIENT_PERMISSION: $(GIT_TOKEN_HTTP_AUTH_INSUFFICIENT_PERMISSION)

# Test and deploy on windows
- job: WindowsBuild
  pool:
    vmImage: 'windows-latest'
  steps:

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  # Running Tests
  - powershell: ./build.ps1
    displayName: Running tests
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)
      MICROSOFT_GRAPH_CLIENT_SECRET: $(MICROSOFT_GRAPH_CLIENT_SECRET)
      GIT_TOKEN_HTTP_AUTH_SSO_DISABLED: $(GIT_TOKEN_HTTP_AUTH_SSO_DISABLED)
      GIT_TOKEN_HTTP_AUTH_INSUFFICIENT_PERMISSION: $(GIT_TOKEN_HTTP_AUTH_INSUFFICIENT_PERMISSION)

  # Upload code coverage to codecov.io
  - bash: |
      bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
    displayName: 'Upload to codecov.io'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)

  # Build RegressionTest into Artifact 
  - powershell: |
      $regressionTestDir = './drop/RegressionTest'
      Remove-Item $regressionTestDir -Force -Recurse -ErrorAction Ignore
      dotnet build ./test/docfx.RegressionTest -c Release -r win7-x64 -o $regressionTestDir/bin
    displayName: Build RegressionTest into Artifact 

  # Publish RegressionTest binary
  - publish: ./drop/RegressionTest/bin
    displayName: Publish RegressionTest binary
    artifact: RegressionTest

  # Push to azure devops feed
  - task: NuGetCommand@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3'))
    displayName: Publish NuGet Packages
    inputs:
      command: push
      packagesToPush: drop/**/*.nupkg
      publishFeedCredentials: docs-public-packages
      nugetFeedType: external
      allowPackageConflicts: true

  # Publish binary packages to production
  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3-release'))
    displayName: Publish Binary Packages To Production
    inputs:
      azureSubscription: Open Publishing - Build Production
      sourcePath: drop/docfx-bin/staging
      destination: AzureBlob
      storage: opsbuildk8sprod
      containerName: docfx-bin


# Run RegressionTest
- job: RunRegressionTest
  dependsOn: WindowsBuild
  pool:
    name: DocFX
  strategy:
    matrix:
      azure-docs-pr:
        params: https://github.com/MicrosoftDocs/azure-docs-pr --timeout 150
      sql-docs-pr:
        params: https://github.com/MicrosoftDocs/sql-docs-pr --timeout 120
      docs:
        params: https://github.com/dotnet/docs --timeout 60
      windowsserverdocs-pr:
        params: https://github.com/MicrosoftDocs/windowsserverdocs-pr  --timeout 45
      VBA-Docs:
        params: https://github.com/MicrosoftDocs/VBA-Docs --timeout 60
      azure-devops-docs-pr:
        params: https://github.com/MicrosoftDocs/azure-devops-docs-pr --timeout 30
      vsts-docs-pr:
        params: https://dev.azure.com/mseng/TechnicalContent/_git/vsts-docs-pr --timeout 30
      AspNetCore.Docs:
        params: https://github.com/dotnet/AspNetCore.Docs --timeout 30 --output-html
      microsoft-365-docs-pr.zh-CN:
        params: https://github.com/MicrosoftDocs/microsoft-365-docs-pr.zh-CN --branch live-sxs --timeout 25
      powerbi-docs-pr.de-DE:
        params: https://github.com/MicrosoftDocs/powerbi-docs-pr.de-DE --branch live-sxs --timeout 25
      roslyn-api-docs:
        params: https://github.com/dotnet/roslyn-api-docs --branch live --timeout 105
      azure-docs-rest-apis:
        params: https://github.com/Azure/azure-docs-rest-apis --timeout 130 --error-level Warning
      mc-docs-pr:
        params: https://github.com/MicrosoftDocs/mc-docs-pr --timeout 70
      dynamics365smb-devitpro:
        params: https://github.com/MicrosoftDocs/dynamics365smb-devitpro --timeout 15
      DevSandbox:
        params: https://github.com/MicrosoftDocs/DevSandbox --timeout 30
      test:
        params: https://github.com/MicrosoftDocs/test --timeout 15

  steps:
  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  # Download RegressionTest binary
  - download: current
    displayName: Download RegressionTest binary
    artifact: RegressionTest

  # Run Regression Tests
  - task: AzureCLI@2
    displayName: Run regression tests
    inputs:
      azureSubscription: 'Open Publishing - Build Production'
      scriptType: ps
      scriptLocation: inlineScript
      powerShellErrorActionPreference: continue
      inlineScript: $(Pipeline.Workspace)/RegressionTest/docfx.RegressionTest.exe $(params)
    env:
      BUILD_REASON: $(Build.Reason)
      DOCFX_APPDATA_PATH: D:/appdata
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      PULL_REQUEST_NUMBER : $(System.PullRequest.PullRequestNumber)
      APPINSIGHTS_INSTRUMENTATIONKEY: 5226e0d0-086f-4cab-a491-1d00fde9eb09
