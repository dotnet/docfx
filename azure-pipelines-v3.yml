trigger:
  batch: true
  branches:
    include:
    - v3
    - v3-release
pr:
- v3
jobs:

variables:
  dotnetVersion: 2.2.401

# Test pull requests on linux and mac
- job: LinuxBuild
  pool:
    vmImage: 'ubuntu-16.04'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  - bash: ./build.sh
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)

- job: MacBuild
  pool:
    vmImage: 'macOS-10.13'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  - bash: ./build.sh
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)

# Test and deploy on windows
- job: WindowsBuild
  pool:
    vmImage: 'vs2017-win2016'
  steps:

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  # Build and test
  - powershell: ./build.ps1
    displayName: Build
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)
      CODECOV_TOKEN: $(CODECOV_TOKEN)

  # Push to sandbox MyGet feed
  - task: NuGetCommand@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3'))
    displayName: Push to Sandbox MyGet Feed
    inputs:
      command: push
      packagesToPush: drop/**/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: myget.docfx-v3-sandbox

  # Push to production MyGet feed
  - task: NuGetCommand@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3-release'))
    displayName: Push to Production MyGet Feed
    inputs:
      command: push
      packagesToPush: drop/**/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: myget.docfx-v3

  # Publish binary packages to sandbox
  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3'))
    displayName: Publish Binary Packages To Sandbox
    inputs:
      azureSubscription: Open Publishing - Build Sandbox
      sourcePath: drop/docfx-bin/staging
      destination: AzureBlob
      storage: opbuildstoragesandbox
      containerName: docfx-bin

  # Publish binary packages to production
  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3-release'))
    displayName: Publish Binary Packages To Production
    inputs:
      azureSubscription: Open Publishing - Build Production
      sourcePath: drop/docfx-bin/staging
      destination: AzureBlob
      storage: opsbuildk8sprod
      containerName: docfx-bin

# Integration test
- job: IntegrationTest
  dependsOn: WindowsBuild
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/v3'), eq(variables['System.PullRequest.TargetBranch'], 'v3')))
  pool:
    name: DocFX
  steps:

  # Checkout
  - checkout: self
  - checkout: git://Engineering/Docs.Build@develop

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  # Run integration tests
  - powershell: |
      cd Docs.Build

      # Sometimes when docfx needs to make a breaking change, name the branch breaking/<downstream_branch>,
      # where <downstream_branch> is the branch name of corresponding changes in Docs.Build, this allows
      # integration test to run against both changes
      $docsBuildBranch = $env:PULL_REQUEST_SOURCE_BRANCH -replace '^(.*)breaking/(.*)$', '$2'
      if ($docsBuildBranch -ne $env:PULL_REQUEST_SOURCE_BRANCH) {
        git checkout --force $docsBuildBranch
      }

      dotnet run -p test/integration-test -c Release
    displayName: Run integration tests
    env:
      BUILD_REASON: $(Build.Reason)
      DOCFX_APPDATA_PATH: D:/appdata
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      AzureServicesAuthConnectionString: $(AzureServicesAuthConnectionString)
      PULL_REQUEST_NUMBER : $(System.PullRequest.PullRequestNumber)
      PULL_REQUEST_SOURCE_BRANCH: $(System.PullRequest.SourceBranch)
