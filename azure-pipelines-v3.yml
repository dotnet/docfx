trigger:
  batch: true
  branches:
    include:
    - v3
    - v3-release
pr:
- v3
variables:
  dotnetVersion: 3.1.200
  runCodesignValidationInjection: false

jobs:

# Build integration test
- job: IntegrationTestBuild
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/v3'), eq(variables['System.PullRequest.TargetBranch'], 'v3')))
  pool:
    name: DocFX

  steps:
  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  # Checkout
  - checkout: self
    clean: true
    path: docfx

  # Checkout Docs.Build
  - powershell: |
      function exec([string] $cmd) {
          & ([scriptblock]::Create($cmd))
          if ($lastexitcode -ne 0) {
              throw ("Error")
          }
      }

      # Sometimes when docfx needs to make a breaking change, name the branch breaking/<downstream_branch>,
      # where <downstream_branch> is the branch name of corresponding changes in Docs.Build, this allows
      # integration test to run against both changes
      $docsBuildBranch = $env:PULL_REQUEST_SOURCE_BRANCH -replace '^(.*)breaking/(.*)$', '$2'
      if ($docsBuildBranch -eq $env:PULL_REQUEST_SOURCE_BRANCH) {
        $docsBuildBranch = 'develop'
      }

      $basicAuth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("user:$env:AZURE_DEVOPS_TOKEN"))
      $auth = "-c http.https://dev.azure.com.extraheader=""AUTHORIZATION: basic $basicAuth"""

      if (-Not (Test-Path -Path ../Docs.Build)) {
          # Clone Docs.Build if not exists
          exec "git $auth clone https://dev.azure.com/ceapex/Engineering/_git/Docs.Build ../Docs.Build"
      }

      try {
          # Update Docs.Build to latest
          pushd ../Docs.Build
          exec "git $auth fetch origin"
          exec "git checkout --force origin/$docsBuildBranch"
          exec "git clean -xdff"
      } finally {
          popd
      }

      $integrationTestDir = './drop/integration-test'
      Remove-Item $integrationTestDir -Force -Recurse -ErrorAction Ignore
      dotnet build ../Docs.Build/test/integration-test -c Release -r win7-x64 -o $integrationTestDir/bin
      Remove-Item $integrationTestDir/bin/ConfigMigration -Force -Recurse -ErrorAction Ignore
    displayName: Checkout Docs.Build
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      PULL_REQUEST_SOURCE_BRANCH: $(System.PullRequest.SourceBranch)

  # Publish integration-test binary
  - publish: ./drop/integration-test/bin
    displayName: Publish integration-test binary
    artifact: integration-test

# Integration test
- job: IntegrationTest
  dependsOn: IntegrationTestBuild
  pool:
    name: DocFX
  strategy:
    matrix:
      DevSandbox:
        params: https://github.com/OPS-E2E-PPE/DevSandbox --branch v3-integration-test --timeout 30

  steps:
  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)
  
  # Checkout
  - checkout: self
    clean: false
    path: docfx

  # Download integration-test binary
  - download: current
    displayName: Download integration-test binary
    artifact: integration-test

  # Run integration tests
  - powershell: |
      dotnet --info
      $(Pipeline.Workspace)/integration-test/integration-test.exe $(params)
    displayName: Run integration tests
    env:
      BUILD_REASON: $(Build.Reason)
      DOCFX_APPDATA_PATH: D:/appdata
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)
      DOCS_GENERATE_DOCFX_YML: 'false'
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      AzureServicesAuthConnectionString: $(AzureServicesAuthConnectionString)
      PULL_REQUEST_NUMBER : $(System.PullRequest.PullRequestNumber)
      APPINSIGHTS_INSTRUMENTATIONKEY: 5226e0d0-086f-4cab-a491-1d00fde9eb09
