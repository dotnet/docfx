trigger:
  batch: true
  branches:
    include:
    - v3
    - v3-release
pr:
- v3
variables:
  dotnetVersion: 3.1.200
  runCodesignValidationInjection: false

jobs:

# Test pull requests on linux and mac
- job: LinuxBuild
  pool:
    vmImage: 'ubuntu-latest'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  - bash: ./build.sh
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)

- job: MacBuild
  pool:
    vmImage: 'macOS-latest'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  - bash: ./build.sh
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)

# Test and deploy on windows
- job: WindowsBuild
  pool:
    vmImage: 'windows-latest'
  steps:

  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  # Build and test
  - powershell: ./build.ps1
    displayName: Build
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)
      CODECOV_TOKEN: $(CODECOV_TOKEN)

  # Push to sandbox MyGet feed
  - task: NuGetCommand@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3'))
    displayName: Push to Sandbox MyGet Feed
    inputs:
      command: push
      packagesToPush: drop/**/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: myget.docfx-v3-sandbox

  # Push to production MyGet feed
  - task: NuGetCommand@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3-release'))
    displayName: Push to Production MyGet Feed
    inputs:
      command: push
      packagesToPush: drop/**/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: myget.docfx-v3

  # Publish binary packages to sandbox
  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3'))
    displayName: Publish Binary Packages To Sandbox
    inputs:
      azureSubscription: Open Publishing - Build Sandbox
      sourcePath: drop/docfx-bin/staging
      destination: AzureBlob
      storage: opbuildstoragesandbox
      containerName: docfx-bin

  # Publish binary packages to production
  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/v3-release'))
    displayName: Publish Binary Packages To Production
    inputs:
      azureSubscription: Open Publishing - Build Production
      sourcePath: drop/docfx-bin/staging
      destination: AzureBlob
      storage: opsbuildk8sprod
      containerName: docfx-bin

# Build integration test
- job: IntegrationTestBuild
  dependsOn: WindowsBuild
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/v3'), eq(variables['System.PullRequest.TargetBranch'], 'v3')))
  pool:
    name: DocFX

  steps:
  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)

  # Checkout
  - checkout: self
    clean: true
    path: docfx

  # Checkout Docs.Build
  - powershell: |
      function exec([string] $cmd) {
          & ([scriptblock]::Create($cmd))
          if ($lastexitcode -ne 0) {
              throw ("Error")
          }
      }

      # Sometimes when docfx needs to make a breaking change, name the branch breaking/<downstream_branch>,
      # where <downstream_branch> is the branch name of corresponding changes in Docs.Build, this allows
      # integration test to run against both changes
      $docsBuildBranch = $env:PULL_REQUEST_SOURCE_BRANCH -replace '^(.*)breaking/(.*)$', '$2'
      if ($docsBuildBranch -eq $env:PULL_REQUEST_SOURCE_BRANCH) {
        $docsBuildBranch = 'develop'
      }

      $basicAuth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("user:$env:AZURE_DEVOPS_TOKEN"))
      $auth = "-c http.https://dev.azure.com.extraheader=""AUTHORIZATION: basic $basicAuth"""

      if (-Not (Test-Path -Path ../Docs.Build)) {
          # Clone Docs.Build if not exists
          exec "git $auth clone https://dev.azure.com/ceapex/Engineering/_git/Docs.Build ../Docs.Build"
      }

      try {
          # Update Docs.Build to latest
          pushd ../Docs.Build
          exec "git $auth fetch origin"
          exec "git checkout --force origin/$docsBuildBranch"
          exec "git clean -xdff"
      } finally {
          popd
      }

      $integrationTestDir = './drop/integration-test'
      Remove-Item $integrationTestDir -Force -Recurse -ErrorAction Ignore
      dotnet build ../Docs.Build/test/integration-test -c Release -r win7-x64 -o $integrationTestDir/bin
      Remove-Item $integrationTestDir/bin/ConfigMigration -Force -Recurse -ErrorAction Ignore
    displayName: Checkout Docs.Build
    env:
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      PULL_REQUEST_SOURCE_BRANCH: $(System.PullRequest.SourceBranch)

  # Publish integration-test binary
  - publish: ./drop/integration-test/bin
    displayName: Publish integration-test binary
    artifact: integration-test


# Integration test
- job: IntegrationTest
  dependsOn: IntegrationTestBuild
  pool:
    name: DocFX
  strategy:
    matrix:
      DevSandbox:
        params: https://github.com/OPS-E2E-PPE/DevSandbox --branch v3-integration-test --timeout 30
      docs-help-pr:
        params: >
          https://github.com/OPS-E2E-PPE/docs-help-pr --build-type PullRequest --branch v3-integration-test
          --pull-request-url https://github.com/yufeih/docs-help-pr --pull-request-branch patch-1
          --timeout 30
      azure-docs-pr:
        params: https://github.com/OPS-E2E-PPE/azure-docs-pr --branch v3-integration-test --timeout 150
      Dynamics-365-Operations:
        params: https://github.com/OPS-E2E-PPE/Dynamics-365-Operations --branch v3-integration-test --timeout 65
      SCCMDocs-pr:
        params: https://github.com/OPS-E2E-PPE/SCCMDocs-pr --branch v3-integration-test --timeout 35
      SCCMDocs-pr.zh-cn:
        params: https://github.com/OPS-E2E-PPE/SCCMDocs-pr.zh-cn --branch v3-integration-test-sxs --locale zh-cn --timeout 35
      office-dev-O365API:
        params: https://dev.azure.com/docs-archive/docs-archive-test/_git/office-dev-O365API --timeout 20
      dynamics-crm-notinTOC_1.he-il:
        params: https://dev.azure.com/docs-archive/docs-archive-test/_git/dynamics-crm-notinTOC_1.he-il --locale he-il --timeout 40
      mc-docs-pr:
        params: https://github.com/opse2epr/mc-docs-pr --branch v3-integration-test --timeout 70
      ATADocs-pr:
        params: https://github.com/OPS-E2E-PPE/ATADocs-pr --branch v3-integration-test --timeout 25
      azure-docs-rest-apis:
        params: https://github.com/OPS-E2E-PPE/azure-docs-rest-apis --branch v3-integration-test --timeout 130

  steps:
  # Install .NET Core sdk
  - task: UseDotNet@2
    displayName: 'Install .NET Core sdk $(dotnetVersion)'
    inputs:
      packageType: sdk
      version: $(dotnetVersion)
  
  # Checkout
  - checkout: self
    clean: false
    path: docfx

  # Download integration-test binary
  - download: current
    displayName: Download integration-test binary
    artifact: integration-test

  # Run integration tests
  - powershell: '& "$(Pipeline.Workspace)/integration-test/integration-test" $(params)'
    displayName: Run integration tests
    env:
      BUILD_REASON: $(Build.Reason)
      INTEGRATION_TEST_ROOT: D:/
      DOCFX_APPDATA_PATH: D:/appdata
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      DOCS_OPS_TOKEN: $(DOCS_OPS_TOKEN)
      DOCS_GENERATE_DOCFX_YML: 'false'
      AZURE_DEVOPS_TOKEN: $(AZURE_DEVOPS_TOKEN)
      AzureServicesAuthConnectionString: $(AzureServicesAuthConnectionString)
      PULL_REQUEST_NUMBER : $(System.PullRequest.PullRequestNumber)
      APPINSIGHTS_INSTRUMENTATIONKEY: 5226e0d0-086f-4cab-a491-1d00fde9eb09
