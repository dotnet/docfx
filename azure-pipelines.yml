trigger:
  batch: true
  branches:
    include:
    - v3
    - v3-release
pr:
- v3
jobs:

# Test pull requests on linux and mac
- job: LinuxBuild
  pool:
    vmImage: 'ubuntu-16.04'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:
  - bash: ./build.sh
    env:
      SYSTEM_ACCESS_TOKEN: $(System.AccessToken)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)

- job: MacBuild
  pool:
    vmImage: 'macOS-10.13'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:
  - bash: ./build.sh
    env:
      SYSTEM_ACCESS_TOKEN: $(System.AccessToken)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)

# Test and deploy on windows
- job: WindowsBuild
  pool:
    vmImage: 'vs2017-win2016'
  steps:

  # Build and test
  - powershell: ./build.ps1
    displayName: Build
    env:
      SYSTEM_ACCESS_TOKEN: $(System.AccessToken)
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)

  # Publish code coverage results
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '**/coverage.cobertura.xml'
      reportDirectory: '**/TestResults/cobertura'
      failIfCoverageEmpty: true

  # Push to sandbox MyGet feed
  - task: NuGetCommand@2
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/v3-release'))
    displayName: Push to Sandbox MyGet Feed
    inputs:
      command: push
      packagesToPush: drop/**/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: myget.docfx-v3-sandbox

  # Push to production MyGet feed
  - task: NuGetCommand@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/v3-release'))
    displayName: Push to Production MyGet Feed
    inputs:
      command: push
      packagesToPush: drop/**/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: myget.docfx-v3

# Integration test
- job: IntegrationTest
  condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/v3'), eq(variables['System.PullRequest.TargetBranch'], 'v3'))
  pool:
    name: DocFX
  steps:

  # Checkout
  - checkout: self
    clean: true
    path: docfx

  # Checkout Docs.Build
  - powershell: |
      function exec([string] $cmd) {
          Write-Host $cmd -ForegroundColor Green
          & ([scriptblock]::Create($cmd))
          if ($lastexitcode -ne 0) {
              throw ("Error")
          }
      }

      $auth = "-c http.https://dev.azure.com.extraheader=""AUTHORIZATION: bearer $env:SYSTEM_ACCESS_TOKEN"""

      if (-Not (Test-Path -Path ../Docs.Build)) {
          # Clone Docs.Build if not exists
          exec "git $auth clone https://dev.azure.com/ceapex/Engineering/_git/Docs.Build --depth 1 --branch develop ../Docs.Build"
      } else {
        try {
            # Update Docs.Build to latest
            pushd ../Docs.Build
            exec "git $auth fetch origin develop"
            exec "git checkout --force origin/develop"
            exec "git clean -xdff"
        } finally {
            popd
        }
      }

    displayName: Checkout Docs.Build
    env:
      SYSTEM_ACCESS_TOKEN: $(System.AccessToken)

  # Build
  - powershell: ../Docs.Build/build.ps1 -noTest
    displayName: Build
    env:
      BUILD_REASON: $(Build.Reason)

  # Run integration tests
  - powershell: dotnet run -p ../Docs.Build/test/integration-test -c Release
    displayName: Run integration tests
    env:
      BUILD_REASON: $(Build.Reason)
      DOCFX_APPDATA_PATH: D:/appdata
      DOCS_GITHUB_TOKEN: $(DOCS_GITHUB_TOKEN)
      SYSTEM_ACCESS_TOKEN: $(System.AccessToken)
      AzureServicesAuthConnectionString: $(AzureServicesAuthConnectionString)
