trigger:
  batch: true
  branches:
    include:
      - v3
      - v3-release
      - feature/*
pr:
- v3
- feature/*
jobs:
# Test pull requests on windows, linux and mac
- job: LinuxTest_ubuntu_16_04
  pool:
    vmImage: 'ubuntu-16.04'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:
    - bash: ./build.sh
- job: macOSTest_macOS_10_13
  pool:
    vmImage: 'macOS-10.13'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:
    - bash: ./build.sh
- job: WindowsTest_vs2017_win2016
  pool:
    vmImage: 'vs2017-win2016'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:
    - powershell: ./build.ps1

    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'

    # Publish code coverage results
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '**/coverage.cobertura.xml'
        reportDirectory: '**/TestResults/cobertura'
        failIfCoverageEmpty: true

    # todo: conditional PR deploy, check myget limits

# Deploy commits
- job: Deploy
  pool:
    name: DocFX
  condition: ne(variables['Build.Reason'], 'PullRequest')
  steps:

  # Run impact regression tests
  - powershell: ./impact.ps1
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/v3')
    env:
      OP_BUILD_USER_TOKEN: $(OpBuildUserToken)
      GITHUB_BASIC_AUTH: $(GitHubBasicAuth)
      SYSTEM_ACCESS_TOKEN: $(System.AccessToken)
      GITHUB_ACCESS_TOKEN: $(GitHubAccessToken)
    displayName: Impact Test

  # Build and test
  - powershell: ./build.ps1
    displayName: Build
    env:
      GITHUB_BASIC_AUTH: $(GitHubBasicAuth)
      SYSTEM_ACCESS_TOKEN: $(System.AccessToken)
      GITHUB_ACCESS_TOKEN: $(GitHubAccessToken)

  # Publish test results
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/*.trx'

  # Publish code coverage results
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '**/coverage.cobertura.xml'
      reportDirectory: '**/TestResults/cobertura'
      failIfCoverageEmpty: true

  # Push to sandbox MyGet feed
  - task: NuGetCommand@2
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/v3-release'))
    displayName: Push to Sandbox MyGet Feed
    inputs:
      command: push
      packagesToPush: drop/**/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: myget.docfx-v3-sandbox

  # Push to production MyGet feed
  - task: NuGetCommand@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/v3-release'))
    displayName: Push to Production MyGet Feed
    inputs:
      command: push
      packagesToPush: drop/**/*.nupkg
      nuGetFeedType: external
      publishFeedCredentials: myget.docfx-v3
