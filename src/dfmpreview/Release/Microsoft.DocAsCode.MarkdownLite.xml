<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.DocAsCode.MarkdownLite</name>
    </assembly>
    <members>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.HtmlRenderer">
            <summary>
            The html renderer for gfm.
            </summary>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownContext">
            <summary>
            The context for markdown parser.
            It should be immutable.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownContext.Rules">
            <summary>
            Get the rule set for current context.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownContext.Variables">
            <summary>
            Get the variables.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownContext.CreateContext(System.Collections.Immutable.ImmutableDictionary{System.String,System.Object})">
            <summary>
            Create a new context with different variables.
            </summary>
            <param name="variables">The new variables.</param>
            <returns>a new instance of <see cref="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownContext"/></returns>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine">
            <summary>
            Markdown engine
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.Parser">
            <summary>
            Get the parser (it can read markdown text, then return markdown tokens).
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.Renderer">
            <summary>
            Get the renderer (it can read markdown token, then return text e.g. html).
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.RewriteEngine">
            <summary>
            Get the rewriter (it can read markdown tokens, then rewrite them and return).
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.TokenTreeValidator">
            <summary>
            Get the token tree validator.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.Mark(Microsoft.DocAsCode.MarkdownLite.SourceInfo,Microsoft.DocAsCode.MarkdownLite.IMarkdownContext)">
            <summary>
            Mark markdown text.
            </summary>
            <param name="markdown">The markdown text.</param>
            <param name="context">The markdown context contains rules.</param>
            <param name="sourceInfo">The line info for markdown text.</param>
            <returns>Rendered text.</returns>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.Markup(System.String,System.String)">
            <summary>
            Mark markdown text.
            </summary>
            <param name="markdown">The markdown text.</param>
            <param name="file">The file of markdown.</param>
            <returns>Rendered text.</returns>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownParser">
            <summary>
            Markdown parser.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownParser.Context">
            <summary>
            Get the current markdown context.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownParser.Links">
            <summary>
            Get the No. links.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownParser.Options">
            <summary>
            Get the <see cref="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownParser.Options"/>.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownParser.SwitchContext(Microsoft.DocAsCode.MarkdownLite.IMarkdownContext)">
            <summary>
            Switch the markdown context.
            </summary>
            <param name="context">New context.</param>
            <returns>The old context.</returns>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownParser.Tokenize(Microsoft.DocAsCode.MarkdownLite.SourceInfo)">
            <summary>
            Tokenize the markdown text.
            </summary>
            <param name="markdown">The markdown text.</param>
            <returns>A list of <see cref="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken"/>.</returns>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer">
            <summary>
            Markdown renderer.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer.Engine">
            <summary>
            Get the markdown engine.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer.Links">
            <summary>
            Get the No. links.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer.Options">
            <summary>
            Get the <see cref="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer.Options"/>.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer.Render(Microsoft.DocAsCode.MarkdownLite.IMarkdownToken)">
            <summary>
            Render a token.
            </summary>
            <param name="token">The token to render.</param>
            <returns>The text.</returns>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownRewritable`1">
            <summary>
            Markdown rewritable (for object contains <see cref="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken"/>).
            </summary>
            <typeparam name="T">The type of implement this interface.</typeparam>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownRewritable`1.Rewrite(Microsoft.DocAsCode.MarkdownLite.IMarkdownRewriteEngine)">
            <summary>
            Rewrite object with <see cref="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownRewriteEngine"/>
            </summary>
            <param name="rewriteEngine">The rewrite engine</param>
            <returns>The rewritten object.</returns>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownRewriteEngine">
            <summary>
            Markdown rewrite engine.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownRewriteEngine.Engine">
            <summary>
            Get markdown engine.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownRewriteEngine.Rewrite(System.Collections.Immutable.ImmutableArray{Microsoft.DocAsCode.MarkdownLite.IMarkdownToken})">
            <summary>
            Rewrite markdown tokens.
            </summary>
            <param name="tokens">Source markdown tokens.</param>
            <returns>Rewritten markdown tokens.</returns>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownRule">
            <summary>
            Markdown rule.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownRule.Name">
            <summary>
            Get the name of rule.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownRule.TryMatch(Microsoft.DocAsCode.MarkdownLite.IMarkdownParser,Microsoft.DocAsCode.MarkdownLite.IMarkdownParsingContext)">
            <summary>
            Try match this rule.
            </summary>
            <param name="parser">The markdown parser.</param>
            <param name="context">The context for parser, contains markdown text, line number and file.</param>
            <returns>If matched, an instance of <see cref="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken"/> should be return, otherwise null.</returns>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken">
            <summary>
            The token for markdown.
            It should be immutable.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken.Rule">
            <summary>
            The rule created this token.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken.Context">
            <summary>
            The context when created this token.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken.SourceInfo">
            <summary>
            The source info of this token.
            </summary>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder">
            <summary>
            A builder for create an instance of <see cref="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine"/>
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder.Options">
            <summary>
            The options.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder.BlockRules">
            <summary>
            The block rules.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder.InlineRules">
            <summary>
            The inline rules.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder.Rewriter">
            <summary>
            The markdown token rewriter.
            </summary>
        </member>
        <member name="P:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder.TokenTreeValidator">
            <summary>
            The markdown token tree validator.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder.CreateParseContext">
            <summary>
            Create markdown paring context.
            </summary>
            <returns>a instance of <see cref="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownContext"/></returns>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder.CreateEngine(System.Object)">
            <summary>
            Create an instance of <see cref="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine"/>
            </summary>
            <param name="renderer">the renderer.</param>
            <returns>an instance of <see cref="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine"/></returns>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.MarkdownRendererAdapter">
            <summary>
            The adapter for markdown renderer, use dynamic dispatch.
            </summary>
        </member>
        <member name="F:Microsoft.DocAsCode.MarkdownLite.Regexes.Inline.Link">
            <summary>
            <![CDATA[
            ^                                           start of string
            !?                                          '!' 0~1
            \[                                          '['
            ((?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*)    group 1: text
            \]                                          ']'
            \s*                                         white spaces
            \(                                          '('
            \s*                                         white spaces
            <?                                          '<' 0~1
            (                                           start group 2: link
                (?:                                     start non-capturing group
                    [^()]                               any chararacter but '(' or ')'
                    |                                   or
                    \((?<DEPTH>)                        '(' with depth++
                    |                                   or
                    \)(?<-DEPTH>)                       ')' with depth--
                )                                       end non-capturing group
                +?                                      lazy 1~
                (?(DEPTH)(?!))                          require depth = 0
            )                                           end group 2: link
            >?                                          '>' 0~1
            (?:                                         start non-capturing group
                \s+                                     white spaces
                (['""])                                 group 3: quotes
                ([\s\S]*?)                              group 4: title
                \3                                      ref group 3
            )?                                          end non-capturing group 0~1
            \s*                                         white spaces
            \)                                          ')'
            ]]>
            </summary>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.StringBuffer">
            <summary>
            A type like <see cref="T:System.Text.StringBuilder"/> but only do concat.
            </summary>
        </member>
        <member name="F:Microsoft.DocAsCode.MarkdownLite.StringBuffer.Empty">
            <summary>
            An empty <see cref="T:Microsoft.DocAsCode.MarkdownLite.StringBuffer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.MarkdownTextInlineRule.Smartypants(Microsoft.DocAsCode.MarkdownLite.Options,System.String)">
            <summary>
            Smartypants Transformations
            </summary>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenRewriter">
            <summary>
            rewrite the markdown when rendering
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenRewriter.Rewrite(Microsoft.DocAsCode.MarkdownLite.IMarkdownRewriteEngine,Microsoft.DocAsCode.MarkdownLite.IMarkdownToken)">
            <summary>
            rewrite
            </summary>
            <param name="engine">the engine</param>
            <param name="token">the token</param>
            <returns>If need rewrite, return the new token, otherwise, null</returns>
        </member>
        <member name="T:Microsoft.DocAsCode.MarkdownLite.MarkdownNullTokenRewriter">
            <summary>
            Null object.
            </summary>
        </member>
    </members>
</doc>
