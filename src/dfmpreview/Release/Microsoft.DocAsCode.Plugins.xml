<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.DocAsCode.Plugins</name>
    </assembly>
    <members>
        <member name="T:Microsoft.DocAsCode.Plugins.ICustomMarkdownTagValidator">
            <summary>
            Contract interface for custom validate tag in markdown
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IDocumentBuildContext.GetFilePath(System.String)">
            <summary>
            Get final file path from working folder, starting with ~/
            </summary>
            <param name="key">Key is the original file path from working folder, starting with ~/</param>
            <returns>The final file path for current file</returns>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IDocumentBuildContext.SetFilePath(System.String,System.String)">
            <summary>
            Set the final file path for current file
            </summary>
            <param name="key">The file key of current file</param>
            <param name="filePath">The final file path for current file</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IDocumentBuildContext.GetXrefSpec(System.String)">
            <summary>
            Get internal xref spec for current uid
            </summary>
            <param name="uid">The uid of the file</param>
            <returns>The file key of current file</returns>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IDocumentBuildContext.RegisterInternalXrefSpec(Microsoft.DocAsCode.Plugins.XRefSpec)">
            <summary>
            Register internal xref spec
            </summary>
            <param name="uid">The uid of current file</param>
            <param name="fileKey">The file key of current file</param>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IDocumentBuildContext.GetTocFileKeySet(System.String)">
            <summary>
            Get a set of file key for the toc files that current file belongs to
            </summary>
            <param name="key">The key of current file</param>
            <returns>The set of file key for the toc files that current file belongs to</returns>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IDocumentBuildContext.RegisterToc(System.String,System.String)">
            <summary>
            Register the relationship between current toc file and the article
            </summary>
            <param name="tocFileKey">The key of the toc file that the file belongs to</param>
            <param name="fileKey">The key of the file that belongs to the toc</param>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IDocumentBuildContext.RegisterTocInfo(Microsoft.DocAsCode.Plugins.TocInfo)">
            <summary>
            Register the toc file to context with its information provided
            </summary>
            <param name="toc">The information for the toc, containing the homepage of the toc</param>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IDocumentBuildContext.GetTocInfo">
            <summary>
            Get all the registered toc information
            </summary>
            <returns>All the registered toc information</returns>
        </member>
        <member name="P:Microsoft.DocAsCode.Plugins.IHostService.Processor">
            <summary>
            Get current <see cref="T:Microsoft.DocAsCode.Plugins.IDocumentProcessor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IPostProcessor.PrepareMetadata(System.Collections.Immutable.ImmutableDictionary{System.String,System.Object})">
            <summary>
            Update global metadata before building all the files declared in `docfx.json`
            </summary>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.IPostProcessor.Process(Microsoft.DocAsCode.Plugins.Manifest,System.String)">
            <summary>
            Add/remove/update all the files included in manifest
            </summary>
            <param name="manifest"></param>
            <param name="outputFolder">The output folder where our static website will be placed</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.DocAsCode.Plugins.ISupportIncrementalBuild">
            <summary>
            Declare a document processor or a step can support incremental build.
            </summary>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.ISupportIncrementalBuild.GetIncrementalContextHash">
            <summary>
            Get the hash of incremental context, if it is different from latest one then full build.
            </summary>
            <returns>the hash.</returns>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.ISupportIncrementalBuild.CanIncrementalBuild(Microsoft.DocAsCode.Plugins.FileAndType)">
            <summary>
            Check each file, when incremental context hash is same.
            </summary>
            <param name="fileAndType">the file and type information</param>
            <returns>Can use incremental build for this file.</returns>
        </member>
        <member name="M:Microsoft.DocAsCode.Plugins.XRefSpec.Merge(Microsoft.DocAsCode.Plugins.XRefSpec,Microsoft.DocAsCode.Plugins.XRefSpec)">
            <summary>
            Merge two xref spec (right overwrite left).
            </summary>
        </member>
    </members>
</doc>
