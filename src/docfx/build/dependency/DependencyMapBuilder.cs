// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Collections.Concurrent;
using System.Diagnostics;
using System.Linq;

namespace Microsoft.Docs.Build
{
    /// <summary>
    /// A dependency map generated by one file building
    /// </summary>
    internal class DependencyMapBuilder
    {
        private readonly ConcurrentHashSet<DependencyItem> _dependencyItems = new ConcurrentHashSet<DependencyItem>();

        public void AddDependencyItem(Document relativeTo, Document dependencyDoc, DependencyType type)
        {
            Debug.Assert(relativeTo != null);

            if (relativeTo == null || dependencyDoc == null)
            {
                return;
            }

            // Do not mix source document in dependency map for localized build
            var isLocalizedBuild = relativeTo.Docset.IsLocalizedBuild() || dependencyDoc.Docset.IsLocalizedBuild();
            if (isLocalizedBuild && (!relativeTo.Docset.IsLocalized() || !dependencyDoc.Docset.IsLocalized()))
            {
                return;
            }

            _dependencyItems.TryAdd(new DependencyItem(relativeTo, dependencyDoc, type));
        }

        public DependencyMap Build()
        {
            return new DependencyMap(_dependencyItems
                .GroupBy(k => k.Source)
                .ToDictionary(
                    k => k.Key,
                    v => (from r in v.Distinct()
                         orderby r.Dest.FilePath, r.Type
                         select r).ToList()));
        }
    }
}
