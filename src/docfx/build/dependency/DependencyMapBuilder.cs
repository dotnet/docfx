// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Microsoft.Docs.Build
{
    /// <summary>
    /// A dependency map generated by one file building
    /// </summary>
    internal class DependencyMapBuilder
    {
        private readonly ConcurrentHashSet<DependencyItem> _dependencyItems = new ConcurrentHashSet<DependencyItem>();

        public void AddDependencyItem(Document from, Document to, DependencyType type)
        {
            Debug.Assert(from != null);

            if (to == null)
            {
                return;
            }

            var isLocalizedBuild = from.Docset.IsLocalizedBuild() || to.Docset.IsLocalizedBuild();
            if (isLocalizedBuild && !from.Docset.IsLocalized())
            {
                return;
            }

            _dependencyItems.TryAdd(new DependencyItem(from, to, type));
        }

        public DependencyMap Build()
        {
            return new DependencyMap(Flatten());
        }

        private Dictionary<Document, HashSet<DependencyItem>> Flatten()
        {
            var result = new Dictionary<Document, HashSet<DependencyItem>>();
            var graph = _dependencyItems
                .GroupBy(k => k.From)
                .OrderByDescending(k => k.Key.FilePath)
                .ToDictionary(
                    k => k.Key,
                    v => v.ToHashSet());

            foreach (var (from, value) in graph)
            {
                result[from] = new HashSet<DependencyItem>();
                foreach (var item in value)
                {
                    var stack = new Stack<DependencyItem>();
                    stack.Push(item);
                    var visited = new HashSet<Document> { from };
                    DependencyItem previous = null;
                    while (stack.Count > 0)
                    {
                        var current = stack.Pop();
                        if (previous != null && !CanTransit(previous))
                        {
                            continue;
                        }
                        result[from].Add(new DependencyItem(from, current.To, current.Type));

                        // if the dependency destination is already in the result set, we can reuse it
                        if (current.To != from && CanTransit(current) && result.TryGetValue(current.To, out var nextDependencies))
                        {
                            foreach (var dependency in nextDependencies)
                            {
                                result[from].Add(new DependencyItem(from, dependency.To, dependency.Type));
                            }
                            continue;
                        }

                        if (graph.ContainsKey(current.To) && !visited.Contains(current.To))
                        {
                            foreach (var dependencyItem in graph[current.To])
                            {
                                previous = current;
                                visited.Add(current.To);
                                stack.Push(dependencyItem);
                            }
                        }
                    }
                }
            }
            return result;
        }

        private bool CanTransit(DependencyItem dependencyItem)
            => dependencyItem.Type == DependencyType.Inclusion;
    }
}
