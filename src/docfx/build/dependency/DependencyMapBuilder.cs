// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Microsoft.Docs.Build
{
    /// <summary>
    /// A dependency map generated by one file building
    /// </summary>
    internal class DependencyMapBuilder
    {
        private readonly ConcurrentHashSet<DependencyItem> _dependencyItems = new ConcurrentHashSet<DependencyItem>();

        public void AddDependencyItem(Document from, Document to, DependencyType type)
        {
            Debug.Assert(from != null);

            if (to == null)
            {
                return;
            }

            var isLocalizedBuild = from.Docset.IsLocalizedBuild() || to.Docset.IsLocalizedBuild();
            if (isLocalizedBuild && !from.Docset.IsLocalized())
            {
                return;
            }

            _dependencyItems.TryAdd(new DependencyItem(from, to, type));
        }

        public DependencyMap Build()
        {
            return new DependencyMap(Flatten());
        }

        private Dictionary<Document, HashSet<DependencyItem>> Flatten()
        {
            var result = new Dictionary<Document, HashSet<DependencyItem>>();
            var graph = _dependencyItems
                .GroupBy(k => k.From)
                .ToDictionary(
                    k => k.Key,
                    v => (from r in v
                          orderby r.To.FilePath, r.Type
                          select r).ToHashSet());

            foreach (var (from, value) in graph)
            {
                result[from] = new HashSet<DependencyItem>();
                foreach (var item in value)
                {
                    result[from].Add(item);
                    Transit(from, graph, item, item, result);
                }
            }
            return result;
        }

        private void Transit(Document from, Dictionary<Document, HashSet<DependencyItem>> graph, DependencyItem current, DependencyItem next, Dictionary<Document, HashSet<DependencyItem>> dependencies)
        {
            if (!CanTransit(current))
            {
                return;
            }

            // if the dependency destination is already in the result set, we can reuse it
            if (next.To != from && dependencies.TryGetValue(next.To, out var nextDependencies))
            {
                foreach (var item in nextDependencies)
                {
                    dependencies[from].Add(new DependencyItem(from, item.To, item.Type));
                }
                return;
            }

            if (!graph.ContainsKey(next.To) || next.To.Equals(from))
            {
                dependencies[from].Add(new DependencyItem(from, next.To, next.Type));
            }
            else
            {
                foreach (var item in graph[next.To])
                {
                    Transit(from, graph, next, item, dependencies);
                }
            }
        }

        private bool CanTransit(DependencyItem dependencyItem)
            => dependencyItem.Type == DependencyType.Inclusion;
    }
}
