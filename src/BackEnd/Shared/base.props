<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <SchemaVersion>2.0</SchemaVersion>

    <!-- Cautious: trailing forward slash and backward slash must be eliminated -->
    <BRANCH_ROOT Condition=" '$(BRANCH_ROOT)' == '' ">$([System.IO.Directory]::GetParent($(MSBuildThisFileDirectory)).Parent.FullName)</BRANCH_ROOT>
    <VersionCSPath>$(BRANCH_ROOT)\TEMP\</VersionCSPath>
    <CurrentVersion>1.0.0.0</CurrentVersion>
  </PropertyGroup>


  <UsingTask TaskName="GenerateVersionCSFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <GitVersion ParameterType="System.String" Required="true" />
      <VersionCSPath ParameterType="System.String" Required="true" />
      <CurrentVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
var gitVersion = GitVersion.Trim().Split('-');
string[] version = new string[4];
version[3] = "0";
version[2] = gitVersion.Length > 1 ? gitVersion[1] : "0";
version[1] = gitVersion[0].Split('.')[1];
version[0] = gitVersion[0].Split('.')[0].Substring(1);
string updatedVersion = string.Join(".", version);
CurrentVersion = updatedVersion;
string strOutputFilePath = System.IO.Path.Combine(VersionCSPath, "version.cs");
string strOutputFileContent = string.Format(
"using System.Reflection;\n\n" +
"[assembly: AssemblyVersion(\"{0}\")]\n" +
"[assembly: AssemblyFileVersion(\"{1}\")]\n\n" +
"[assembly: AssemblyCompanyAttribute(\"CAPS\")]\n" +
"[assembly: AssemblyDescriptionAttribute(\"CAPS Package\")]",
updatedVersion, updatedVersion);
if(System.IO.File.Exists(strOutputFilePath))
{
    if(System.IO.File.ReadAllText(strOutputFilePath) == strOutputFileContent)
    {
        return true;
    }
}

try {
  System.IO.File.WriteAllText(strOutputFilePath, strOutputFileContent);
} catch {
  // Race conditions may take place when multiple projects are built at the same time
  // Ignore exceptions
}
]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Version information is mandatory -->
  <Target Name="GenerateVersionInfo" BeforeTargets="PrepareForBuild">
    <Exec Command='md "$(VersionCSPath)"' Condition="!Exists($(VersionCSPath))" />
    <Exec Command="git.exe describe" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output PropertyName="OutputConsoleValue" TaskParameter="ConsoleOutput"/>
      <Output PropertyName="ExecExitCode" TaskParameter="ExitCode"/>
    </Exec>
    <GenerateVersionCSFile Condition="$(ExecExitCode) == '0'" GitVersion="$(OutputConsoleValue)" VersionCSPath="$(VersionCSPath)">
      <Output PropertyName="CurrentVersion" TaskParameter="CurrentVersion"/>
    </GenerateVersionCSFile>
    <GenerateVersionCSFile Condition="$(ExecExitCode) != '0'" GitVersion="'$(CurrentVersion)'" VersionCSPath="$(VersionCSPath)"/>
  </Target>
  <ItemGroup>
    <Compile Include="$(BRANCH_ROOT)\TEMP\version.cs" />
  </ItemGroup>
</Project>
