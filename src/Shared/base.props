<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectLockFile>donotuse_project.lock.json</ProjectLockFile>
    <VersionCSPath>TEMP\</VersionCSPath>
    <CurrentVersion>1.0.0.0</CurrentVersion>
    <!-- Note: by convention assembly should be named after the root namespace -->
    <AssemblyName Condition=" '$(AssemblyName)' == '' ">$(MSBuildProjectName)</AssemblyName>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <RootNamespace Condition=" '$(RootNamespace)' == '' ">$(AssemblyName)</RootNamespace>
    <DebugSymbols>true</DebugSymbols>
    <ErrorReport>prompt</ErrorReport>

    <!-- Note: unless explicitly specified, we will generate DLL -->
    <OutputType Condition=" '$(OutputType)' == '' ">Library</OutputType>
    <Prefer32Bit>false</Prefer32Bit>
    <TargetFrameworkVersion>v4.5.2</TargetFrameworkVersion>

    <!-- Note: get rid of vshost.exe since we don't gain much benefits -->
    <UseVSHostingProcess>false</UseVSHostingProcess>
    <WarningLevel>4</WarningLevel>
    <OutputPath Condition="'$(OutputPath)'==''">$(MSBuildThisFileDirectory)..\..\target\$(Configuration)\$(MSBuildProjectName)\</OutputPath>
    <TaskToolPath>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll</TaskToolPath>
    <TaskToolPath Condition="'$(MSBuildToolsVersion)' == '14.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</TaskToolPath>
    <VersionFilePath Condition="'$(VersionFilePath)' == ''">$(MSBuildThisFileDirectory)..\..\TEMP\version.txt</VersionFilePath>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE</DefineConstants>
  </PropertyGroup>

  <UsingTask TaskName="GenerateVersionCSFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(TaskToolPath)">
    <ParameterGroup>
      <CurrentVersion ParameterType="System.String" Required="true" />
      <VersionCSPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            // Version format similar to 0.4.8-alpha-g0a0259d
            var parts = CurrentVersion.Split('-');
            var version = string.Format("{0}.{1}", parts[0], 0);
            var revision = DateTime.Now.ToString("yyMMdd").Substring(1);
            var fileVersion = string.Format("{0}.{1}", parts[0], revision);
            string versionFilePath = Path.Combine(VersionCSPath, "version.cs");
            string content = string.Format(@"
using System.Reflection;

[assembly: AssemblyVersion(""{0}"")]
[assembly: AssemblyFileVersion(""{1}"")]

[assembly: AssemblyCompanyAttribute(""Microsoft DocAsCode"")]
[assembly: AssemblyDescriptionAttribute(""Microsoft DocAsCode Package"")]", version, fileVersion);
            if (File.Exists(versionFilePath))
            {
                if (File.ReadAllText(versionFilePath) == content)
                {
                    return true;
                }
            }

            try
            {
                File.WriteAllText(versionFilePath, content);
            }
            catch
            {
                // Race conditions may take place when multiple projects are built at the same time
                // Ignore exceptions
            }
]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="GetSourceVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(TaskToolPath)">
    <ParameterGroup>
      <VersionFilePath ParameterType="System.String" Required="true" />
      <CurrentVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            CurrentVersion = "1.0.0";
            if (File.Exists(VersionFilePath))
            {
              try
              {
                var firstLine = File.ReadLines(VersionFilePath).FirstOrDefault();
                if (!string.IsNullOrEmpty(firstLine))
                {
                  CurrentVersion =  firstLine.Trim('v');
                }
              } catch (FileNotFoundException) { }
            }
]]>
      </Code>
    </Task>
  </UsingTask>
  
  <!-- Version information is mandatory -->
  <Target Name="GenerateVersionInfo" BeforeTargets="PrepareForBuild">
    <Exec Command='md "$(VersionCSPath)"' Condition="!Exists($(VersionCSPath))" />
    <GetSourceVersion VersionFilePath="$(VersionFilePath)">
      <Output PropertyName="CurrentVersion" TaskParameter="CurrentVersion"/>
    </GetSourceVersion>
    <GenerateVersionCSFile CurrentVersion="$(CurrentVersion)" VersionCSPath="$(VersionCSPath)"/>
    <Message Text="Read current version $(CurrentVersion) from '$(VersionFilePath)'" />
  </Target>
  <ItemGroup>
    <Compile Include="$(VersionCSPath)version.cs" />
  </ItemGroup>
</Project>
