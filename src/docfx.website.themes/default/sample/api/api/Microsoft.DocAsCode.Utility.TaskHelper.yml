items:
- uid: Microsoft.DocAsCode.Utility.TaskHelper
  id: TaskHelper
  parent: Microsoft.DocAsCode.Utility
  children:
  - Microsoft.DocAsCode.Utility.TaskHelper.WithFinally(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task})
  - Microsoft.DocAsCode.Utility.TaskHelper.WithFinally``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task})
  - Microsoft.DocAsCode.Utility.TaskHelper.WhenAllAndThrowAggregateExceptionOnErrorAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - Microsoft.DocAsCode.Utility.TaskHelper.ForEachInParallelAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32)
  - Microsoft.DocAsCode.Utility.TaskHelper.ForEachInParallelAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  - Microsoft.DocAsCode.Utility.TaskHelper.SelectInParallelAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Int32)
  - Microsoft.DocAsCode.Utility.TaskHelper.SelectInParallelAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})
  - Microsoft.DocAsCode.Utility.TaskHelper.Completed
  - Microsoft.DocAsCode.Utility.TaskHelper.FirstOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  - Microsoft.DocAsCode.Utility.TaskHelper.FirstAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  - Microsoft.DocAsCode.Utility.TaskHelper.WhereAsync``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  - Microsoft.DocAsCode.Utility.TaskHelper.WhereAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  - Microsoft.DocAsCode.Utility.TaskHelper.ToDictionaryAsync``3(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}})
  - Microsoft.DocAsCode.Utility.TaskHelper.ToDictionaryAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}})
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: TaskHelper
  fullname: Microsoft.DocAsCode.Utility.TaskHelper
  type: Class
  source:
    remote: &o0
      path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
      branch: DefaultTheme
      repo: https://github.com/aspnet/docfx.git
      key: 121f5b59
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 15
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  syntax:
    content: public class TaskHelper
    content.vb: Public Class TaskHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Microsoft.DocAsCode.Utility.TaskHelper.WithFinally(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task})
  id: WithFinally(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: WithFinally(Task, Func<Task, Task>)
  name.vb: WithFinally(Task, Func(Of Task, Task))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.WithFinally(System.Threading.Tasks.Task, System.Func<System.Threading.Tasks.Task, System.Threading.Tasks.Task>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.WithFinally(System.Threading.Tasks.Task, System.Func(Of System.Threading.Tasks.Task, System.Threading.Tasks.Task))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 23
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  summary: WithFinally
  syntax:
    content: public static Task WithFinally(Task tryCode, Func<Task, Task> finallyCode)
    content.vb: Public Shared Function WithFinally(tryCode As Task, finallyCode As Func(Of Task, Task)) As Task
    parameters:
    - id: tryCode
      type: System.Threading.Tasks.Task
      description: the task contains try part
    - id: finallyCode
      type: System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task}
      description: the task contains finally part
    return:
      type: System.Threading.Tasks.Task
      description: the task included try part and finally part
- uid: Microsoft.DocAsCode.Utility.TaskHelper.WithFinally``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task})
  id: WithFinally``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: WithFinally<TResult>(Task<TResult>, Func<Task<TResult>, Task>)
  name.vb: WithFinally(Of TResult)(Task(Of TResult), Func(Of Task(Of TResult), Task))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.WithFinally<TResult>(System.Threading.Tasks.Task<TResult>, System.Func<System.Threading.Tasks.Task<TResult>, System.Threading.Tasks.Task>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.WithFinally(Of TResult)(System.Threading.Tasks.Task(Of TResult), System.Func(Of System.Threading.Tasks.Task(Of TResult), System.Threading.Tasks.Task))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 36
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  summary: WithFinally
  syntax:
    content: public static Task<TResult> WithFinally<TResult>(Task<TResult> tryCode, Func<Task<TResult>, Task> finallyCode)
    content.vb: Public Shared Function WithFinally(Of TResult)(tryCode As Task(Of TResult), finallyCode As Func(Of Task(Of TResult), Task)) As Task(Of TResult)
    parameters:
    - id: tryCode
      type: System.Threading.Tasks.Task{{TResult}}
      description: the task contains try part
    - id: finallyCode
      type: System.Func{System.Threading.Tasks.Task{{TResult}},System.Threading.Tasks.Task}
      description: the task contains finally part
    typeParameters:
    - id: TResult
      description: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: the task included try part and finally part
- uid: Microsoft.DocAsCode.Utility.TaskHelper.WhenAllAndThrowAggregateExceptionOnErrorAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAllAndThrowAggregateExceptionOnErrorAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: WhenAllAndThrowAggregateExceptionOnErrorAsync<TResult>(IEnumerable<Task<TResult>>)
  name.vb: WhenAllAndThrowAggregateExceptionOnErrorAsync(Of TResult)(IEnumerable(Of Task(Of TResult)))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.WhenAllAndThrowAggregateExceptionOnErrorAsync<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.WhenAllAndThrowAggregateExceptionOnErrorAsync(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 49
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  summary: Task.WhenAll, and re-throw AggregateException containing exceptions from all failed tasks
  syntax:
    content: public static Task<TResult[]> WhenAllAndThrowAggregateExceptionOnErrorAsync<TResult>(IEnumerable<Task<TResult>> tasks)
    content.vb: Public Shared Function WhenAllAndThrowAggregateExceptionOnErrorAsync(Of TResult)(tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
      description: the list of tasks
    typeParameters:
    - id: TResult
      description: task result type
    return:
      type: System.Threading.Tasks.Task{{TResult}[]}
      description: arrry of task result
- uid: Microsoft.DocAsCode.Utility.TaskHelper.ForEachInParallelAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32)
  id: ForEachInParallelAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32)
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: ForEachInParallelAsync<T>(IEnumerable<T>, Func<T, Task>, Int32)
  name.vb: ForEachInParallelAsync(Of T)(IEnumerable(Of T), Func(Of T, Task), Int32)
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.ForEachInParallelAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Threading.Tasks.Task>, System.Int32)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.ForEachInParallelAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 76
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  summary: Provide parallel version for ForEach
  syntax:
    content: public static Task ForEachInParallelAsync<T>(IEnumerable<T> source, Func<T, Task> body, int maxParallelism)
    content.vb: Public Shared Function ForEachInParallelAsync(Of T)(source As IEnumerable(Of T), body As Func(Of T, Task), maxParallelism As Integer) As Task
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The enumerable to control the foreach loop
    - id: body
      type: System.Func{{T},System.Threading.Tasks.Task}
      description: The task body
    - id: maxParallelism
      type: System.Int32
      description: The max parallelism allowed
    typeParameters:
    - id: T
      description: The type for the enumerable
    return:
      type: System.Threading.Tasks.Task
      description: The task
- uid: Microsoft.DocAsCode.Utility.TaskHelper.ForEachInParallelAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  id: ForEachInParallelAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: ForEachInParallelAsync<T>(IEnumerable<T>, Func<T, Task>)
  name.vb: ForEachInParallelAsync(Of T)(IEnumerable(Of T), Func(Of T, Task))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.ForEachInParallelAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Threading.Tasks.Task>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.ForEachInParallelAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 111
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  summary: Provide parallel version for ForEach
  remarks: The max parallelism is 64.
  syntax:
    content: public static Task ForEachInParallelAsync<T>(IEnumerable<T> source, Func<T, Task> body)
    content.vb: Public Shared Function ForEachInParallelAsync(Of T)(source As IEnumerable(Of T), body As Func(Of T, Task)) As Task
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The enumerable to control the foreach loop
    - id: body
      type: System.Func{{T},System.Threading.Tasks.Task}
      description: The task body
    typeParameters:
    - id: T
      description: The type for the enumerable
    return:
      type: System.Threading.Tasks.Task
      description: The task
- uid: Microsoft.DocAsCode.Utility.TaskHelper.SelectInParallelAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Int32)
  id: SelectInParallelAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Int32)
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: SelectInParallelAsync<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Task<TResult>>, Int32)
  name.vb: SelectInParallelAsync(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Task(Of TResult)), Int32)
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.SelectInParallelAsync<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Threading.Tasks.Task<TResult>>, System.Int32)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.SelectInParallelAsync(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Threading.Tasks.Task(Of TResult)), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 125
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  summary: Provide parallel version for Select that each element will map to a result
  syntax:
    content: public static Task<IReadOnlyList<TResult>> SelectInParallelAsync<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, Task<TResult>> body, int maxParallelism)
    content.vb: Public Shared Function SelectInParallelAsync(Of TSource, TResult)(source As IEnumerable(Of TSource), body As Func(Of TSource, Task(Of TResult)), maxParallelism As Integer) As Task(Of IReadOnlyList(Of TResult))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The enumerable to control the select
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.Task{{TResult}}}
      description: The select body
    - id: maxParallelism
      type: System.Int32
      description: The max parallelism allowed
    typeParameters:
    - id: TSource
      description: The type for the enumerable
    - id: TResult
      description: The type for the result
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TResult}}}
      description: The task
- uid: Microsoft.DocAsCode.Utility.TaskHelper.SelectInParallelAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})
  id: SelectInParallelAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: SelectInParallelAsync<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Task<TResult>>)
  name.vb: SelectInParallelAsync(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Task(Of TResult)))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.SelectInParallelAsync<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Threading.Tasks.Task<TResult>>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.SelectInParallelAsync(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Threading.Tasks.Task(Of TResult)))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 161
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  summary: Provide parallel version for Select that each element will map to a result
  remarks: The max parallelism is 64.
  syntax:
    content: public static Task<IReadOnlyList<TResult>> SelectInParallelAsync<TSource, TResult>(IEnumerable<TSource> source, Func<TSource, Task<TResult>> body)
    content.vb: Public Shared Function SelectInParallelAsync(Of TSource, TResult)(source As IEnumerable(Of TSource), body As Func(Of TSource, Task(Of TResult))) As Task(Of IReadOnlyList(Of TResult))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The enumerable to control the select
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.Task{{TResult}}}
      description: The select body
    typeParameters:
    - id: TSource
      description: The type for the enumerable
    - id: TResult
      description: The type for the result
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TResult}}}
      description: The task
- uid: Microsoft.DocAsCode.Utility.TaskHelper.Completed
  id: Completed
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: Completed
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.Completed
  type: Field
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 169
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  summary: A completed task
  syntax:
    content: public static readonly Task Completed
    content.vb: Public Shared ReadOnly Completed As Task
- uid: Microsoft.DocAsCode.Utility.TaskHelper.FirstOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  id: FirstOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: FirstOrDefaultAsync<T>(IEnumerable<T>, Func<T, Task<Boolean>>)
  name.vb: FirstOrDefaultAsync(Of T)(IEnumerable(Of T), Func(Of T, Task(Of Boolean)))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.FirstOrDefaultAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Threading.Tasks.Task<System.Boolean>>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.FirstOrDefaultAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 171
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  syntax:
    content: public static Task<T> FirstOrDefaultAsync<T>(IEnumerable<T> source, Func<T, Task<bool>> predicate)
    content.vb: Public Shared Function FirstOrDefaultAsync(Of T)(source As IEnumerable(Of T), predicate As Func(Of T, Task(Of Boolean))) As Task(Of T)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: predicate
      type: System.Func{{T},System.Threading.Tasks.Task{System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: 
- uid: Microsoft.DocAsCode.Utility.TaskHelper.FirstAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  id: FirstAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: FirstAsync<T>(IEnumerable<T>, Func<T, Task<Boolean>>)
  name.vb: FirstAsync(Of T)(IEnumerable(Of T), Func(Of T, Task(Of Boolean)))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.FirstAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Threading.Tasks.Task<System.Boolean>>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.FirstAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 191
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  syntax:
    content: public static Task<T> FirstAsync<T>(IEnumerable<T> source, Func<T, Task<bool>> predicate)
    content.vb: Public Shared Function FirstAsync(Of T)(source As IEnumerable(Of T), predicate As Func(Of T, Task(Of Boolean))) As Task(Of T)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: predicate
      type: System.Func{{T},System.Threading.Tasks.Task{System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: 
- uid: Microsoft.DocAsCode.Utility.TaskHelper.WhereAsync``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  id: WhereAsync``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: WhereAsync<T>(IReadOnlyList<T>, Func<T, Task<Boolean>>)
  name.vb: WhereAsync(Of T)(IReadOnlyList(Of T), Func(Of T, Task(Of Boolean)))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.WhereAsync<T>(System.Collections.Generic.IReadOnlyList<T>, System.Func<T, System.Threading.Tasks.Task<System.Boolean>>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.WhereAsync(Of T)(System.Collections.Generic.IReadOnlyList(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 211
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  syntax:
    content: public static Task<IEnumerable<T>> WhereAsync<T>(IReadOnlyList<T> source, Func<T, Task<bool>> predicate)
    content.vb: Public Shared Function WhereAsync(Of T)(source As IReadOnlyList(Of T), predicate As Func(Of T, Task(Of Boolean))) As Task(Of IEnumerable(Of T))
    parameters:
    - id: source
      type: System.Collections.Generic.IReadOnlyList{{T}}
    - id: predicate
      type: System.Func{{T},System.Threading.Tasks.Task{System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
      description: 
- uid: Microsoft.DocAsCode.Utility.TaskHelper.WhereAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  id: WhereAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: WhereAsync<T>(IEnumerable<T>, Func<T, Task<Boolean>>)
  name.vb: WhereAsync(Of T)(IEnumerable(Of T), Func(Of T, Task(Of Boolean)))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.WhereAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Threading.Tasks.Task<System.Boolean>>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.WhereAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task(Of System.Boolean)))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 225
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  syntax:
    content: public static Task<IEnumerable<T>> WhereAsync<T>(IEnumerable<T> source, Func<T, Task<bool>> predicate)
    content.vb: Public Shared Function WhereAsync(Of T)(source As IEnumerable(Of T), predicate As Func(Of T, Task(Of Boolean))) As Task(Of IEnumerable(Of T))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: predicate
      type: System.Func{{T},System.Threading.Tasks.Task{System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
      description: 
- uid: Microsoft.DocAsCode.Utility.TaskHelper.ToDictionaryAsync``3(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}})
  id: ToDictionaryAsync``3(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: ToDictionaryAsync<T, TKey, TValue>(IReadOnlyList<T>, Func<T, TKey>, Func<T, Task<TValue>>)
  name.vb: ToDictionaryAsync(Of T, TKey, TValue)(IReadOnlyList(Of T), Func(Of T, TKey), Func(Of T, Task(Of TValue)))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.ToDictionaryAsync<T, TKey, TValue>(System.Collections.Generic.IReadOnlyList<T>, System.Func<T, TKey>, System.Func<T, System.Threading.Tasks.Task<TValue>>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.ToDictionaryAsync(Of T, TKey, TValue)(System.Collections.Generic.IReadOnlyList(Of T), System.Func(Of T, TKey), System.Func(Of T, System.Threading.Tasks.Task(Of TValue)))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 238
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  syntax:
    content: public static Task<Dictionary<TKey, TValue>> ToDictionaryAsync<T, TKey, TValue>(IReadOnlyList<T> source, Func<T, TKey> keySelector, Func<T, Task<TValue>> valueSelector)
    content.vb: Public Shared Function ToDictionaryAsync(Of T, TKey, TValue)(source As IReadOnlyList(Of T), keySelector As Func(Of T, TKey), valueSelector As Func(Of T, Task(Of TValue))) As Task(Of Dictionary(Of TKey, TValue))
    parameters:
    - id: source
      type: System.Collections.Generic.IReadOnlyList{{T}}
    - id: keySelector
      type: System.Func{{T},{TKey}}
    - id: valueSelector
      type: System.Func{{T},System.Threading.Tasks.Task{{TValue}}}
    typeParameters:
    - id: T
    - id: TKey
    - id: TValue
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TValue}}}
      description: 
- uid: Microsoft.DocAsCode.Utility.TaskHelper.ToDictionaryAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}})
  id: ToDictionaryAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}})
  parent: Microsoft.DocAsCode.Utility.TaskHelper
  href: Microsoft.DocAsCode.Utility.TaskHelper.yml
  name: ToDictionaryAsync<T, TKey, TValue>(IEnumerable<T>, Func<T, TKey>, Func<T, Task<TValue>>)
  name.vb: ToDictionaryAsync(Of T, TKey, TValue)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, Task(Of TValue)))
  fullname: Microsoft.DocAsCode.Utility.TaskHelper.ToDictionaryAsync<T, TKey, TValue>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Func<T, System.Threading.Tasks.Task<TValue>>)
  fullname.vb: Microsoft.DocAsCode.Utility.TaskHelper.ToDictionaryAsync(Of T, TKey, TValue)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Func(Of T, System.Threading.Tasks.Task(Of TValue)))
  type: Method
  source:
    remote: *o0
    path: src/Microsoft.DocAsCode.Utility/TaskUtility.cs
    startLine: 261
  assemblies:
  - Microsoft.DocAsCode.Utility
  namespace: Microsoft.DocAsCode.Utility
  syntax:
    content: public static Task<Dictionary<TKey, TValue>> ToDictionaryAsync<T, TKey, TValue>(IEnumerable<T> source, Func<T, TKey> keySelector, Func<T, Task<TValue>> valueSelector)
    content.vb: Public Shared Function ToDictionaryAsync(Of T, TKey, TValue)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey), valueSelector As Func(Of T, Task(Of TValue))) As Task(Of Dictionary(Of TKey, TValue))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: keySelector
      type: System.Func{{T},{TKey}}
    - id: valueSelector
      type: System.Func{{T},System.Threading.Tasks.Task{{TValue}}}
    typeParameters:
    - id: T
    - id: TKey
    - id: TValue
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TValue}}}
      description: 
references:
- uid: Microsoft.DocAsCode.Utility
  isExternal: false
  name: Microsoft.DocAsCode.Utility
  fullname: Microsoft.DocAsCode.Utility
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullname: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullname: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullname: System.Object.ToString
    isExternal: true
  - name: (
    fullname: (
  - name: )
    fullname: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullname: System.Object.ToString
    isExternal: true
  - name: (
    fullname: (
  - name: )
    fullname: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullname: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullname: System.Object.Equals
    isExternal: true
  - name: (
    fullname: (
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: )
    fullname: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullname: System.Object.Equals
    isExternal: true
  - name: (
    fullname: (
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: )
    fullname: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullname: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullname: System.Object.Equals
    isExternal: true
  - name: (
    fullname: (
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: ', '
    fullname: ', '
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: )
    fullname: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullname: System.Object.Equals
    isExternal: true
  - name: (
    fullname: (
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: ', '
    fullname: ', '
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: )
    fullname: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullname: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullname: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullname: (
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: ', '
    fullname: ', '
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: )
    fullname: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullname: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullname: (
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: ', '
    fullname: ', '
  - uid: System.Object
    name: Object
    fullname: System.Object
    isExternal: true
  - name: )
    fullname: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullname: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullname: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullname: (
  - name: )
    fullname: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullname: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullname: (
  - name: )
    fullname: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullname: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullname: System.Object.GetType
    isExternal: true
  - name: (
    fullname: (
  - name: )
    fullname: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullname: System.Object.GetType
    isExternal: true
  - name: (
    fullname: (
  - name: )
    fullname: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullname: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullname: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullname: (
  - name: )
    fullname: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullname: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullname: (
  - name: )
    fullname: )
- uid: System
  isExternal: false
  name: System
  fullname: System
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  fullname: System.Threading.Tasks.Task
- uid: System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<Task, Task>
  name.vb: Func(Of Task, Task)
  fullname: System.Func<System.Threading.Tasks.Task, System.Threading.Tasks.Task>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task, System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: <
    fullname: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    fullname: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullname: System.Threading.Tasks
- uid: System.Func`2
  parent: System
  isExternal: true
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullname: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - name: TResult
    fullname: TResult
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - name: TResult
    fullname: TResult
  - name: )
    fullname: )
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullname: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - name: TResult
    fullname: TResult
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TResult
    fullname: TResult
  - name: )
    fullname: )
- uid: System.Func{System.Threading.Tasks.Task{{TResult}},System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<Task<TResult>, Task>
  name.vb: Func(Of Task(Of TResult), Task)
  fullname: System.Func<System.Threading.Tasks.Task<TResult>, System.Threading.Tasks.Task>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult), System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: <
    fullname: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - name: TResult
    fullname: TResult
  - name: '>'
    fullname: '>'
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TResult
    fullname: TResult
  - name: )
    fullname: )
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    fullname: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullname: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - name: TResult
    fullname: TResult
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TResult
    fullname: TResult
  - name: )
    fullname: )
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Task<TResult>>
  name.vb: IEnumerable(Of Task(Of TResult))
  fullname: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullname: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - name: TResult
    fullname: TResult
  - name: '>'
    fullname: '>'
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TResult
    fullname: TResult
  - name: )
    fullname: )
  - name: )
    fullname: )
- uid: System.Threading.Tasks.Task{{TResult}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult[]>
  name.vb: Task(Of TResult())
  fullname: System.Threading.Tasks.Task<TResult[]>
  fullname.vb: System.Threading.Tasks.Task(Of TResult())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - name: TResult
    fullname: TResult
  - name: '[]'
    fullname: '[]'
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TResult
    fullname: TResult
  - name: ()
    fullname: ()
  - name: )
    fullname: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullname: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: )
    fullname: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullname: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullname: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: )
    fullname: )
- uid: System.Func{{T},System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<T, Task>
  name.vb: Func(Of T, Task)
  fullname: System.Func<T, System.Threading.Tasks.Task>
  fullname.vb: System.Func(Of T, System.Threading.Tasks.Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    fullname: )
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullname: System.Int32
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  name.vb: IEnumerable(Of TSource)
  fullname: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullname: <
  - name: TSource
    fullname: TSource
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TSource
    fullname: TSource
  - name: )
    fullname: )
- uid: System.Func{{TSource},System.Threading.Tasks.Task{{TResult}}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Task<TResult>>
  name.vb: Func(Of TSource, Task(Of TResult))
  fullname: System.Func<TSource, System.Threading.Tasks.Task<TResult>>
  fullname.vb: System.Func(Of TSource, System.Threading.Tasks.Task(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: <
    fullname: <
  - name: TSource
    fullname: TSource
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - name: TResult
    fullname: TResult
  - name: '>'
    fullname: '>'
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TSource
    fullname: TSource
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TResult
    fullname: TResult
  - name: )
    fullname: )
  - name: )
    fullname: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{{TResult}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyList<TResult>>
  name.vb: Task(Of IReadOnlyList(Of TResult))
  fullname: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<TResult>>
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of TResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullname: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    fullname: <
  - name: TResult
    fullname: TResult
  - name: '>'
    fullname: '>'
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullname: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TResult
    fullname: TResult
  - name: )
    fullname: )
  - name: )
    fullname: )
- uid: System.Func{{T},System.Threading.Tasks.Task{System.Boolean}}
  parent: System
  definition: System.Func`2
  name: Func<T, Task<Boolean>>
  name.vb: Func(Of T, Task(Of Boolean))
  fullname: System.Func<T, System.Threading.Tasks.Task<System.Boolean>>
  fullname.vb: System.Func(Of T, System.Threading.Tasks.Task(Of System.Boolean))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - uid: System.Boolean
    name: Boolean
    fullname: System.Boolean
    isExternal: true
  - name: '>'
    fullname: '>'
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullname: System.Boolean
    isExternal: true
  - name: )
    fullname: )
  - name: )
    fullname: )
- uid: System.Threading.Tasks.Task{{T}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  name.vb: Task(Of T)
  fullname: System.Threading.Tasks.Task<T>
  fullname.vb: System.Threading.Tasks.Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: )
    fullname: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  name.vb: IReadOnlyList(Of T)
  fullname: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullname: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullname: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: )
    fullname: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<T>>
  name.vb: Task(Of IEnumerable(Of T))
  fullname: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: '>'
    fullname: '>'
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullname: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: )
    fullname: )
  - name: )
    fullname: )
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IReadOnlyList<T>
  name.vb: IReadOnlyList(Of T)
  fullname: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullname: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullname: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: )
    fullname: )
- uid: System.Func{{T},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<T, TKey>
  name.vb: Func(Of T, TKey)
  fullname: System.Func<T, TKey>
  fullname.vb: System.Func(Of T, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - name: TKey
    fullname: TKey
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - name: TKey
    fullname: TKey
  - name: )
    fullname: )
- uid: System.Func{{T},System.Threading.Tasks.Task{{TValue}}}
  parent: System
  definition: System.Func`2
  name: Func<T, Task<TValue>>
  name.vb: Func(Of T, Task(Of TValue))
  fullname: System.Func<T, System.Threading.Tasks.Task<TValue>>
  fullname.vb: System.Func(Of T, System.Threading.Tasks.Task(Of TValue))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: <
    fullname: <
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - name: TValue
    fullname: TValue
  - name: '>'
    fullname: '>'
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullname: System.Func
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: T
    fullname: T
  - name: ', '
    fullname: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TValue
    fullname: TValue
  - name: )
    fullname: )
  - name: )
    fullname: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TValue}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Dictionary<TKey, TValue>>
  name.vb: Task(Of Dictionary(Of TKey, TValue))
  fullname: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TValue>>
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of TKey, TValue))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullname: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullname: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullname: <
  - name: TKey
    fullname: TKey
  - name: ', '
    fullname: ', '
  - name: TValue
    fullname: TValue
  - name: '>'
    fullname: '>'
  - name: '>'
    fullname: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullname: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullname: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullname: '(Of '
  - name: TKey
    fullname: TKey
  - name: ', '
    fullname: ', '
  - name: TValue
    fullname: TValue
  - name: )
    fullname: )
  - name: )
    fullname: )
