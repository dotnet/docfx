{
  "conceptual": "\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"3\"><a href=\"https://daringfireball.net/projects/markdown/\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"3\">Markdown</a> is a lightweight markup language with plain text formatting syntax. Docfx supports <a href=\"https://commonmark.org/\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"3\">CommonMark</a> compliant Markdown parsed through the <a href=\"https://github.com/xoofx/markdig\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"3\">Markdig</a> parsing engine.</p>\n<h2 id=\"markdown-extensions\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"5\">Markdown Extensions</h2>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"7\">Docfx supports additional markdown syntax that provide richer content. These syntax are specific to docfx and won't be rendered elsewhere like GitHub.</p>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"9\">To use a custom markdown extension:</p>\n<ol sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"11\">\n<li sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"11\">Use docfx as a NuGet library:</li>\n</ol>\n<pre><code class=\"lang-xml\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"13\">&lt;PackageReference Include=&quot;Microsoft.DocAsCode.App&quot; Version=&quot;2.61.0&quot; /&gt;\n</code></pre>\n<ol start=\"2\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"17\">\n<li sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"17\">Configure the markdig markdown pipeline:</li>\n</ol>\n<pre><code class=\"lang-cs\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"19\">var options = new BuildOptions\n{\n    // Enable custom markdown extensions here\n    ConfigureMarkdig = pipeline =&gt; pipeline.UseCitations(),\n}\n\nawait Docset.Build(&quot;docfx.json&quot;, options);\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"29\">Here is a list of markdown extensions provided by docfx by default.</p>\n<h2 id=\"alerts\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"31\">Alerts</h2>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"33\">Alerts are block quotes that render with colors and icons that indicate the significance of the content.</p>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"35\">The following alert types are supported:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"37\">&gt; [!NOTE]\n&gt; Information the user should notice even if skimming.\n\n&gt; [!TIP]\n&gt; Optional information to help a user be more successful.\n\n&gt; [!IMPORTANT]\n&gt; Essential information required for user success.\n\n&gt; [!CAUTION]\n&gt; Negative potential consequences of an action.\n\n&gt; [!WARNING]\n&gt; Dangerous certain consequences of an action.\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"54\">They look like this in rendered page:</p>\n<div class=\"NOTE\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"56\">\n<h5>Note</h5>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"57\">Information the user should notice even if skimming.</p>\n</div>\n<div class=\"TIP\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"59\">\n<h5>Tip</h5>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"60\">Optional information to help a user be more successful.</p>\n</div>\n<div class=\"IMPORTANT\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"62\">\n<h5>Important</h5>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"63\">Essential information required for user success.</p>\n</div>\n<div class=\"CAUTION\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"65\">\n<h5>Caution</h5>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"66\">Negative potential consequences of an action.</p>\n</div>\n<div class=\"WARNING\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"68\">\n<h5>Warning</h5>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"69\">Dangerous certain consequences of an action.</p>\n</div>\n<h2 id=\"image\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"71\">Image</h2>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"73\">You can embed a image in your page by using the following Markdown syntax:</p>\n<pre><code class=\"lang-md\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"75\">![ &lt;alt-text&gt; ]( &lt;image-link&gt; )\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"79\">Example:</p>\n<pre><code class=\"lang-md\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"80\">![alt-text](https://learn.microsoft.com/en-us/media/learn/not-found/learn-not-found-light-mode.png?branch=main)\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"84\">This will be rendered as:</p>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"86\"><img src=\"https://learn.microsoft.com/en-us/media/learn/not-found/learn-not-found-light-mode.png?branch=main\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"86\" alt=\"alt-text\"></p>\n<h2 id=\"include-markdown-files\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"88\">Include Markdown Files</h2>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"90\">Where markdown files need to be repeated in multiple articles, you can use an include file. The includes feature replace the reference with the contents of the included file at build time.</p>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"92\">You can reuse a common text snippet within a sentence using inline include:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"94\">Text before [!INCLUDE [&lt;title&gt;](&lt;filepath&gt;)] and after.\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"98\">Or reuse an entire Markdown file as a block, nested within a section of an article. Block include is on its own line:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"100\">[!INCLUDE [&lt;title&gt;](&lt;filepath&gt;)]\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"104\">Where <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"104\">&lt;title&gt;</code> is the name of the file and <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"104\">&lt;filepath&gt;</code> is the relative path to the file.</p>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"106\">Included markdown files needs to be excluded from build, they are usually placed in the <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"106\">/includes</code> folder.</p>\n<h2 id=\"code-snippet\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"108\">Code Snippet</h2>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"110\">There are several ways to include code in an article. The code snippet syntax replaces code from another file:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"112\">[!code-csharp[](Program.cs)]\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"116\">You can include selected lines from the code snippet using region or line range syntax:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"118\">[!code-csharp[](Program.cs#region)]\n[!code-csharp[](Program.cs#L12-L16)]\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"123\">Code snippets are indicated by using a specific link syntax described as follows:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"125\">[!code-&lt;language&gt;[](&lt;filepath&gt;&lt;query-options&gt;)]\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"129\">Where <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"129\">&lt;language&gt;</code> is the syntax highlighting language of the code and <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"129\">&lt;filepath&gt;</code> is the relative path to the markdown file.</p>\n<h3 id=\"highlight-selected-lines\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"131\">Highlight Selected Lines</h3>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"133\">Code Snippets typically include more code than necessary in order to provide context. It helps readability when you highlight the key lines that you're focusing on. To highlight key lines, use the <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"133\">highlight</code> query options:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"135\">[!code-csharp[](Program.cs?highlight=2,5-7,9-)]\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"139\">The example highlights lines 2, line 5 to 7 and lines 9 to the end of the file.</p>\n<pre><code class=\"lang-csharp\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"141\" highlight-lines=\"2,5-7,9-\">using System;\nusing Azure;\nusing Azure.Storage;\nusing Azure.Storage.Blobs;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Define the connection string for the storage account\n        string connectionString = &quot;DefaultEndpointsProtocol=https;AccountName=&lt;your-account-name&gt;;AccountKey=&lt;your-account-key&gt;;EndpointSuffix=core.windows.net&quot;;\n\n        // Create a new BlobServiceClient using the connection string\n        var blobServiceClient = new BlobServiceClient(connectionString);\n\n        // Create a new container\n        var container = blobServiceClient.CreateBlobContainer(&quot;mycontainer&quot;);\n\n        // Upload a file to the container\n        using (var fileStream = File.OpenRead(&quot;path/to/file.txt&quot;))\n        {\n            container.UploadBlob(&quot;file.txt&quot;, fileStream);\n        }\n\n        // Download the file from the container\n        var downloadedBlob = container.GetBlobClient(&quot;file.txt&quot;).Download();\n        using (var fileStream = File.OpenWrite(&quot;path/to/downloaded-file.txt&quot;))\n        {\n            downloadedBlob.Value.Content.CopyTo(fileStream);\n        }\n    }\n}\n</code></pre><h2 id=\"tabs\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"143\">Tabs</h2>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"145\">Tabs enable content that is multi-faceted. They allow sections of a document to contain variant content renderings and eliminates duplicate content.</p>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"147\">Here's an example of the tab experience:</p>\n<div class=\"tabGroup\" id=\"tabgroup_bHGHmlrG6S\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"149\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_bHGHmlrG6S_linux\" role=\"tab\" aria-controls=\"tabpanel_bHGHmlrG6S_linux\" data-tab=\"linux\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"149\">Linux</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_bHGHmlrG6S_windows\" role=\"tab\" aria-controls=\"tabpanel_bHGHmlrG6S_windows\" data-tab=\"windows\" tabindex=\"-1\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"153\">Windows</a>\n</li>\n</ul>\n<section id=\"tabpanel_bHGHmlrG6S_linux\" role=\"tabpanel\" data-tab=\"linux\">\n\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"151\">Content for Linux...</p>\n</section>\n<section id=\"tabpanel_bHGHmlrG6S_windows\" role=\"tabpanel\" data-tab=\"windows\" aria-hidden=\"true\" hidden=\"hidden\">\n\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"155\">Content for Windows...</p>\n</section>\n</div>\n\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"159\">The above tab group was created with the following syntax:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"161\"># [Linux](#tab/linux)\n\nContent for Linux...\n\n# [Windows](#tab/windows)\n\nContent for Windows...\n\n---\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"173\">Tabs are indicated by using a specific link syntax within a Markdown header. The syntax can be described as follows:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"175\"># [Tab Display Name](#tab/tab-id)\n</code></pre>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"179\">A tab starts with a Markdown header, <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"179\">#</code>, and is followed by a Markdown link <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"179\">[]()</code>. The text of the link will become the text of the tab header, displayed to the customer. In order for the header to be recognized as a tab, the link itself must start with <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"179\">#tab/</code> and be followed by an ID representing the content of the tab. The ID is used to sync all same-ID tabs across the page. Using the above example, when a user selects a tab with the link <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"179\">#tab/windows</code>, all tabs with the link <code sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"179\">#tab/windows</code> on the page will be selected.</p>\n<h3 id=\"dependent-tabs\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"181\">Dependent tabs</h3>\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"183\">It's possible to make the selection in one set of tabs dependent on the selection in another set of tabs. Here's an example of that in action:</p>\n<div class=\"tabGroup\" id=\"tabgroup_bHGHmlrG6S-1\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"185\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_bHGHmlrG6S-1_dotnet_linux\" role=\"tab\" aria-controls=\"tabpanel_bHGHmlrG6S-1_dotnet_linux\" data-tab=\"dotnet\" data-condition=\"linux\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"185\">.NET</a>\n</li>\n<li role=\"presentation\" aria-hidden=\"true\" hidden=\"hidden\">\n<a href=\"#tabpanel_bHGHmlrG6S-1_dotnet_windows\" role=\"tab\" aria-controls=\"tabpanel_bHGHmlrG6S-1_dotnet_windows\" data-tab=\"dotnet\" data-condition=\"windows\" tabindex=\"-1\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"189\">.NET</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_bHGHmlrG6S-1_typescript_linux\" role=\"tab\" aria-controls=\"tabpanel_bHGHmlrG6S-1_typescript_linux\" data-tab=\"typescript\" data-condition=\"linux\" tabindex=\"-1\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"193\">TypeScript</a>\n</li>\n<li role=\"presentation\" aria-hidden=\"true\" hidden=\"hidden\">\n<a href=\"#tabpanel_bHGHmlrG6S-1_typescript_windows\" role=\"tab\" aria-controls=\"tabpanel_bHGHmlrG6S-1_typescript_windows\" data-tab=\"typescript\" data-condition=\"windows\" tabindex=\"-1\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"197\">TypeScript</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_bHGHmlrG6S-1_rest\" role=\"tab\" aria-controls=\"tabpanel_bHGHmlrG6S-1_rest\" data-tab=\"rest\" tabindex=\"-1\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"201\">REST API</a>\n</li>\n</ul>\n<section id=\"tabpanel_bHGHmlrG6S-1_dotnet_linux\" role=\"tabpanel\" data-tab=\"dotnet\" data-condition=\"linux\">\n\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"187\">.NET content for Linux...</p>\n</section>\n<section id=\"tabpanel_bHGHmlrG6S-1_dotnet_windows\" role=\"tabpanel\" data-tab=\"dotnet\" data-condition=\"windows\" aria-hidden=\"true\" hidden=\"hidden\">\n\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"191\">.NET content for Windows...</p>\n</section>\n<section id=\"tabpanel_bHGHmlrG6S-1_typescript_linux\" role=\"tabpanel\" data-tab=\"typescript\" data-condition=\"linux\" aria-hidden=\"true\" hidden=\"hidden\">\n\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"195\">TypeScript content for Linux...</p>\n</section>\n<section id=\"tabpanel_bHGHmlrG6S-1_typescript_windows\" role=\"tabpanel\" data-tab=\"typescript\" data-condition=\"windows\" aria-hidden=\"true\" hidden=\"hidden\">\n\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"199\">TypeScript content for Windows...</p>\n</section>\n<section id=\"tabpanel_bHGHmlrG6S-1_rest\" role=\"tabpanel\" data-tab=\"rest\" aria-hidden=\"true\" hidden=\"hidden\">\n\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"203\">REST API content, independent of platform...</p>\n</section>\n</div>\n\n<p sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"207\">Notice how changing the Linux/Windows selection above changes the content in the .NET and TypeScript tabs. This is because the tab group defines two versions for each .NET and TypeScript, where the Windows/Linux selection above determines which version is shown for .NET/TypeScript. Here's the markup that shows how this is done:</p>\n<pre><code class=\"lang-markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"209\"># [.NET](#tab/dotnet/linux)\n\n.NET content for Linux...\n\n# [.NET](#tab/dotnet/windows)\n\n.NET content for Windows...\n\n# [TypeScript](#tab/typescript/linux)\n\nTypeScript content for Linux...\n\n# [TypeScript](#tab/typescript/windows)\n\nTypeScript content for Windows...\n\n# [REST API](#tab/rest)\n\nREST API content, independent of platform...\n\n---\n</code></pre>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "samples/seed/articles/markdown.md",
      "branch": "main",
      "repo": "https://github.com/dotnet/docfx"
    },
    "startLine": 0.0,
    "endLine": 0.0,
    "isExternal": false
  },
  "path": "articles/markdown.md",
  "documentation": {
    "remote": {
      "path": "samples/seed/articles/markdown.md",
      "branch": "main",
      "repo": "https://github.com/dotnet/docfx"
    },
    "startLine": 0.0,
    "endLine": 0.0,
    "isExternal": false
  },
  "_appName": "Seed",
  "_appTitle": "docfx seed website",
  "_enableSearch": true,
  "rawTitle": "<h1 id=\"markdown\" sourcefile=\"articles/markdown.md\" sourcestartlinenumber=\"1\">Markdown</h1>",
  "title": "Markdown",
  "wordCount": 901.0,
  "_key": "articles/markdown.md",
  "_lang": "csharp",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../toc.html",
  "_path": "articles/markdown.html",
  "_rel": "../",
  "_tocKey": "~/articles/toc.yml",
  "_tocPath": "articles/toc.html",
  "_tocRel": "toc.html",
  "_disableToc": false,
  "docurl": "https://github.com/dotnet/docfx/blob/main/samples/seed/articles/markdown.md/#L1"
}