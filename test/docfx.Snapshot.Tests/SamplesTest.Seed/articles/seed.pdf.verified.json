{
  "NumberOfPages": 19,
  "Pages": [
    {
      "Number": 1,
      "Text": "1 / 19DOCFX PDF SAMPLE",
      "Links": []
    },
    {
      "Number": 2,
      "Text": "Table of ContentsGetting Started with docfx3Engineering DocsSection 1Engineering Guidelines5C# Coding Standards8Markdown15Microsoft Docs",
      "Links": [
        {
          "Uri": "https://docs.microsoft.com/en-us/"
        },
        {
          "Goto": {
            "PageNumber": 3,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Goto": {
            "PageNumber": 5,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Goto": {
            "PageNumber": 8,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Goto": {
            "PageNumber": 15,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        }
      ]
    },
    {
      "Number": 3,
      "NumberOfImages": 1,
      "Text": "3 / 19Getting Started with docfxGetting StartedThis is a seed.",
      "Links": [
        {
          "Uri": ""
        },
        {
          "Uri": ""
        }
      ]
    },
    {
      "Number": 4,
      "Text": "4 / 19docfx is an API documentation generator for .NET, currently support C# and VB. It has theability to extract triple slash comments out from your source code. What's more, it hassyntax to link additional ﬁles to API to add additional remarks. docfx will scan your sourcecode and your additional conceptual ﬁles and generate a complete HTML documentationwebsite for you. docfx provides the ﬂexibility for you to customize the website throughtemplates. We currently have several embedded templates, including websites containingpure static html pages and also website managed by AngularJS.Click \"View Source\" for an API to route to the source code in GitHub (your API must bepushed to GitHub)docfx provide DNX version for cross platform use.docfx can be used within Visual Studio seamlessly. NOTE oﬃcal docfx.msbuild nugetpackage is now in pre-release version. You can also build your own with source codeand use it locally.We support Docfx Flavored Markdown(DFM) for writing conceptual ﬁles. DFM is100% compatible with Github Flavored Markdown(GFM) and add several new featuresincluding ﬁle inclusion, cross reference, and yaml header.",
      "Links": []
    },
    {
      "Number": 5,
      "Text": "5 / 19Engineering GuidelinesBasicsCopyright header and license noticeAll source code ﬁles require the following exact header according to its language (please donot make any changes to it).extension: .csextension: .jsextension: .cssextension: .tmpl, .tmpl.partialExternal dependenciesThis refers to dependencies on projects (i.e. NuGet packages) outside of the docfx repo, andespecially outside of Microsoft. Adding new dependencies require additional approval.Current approved dependencies are:Newtonsoft.JsonJintHtmlAgilityPack// Licensed to the .NET Foundation under one or more agreements.// The .NET Foundation licenses this file to you under the MIT license.// Licensed to the .NET Foundation under one or more agreements.// The .NET Foundation licenses this file to you under the MIT license./** * Licensed to the .NET Foundation under one or more agreements. * The .NET Foundation licenses this file to you under the MIT license. */{{!Licensed to the .NET Foundation under one or more agreements. The .NET Foundation lic",
      "Links": []
    },
    {
      "Number": 6,
      "Text": "6 / 19NustacheYamlDotNetCode reviews and checkinsTo help ensure that only the highest quality code makes its way into the project, pleasesubmit all your code changes to GitHub as PRs. This includes runtime code changes, unittest updates, and deployment scripts. For example, sending a PR for just an update to aunit test might seem like a waste of time but the unit tests are just as important as theproduct code and as such, reviewing changes to them is also just as important.The advantages are numerous: improving code quality, more visibility on changes and theirpotential impact, avoiding duplication of eﬀort, and creating general awareness of progressbeing made in various areas.In general a PR should be signed oﬀ(using the \uD83D\uDC4D emoticon) by the Owner of that code.To commit the PR to the repo do not use the Big Green Button. Instead, do a typicalpush that you would use with Git (e.g. local pull, rebase, merge, push).Source Code ManagementBranch strategyIn general:master has the code for the latest release on NuGet.org. (e.g. 1.0.0, 1.1.0)dev has the code that is being worked on but not yet released. This is the branch intowhich devs normally submit pull requests and merge changes into. We run daily CItowards dev branch and generate pre-release nuget package, e.g. 1.0.1-alpha-9-abcdefsd.hotfix has the code for ﬁxing master bug after it is released. hotfix changes will bemerged back to master and dev once it is veriﬁed.Solution and project folder structure and namingSolution ﬁles go in the repo root. The default entry point is All.sln.Every project also needs a project.json and a matching .xproj ﬁle. This project.json is thesource of truth for a project's dependencies and conﬁguration options.Solution need to contain solution folders that match the physical folder (src, test, tools,etc.).Assembly naming pattern",
      "Links": []
    },
    {
      "Number": 7,
      "Text": "7 / 19The general naming pattern is Docfx.<area>.<subarea>.Unit testsWe use xUnit.net for all unit testing.Coding StandardsPlease refer to C# Coding standards for detailed guideline for C# coding standards.TODO Template Coding standardsTODO Template Preprocess JS Coding standards",
      "Links": [
        {
          "Goto": {
            "PageNumber": 8,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        }
      ]
    },
    {
      "Number": 8,
      "Text": "8 / 19C# Coding StandardsIntroductionThe coding standard will be used in conjunction with customized version of StyleCop andFxCop [TODO] during both development and build process. This will help ensure that thestandard is followed by all developers on the team in a consistent manner.\"Any fool can write code that a computer can understand. Good programmers writecode that humans understand\".Martin Fowler. Refactoring: Improving the design of existing code.PurposeThe aim of this section is to deﬁne a set of C# coding standards to be used by CAPS buildteam to guarantee maximum legibility, reliability, re-usability and homogeneity of our code.Each section is marked Mandatory or Recommended. Mandatory sections, will be enforcedduring code reviews as well as tools like StyleCop and FxCop, and code will not beconsidered complete until it is compliant.ScopeThis section contains general C# coding standards which can be applied to any type ofapplication developed in C#, based on Framework Design Guidelines\uF1C5.It does not pretend to be a tutorial on C#. It only includes a set of limitations andrecommendations focused on clarifying the development.ToolsResharper\uF1C5 is a great 3rd party code cleanup and style tool.StyleCop\uF1C5 analyzes C# srouce code to enforce a set of style and consistency rules andhas been integrated into many 3rd party development tools such as Resharper.FxCop\uF1C5 is an application that analyzes managed code assemblies (code that targetsthe .NET Framework common language runtime) and reports information about theassemblies, such as possible design, localization, performance, and securityimprovements.C# Stylizer\uF1C5 does many of the style rules automaticallyHighlights of Coding StandardsThis section is not intended to give a summary of all the coding standards that enabled byour customized StyleCop, but to give a highlight of some rules one will possibly meet in",
      "Links": [
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229042.aspx"
        },
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229042.aspx"
        },
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229042.aspx"
        },
        {
          "Uri": "http://www.jetbrains.com/resharper/"
        },
        {
          "Uri": "http://www.jetbrains.com/resharper/"
        },
        {
          "Uri": "http://www.jetbrains.com/resharper/"
        },
        {
          "Uri": "http://stylecop.codeplex.com/"
        },
        {
          "Uri": "http://stylecop.codeplex.com/"
        },
        {
          "Uri": "http://stylecop.codeplex.com/"
        },
        {
          "Uri": "http://codebox/SDLFxCop"
        },
        {
          "Uri": "http://codebox/SDLFxCop"
        },
        {
          "Uri": "http://codebox/SDLFxCop"
        },
        {
          "Uri": "http://toolbox/22561"
        },
        {
          "Uri": "http://toolbox/22561"
        },
        {
          "Uri": "http://toolbox/22561"
        }
      ]
    },
    {
      "Number": 9,
      "Text": "9 / 19daily coding life. It also provides some recommended however not mandatory(which meansnot enabled in StyleCop) coding standards.File Layout (Recommended)Only one public class is allowed per ﬁle.The ﬁle name is derived from the class name.Class Deﬁnition Order (Mandatory)The class deﬁnition contains class members in the following order, from less restrictedscope (public) to more restrictive (private):Nested types, e.g. classes, enum, struct, etc.Field members, e.g. member variables, const, etc.Member functionsConstructorsFinalizer (Do not use unless absolutely necessary)Methods (Properties, Events, Operations, Overridables, Static)Private nested typesNaming (Mandatory)DO use PascalCasing for all public member, type, and namespace names consisting ofmultiple words.NOTE: A special case is made for two-letter acronyms in which both letters are capitalized,e.g. IOStreamDO use camelCasing for parameter names.Class   : ObserverFilename: Observer.cs  PropertyDescriptor  HtmlTag  IOStream  propertyDescriptor  htmlTag  ioStream",
      "Links": []
    },
    {
      "Number": 10,
      "Text": "10 / 19DO start with underscore for private ﬁeldsDO start static readonly ﬁelds, constants with capitalized caseDO NOT capitalize each word in so-called closed-form compound words\uF1C5.DO have \"Async\" explicitly in the Async method name to notice people how to use itproperlyFormatting (Mandatory)DO use spaces over tabs, and always show all spaces/tabs in IDETipsVisual Studio > TOOLS > Options > Text Editor > C# > Tabs > Insert spaces (Tab size:4)Visual Studio > Edit > Advanced > View White SpaceDO add using inside namespace declarationDO add a space when:1. for (var i = 0; i < 1; i++)2. if (a == b)Cross-platform codingOur code should supports multiple operating systems. Don't assume we only run (anddevelop) on Windows. Code should be sensitvie to the diﬀerences between OS's. Here aresome speciﬁcs to consider.  private readonly Guid _userId = Guid.NewGuid();  private static readonly IEntityAccessor EntityAccessor = null;  private const string MetadataName = \"MetadataName\";  namespace Microsoft.Content.Build.BuildWorker.UnitTest  {  using System;  }",
      "Links": [
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229043.aspx"
        },
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229043.aspx"
        },
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229043.aspx"
        }
      ]
    },
    {
      "Number": 11,
      "Text": "11 / 19DO use Enviroment.NewLine instead of hard-coding the line break instead of \\r\\n, asWindows uses \\r\\n and OSX/Linux uses \\n.NoteBe aware that thes line-endings may cause problems in code when using @\"\" text blockswith line breaks.DO Use Path.Combine() or Path.DirectorySeparatorChar to separate directories. If this isnot possible (such as in scripting), use a forward slash /. Windows is more forgivingthan Linux in this regard.Unit tests and functional testsAssembly namingThe unit tests for the Microsoft.Foo assembly live in the Microsoft.Foo.Tests assembly.The functional tests for the Microsoft.Foo assmebly live in theMicrosoft.Foo.FunctionalTests assmebly.In general there should be exactly one unit test assebmly for each product runtimeassembly. In general there should be one functional test assembly per repo. Exceptions canbe made for both.Unit test class namingTest class names end with Test and live in the same namespace as the class being tested.For example, the unit tests for the Microsoft.Foo.Boo class would be in a Microsoft.Foo.Booclass in the test assembly.Unit test method namingUnit test method names must be descriptive about what is being tested, under whatconditions, and what the expectations are. Pascal casing and underscores can be used toimprove readability. The following test names are correct:The following test names are incorrect:PublicApiArgumentsShouldHaveNotNullAnnotationPublic_api_arguments_should_have_not_null_annotationTest1Constructor",
      "Links": []
    },
    {
      "Number": 12,
      "Text": "12 / 19Unit test structureThe contents of every unit test should be split into three distinct stages, optionallyseparated by these comments:The crucial thing here is the Act stage is exactly one statement. That one statement isnothing more than a call to the one method that you are trying to test. keeping that onestatement as simple as possible is also very important. For example, this is not ideal:This style is not recomended because way too many things can go wrong in this onestatement. All the GetComplexParamN() calls can throw for a variety of reasons unrelated tothe test itself. It is thus unclear to someone running into a problem why the failure occured.The ideal pattern is to move the complex parameter building into the `Arrange section:Now the only reason the line with CallSomeMethod() can fail is if the method itself blew up.Testing exception messagesIn general testing the speciﬁc exception message in a unit test is important. This ensuresthat the exact desired exception is what is being tested rather than a diﬀerent exception ofFormatStringGetData// Arrange// Act// Assertint result = myObj.CallSomeMethod(GetComplexParam1(), GetComplexParam2(), GetComplexParam3());// ArrangeP1 p1 = GetComplexParam1();P2 p2 = GetComplexParam2();P3 p3 = GetComplexParam3();// Actint result = myObj.CallSomeMethod(p1, p2, p3);// AssertAssert.AreEqual(1234, result);",
      "Links": []
    },
    {
      "Number": 13,
      "Text": "13 / 19the same type. In order to verify the exact exception it is important to verify the message.Use xUnit.net's plethora of built-in assertionsxUnit.net includes many kinds of assertions – please use the most appropriate one for yourtest. This will make the tests a lot more readable and also allow the test runner report thebest possible errors (whether it's local or the CI machine). For example, these are bad:These are good:Parallel testsBy default all unit test assemblies should run in parallel mode, which is the default. Unittests shouldn't depend on any shared state, and so should generally be runnable inparallel. If the tests fail in parallel, the ﬁrst thing to do is to ﬁgure out why; do not justdisable parallel tests!var ex = Assert.Throws<InvalidOperationException>(    () => fruitBasket.GetBananaById(1234));Assert.Equal(    \"1234\",    ex.Message);Assert.Equal(true, someBool);Assert.True(\"abc123\" == someString);Assert.True(list1.Length == list2.Length);for (int i = 0; i < list1.Length; i++) {    Assert.True(        String.Equals            list1[i],            list2[i],            StringComparison.OrdinalIgnoreCase));}Assert.True(someBool);Assert.Equal(\"abc123\", someString);// built-in collection assertions!Assert.Equal(list1, list2, StringComparer.OrdinalIgnoreCase);",
      "Links": []
    },
    {
      "Number": 14,
      "Text": "14 / 19For functional tests it is reasonable to disable parallel tests.",
      "Links": []
    },
    {
      "Number": 15,
      "Text": "15 / 19MarkdownMarkdown\uF1C5 is a lightweight markup language with plain text formatting syntax. Docfxsupports CommonMark\uF1C5 compliant Markdown parsed through the Markdig\uF1C5 parsingengine.Link to Math ExpressionsBlock QuotesThis is a block quote.AlertsNOTEInformation the user should notice even if skimming.\uF431TIPOptional information to help a user be more successful.\uF431IMPORTANTEssential information required for user success.\uF623CAUTIONNegative potential consequences of an action.\uF623WARNINGDangerous certain consequences of an action.\uF333",
      "Links": [
        {
          "Uri": "https://daringfireball.net/projects/markdown/"
        },
        {
          "Uri": "https://daringfireball.net/projects/markdown/"
        },
        {
          "Uri": "https://daringfireball.net/projects/markdown/"
        },
        {
          "Uri": "https://commonmark.org/"
        },
        {
          "Uri": "https://commonmark.org/"
        },
        {
          "Uri": "https://commonmark.org/"
        },
        {
          "Uri": "https://github.com/xoofx/markdig"
        },
        {
          "Uri": "https://github.com/xoofx/markdig"
        },
        {
          "Uri": "https://github.com/xoofx/markdig"
        },
        {
          "Goto": {
            "PageNumber": 17,
            "Coordinates": {
              "Left": 0,
              "Top": 239.25
            }
          }
        }
      ]
    },
    {
      "Number": 16,
      "NumberOfImages": 1,
      "Text": "16 / 19ImageMermaid DiagramsFlowchartCode SnippetThe example highlights lines 2, line 5 to 7 and lines 9 to the end of the ﬁle.MY TODOThis is a TODO.TextOneTwoHardRoundDecisionResult 1Result 2",
      "Links": [
        {
          "Uri": "https://learn.microsoft.com/en-us/media/learn/not-found/learn-not-found-light-mode.png?branch=main"
        },
        {
          "Uri": "https://learn.microsoft.com/en-us/media/learn/not-found/learn-not-found-light-mode.png?branch=main"
        }
      ]
    },
    {
      "Number": 17,
      "Text": "17 / 19Math ExpressionsThis sentence uses $ delimiters to show math inline: The Cauchy-Schwarz InequalityThis expression uses \\$ to display a dollar sign: To split $100 in half, we calculate using System;using Azure;using Azure.Storage;using Azure.Storage.Blobs;class Program{    static void Main(string[] args)    {        // Define the connection string for the storage account        string connectionString = \"DefaultEndpointsProtocol=https;AccountName=<your-account-name>;AccountKey=<your-account-key>;EndpointSuffix=core.windows.net\";        // Create a new BlobServiceClient using the connection string        var blobServiceClient = new BlobServiceClient(connectionString);        // Create a new container        var container = blobServiceClient.CreateBlobContainer(\"mycontainer\");        // Upload a file to the container        using (var fileStream = File.OpenRead(\"path/to/file.txt\"))        {            container.UploadBlob(\"file.txt\", fileStream);        }        // Download the file from the container        var downloadedBlob = container.GetBlobClient(\"file.txt\").Download();        using (var fileStream = File.OpenWrite(\"path/to/downloaded-file.txt\"))        {            downloadedBlob.Value.Content.CopyTo(fileStream);        }    }}",
      "Links": []
    },
    {
      "Number": 18,
      "Text": "18 / 19Custom Syntax HighlightingTabsLinuxWindowsThe above tab group was created with the following syntax:Tabs are indicated by using a speciﬁc link syntax within a Markdown header. The syntax canbe described as follows:A tab starts with a Markdown header, #, and is followed by a Markdown link [](). The textof the link will become the text of the tab header, displayed to the customer. In order forthe header to be recognized as a tab, the link itself must start with #tab/ and be followedby an ID representing the content of the tab. The ID is used to sync all same-ID tabs acrossthe page. Using the above example, when a user selects a tab with the link #tab/windows, alltabs with the link #tab/windows on the page will be selected.Dependent tabsresource storageAccount 'Microsoft.Storage/storageAccounts@2021-06-01' = {  name: 'hello'  // (...)}Content for Linux...# [Linux](#tab/linux)Content for Linux...# [Windows](#tab/windows)Content for Windows...---# [Tab Display Name](#tab/tab-id)",
      "Links": [
        {
          "Goto": {
            "PageNumber": 18,
            "Coordinates": {
              "Left": 0,
              "Top": 603
            }
          }
        }
      ]
    },
    {
      "Number": 19,
      "Text": "19 / 19It's possible to make the selection in one set of tabs dependent on the selection in anotherset of tabs. Here's an example of that in action:.NETTypeScriptREST APINotice how changing the Linux/Windows selection above changes the content in the .NETand TypeScript tabs. This is because the tab group deﬁnes two versions for each .NET andTypeScript, where the Windows/Linux selection above determines which version is shownfor .NET/TypeScript. Here's the markup that shows how this is done:DetailsDemo.NET content for Linux...# [.NET](#tab/dotnet/linux).NET content for Linux...# [.NET](#tab/dotnet/windows).NET content for Windows...# [TypeScript](#tab/typescript/linux)TypeScript content for Linux...# [TypeScript](#tab/typescript/windows)TypeScript content for Windows...# [REST API](#tab/rest)REST API content, independent of platform...---",
      "Links": [
        {
          "Goto": {
            "PageNumber": 19,
            "Coordinates": {
              "Left": 0,
              "Top": 712.5
            }
          }
        }
      ]
    }
  ],
  "Bookmarks": [
    {
      "Title": "Getting Started with docfx",
      "Children": [],
      "Destination": {
        "PageNumber": 3,
        "Type": 2,
        "Coordinates": {
          "Top": 0
        }
      }
    },
    {
      "Title": "Engineering Docs",
      "Children": [
        {
          "Title": "Section 1",
          "Children": [],
          "Destination": {
            "PageNumber": 5,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Title": "Engineering Guidelines",
          "Children": [],
          "Destination": {
            "PageNumber": 5,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Title": "C# Coding Standards",
          "Children": [],
          "Destination": {
            "PageNumber": 8,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        }
      ],
      "Destination": {
        "PageNumber": 5,
        "Type": 2,
        "Coordinates": {
          "Top": 0
        }
      }
    },
    {
      "Title": "Markdown",
      "Children": [],
      "Destination": {
        "PageNumber": 15,
        "Type": 2,
        "Coordinates": {
          "Top": 0
        }
      }
    },
    {
      "Title": "Microsoft Docs",
      "Children": [],
      "Uri": "https://docs.microsoft.com/en-us/"
    }
  ]
}