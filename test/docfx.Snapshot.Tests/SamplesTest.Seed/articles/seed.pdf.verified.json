{
  "NumberOfPages": 19,
  "Pages": [
    {
      "Number": 1,
      "Text": "DOCFX PDF SAMPLE",
      "Links": []
    },
    {
      "Number": 2,
      "Text": "Table of Contents\nGetting Started with docfx 3\nEngineering Docs\nSection 1\nEngineering Guidelines 5\nC# Coding Standards 8\nMarkdown 15\nMicrosoft Docs",
      "Links": [
        {
          "Uri": "https://docs.microsoft.com/en-us/"
        },
        {
          "Goto": {
            "PageNumber": 3,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Goto": {
            "PageNumber": 5,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Goto": {
            "PageNumber": 8,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Goto": {
            "PageNumber": 15,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        }
      ]
    },
    {
      "Number": 3,
      "NumberOfImages": 1,
      "Text": "3 / 19\nGetting Started with docfx\nGetting Started\nThis is a seed.",
      "Links": [
        {
          "Uri": ""
        },
        {
          "Uri": ""
        }
      ]
    },
    {
      "Number": 4,
      "Text": "4 / 19\ndocfx is an API documentation generator for .NET, currently support C# and VB. It has the\nability to extract triple slash comments out from your source code. What's more, it has\nsyntax to link additional files to API to add additional remarks. docfx will scan your source\ncode and your additional conceptual files and generate a complete HTML documentation\nwebsite for you. docfx provides the flexibility for you to customize the website through\ntemplates. We currently have several embedded templates, including websites containing\npure static html pages and also website managed by AngularJS.\nClick \"View Source\" for an API to route to the source code in GitHub (your API must be\npushed to GitHub)\ndocfx provide DNX version for cross platform use.\ndocfx can be used within Visual Studio seamlessly. NOTE offical docfx.msbuild nuget\npackage is now in pre-release version. You can also build your own with source code\nand use it locally.\nWe support Docfx Flavored Markdown(DFM) for writing conceptual files. DFM is\n100% compatible with Github Flavored Markdown(GFM) and add several new features\nincluding file inclusion, cross reference, and yaml header.",
      "Links": []
    },
    {
      "Number": 5,
      "Text": "5 / 19\nEngineering Guidelines\nBasics\nCopyright header and license notice\nAll source code files require the following exact header according to its language (please do\nnot make any changes to it).\nextension: .cs\nextension: .js\nextension: .css\nextension: .tmpl, .tmpl.partial\nExternal dependencies\nThis refers to dependencies on projects (i.e. NuGet packages) outside of the docfx repo, and\nespecially outside of Microsoft. Adding new dependencies require additional approval.\nCurrent approved dependencies are:\nNewtonsoft.Json\nJint\nHtmlAgilityPack\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n/**\n* Licensed to the .NET Foundation under one or more agreements.\n* The .NET Foundation licenses this file to you under the MIT license.\n*/\n{{!Licensed to the .NET Foundation under one or more agreements. The .NET Foundation lic",
      "Links": []
    },
    {
      "Number": 6,
      "Text": "6 / 19\nNustache\nYamlDotNet\nCode reviews and checkins\nTo help ensure that only the highest quality code makes its way into the project, please\nsubmit all your code changes to GitHub as PRs. This includes runtime code changes, unit\ntest updates, and deployment scripts. For example, sending a PR for just an update to a\nunit test might seem like a waste of time but the unit tests are just as important as the\nproduct code and as such, reviewing changes to them is also just as important.\nThe advantages are numerous: improving code quality, more visibility on changes and their\npotential impact, avoiding duplication of effort, and creating general awareness of progress\nbeing made in various areas.\nIn general a PR should be signed off(using the \uD83D\uDC4D emoticon) by the Owner of that code.\nTo commit the PR to the repo do not use the Big Green Button. Instead, do a typical\npush that you would use with Git (e.g. local pull, rebase, merge, push).\nSource Code Management\nBranch strategy\nIn general:\nmaster has the code for the latest release on NuGet.org. (e.g. 1.0.0, 1.1.0)\ndev has the code that is being worked on but not yet released. This is the branch into\nwhich devs normally submit pull requests and merge changes into. We run daily CI\ntowards dev branch and generate pre-release nuget package, e.g. 1.0.1-alpha-9-\nabcdefsd.\nhotfix has the code for fixing master bug after it is released. hotfix changes will be\nmerged back to master and dev once it is verified.\nSolution and project folder structure and naming\nSolution files go in the repo root. The default entry point is All.sln.\nEvery project also needs a project.json and a matching .xproj file. This project.json is the\nsource of truth for a project's dependencies and configuration options.\nSolution need to contain solution folders that match the physical folder (src, test, tools,\netc.).\nAssembly naming pattern",
      "Links": []
    },
    {
      "Number": 7,
      "Text": "7 / 19\nThe general naming pattern is Docfx.<area>.<subarea>.\nUnit tests\nWe use xUnit.net for all unit testing.\nCoding Standards\nPlease refer to C# Coding standards for detailed guideline for C# coding standards.\nTODO Template Coding standards\nTODO Template Preprocess JS Coding standards",
      "Links": [
        {
          "Goto": {
            "PageNumber": 8,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        }
      ]
    },
    {
      "Number": 8,
      "Text": "8 / 19\nC# Coding Standards\nIntroduction\nThe coding standard will be used in conjunction with customized version of StyleCop and\nFxCop [TODO] during both development and build process. This will help ensure that the\nstandard is followed by all developers on the team in a consistent manner.\n\"Any fool can write code that a computer can understand. Good programmers write\ncode that humans understand\".\nMartin Fowler. Refactoring: Improving the design of existing code.\nPurpose\nThe aim of this section is to define a set of C# coding standards to be used by CAPS build\nteam to guarantee maximum legibility, reliability, re-usability and homogeneity of our code.\nEach section is marked Mandatory or Recommended. Mandatory sections, will be enforced\nduring code reviews as well as tools like StyleCop and FxCop, and code will not be\nconsidered complete until it is compliant.\nScope\nThis section contains general C# coding standards which can be applied to any type of\napplication developed in C#, based on Framework Design Guidelines\uF1C5 .\nIt does not pretend to be a tutorial on C#. It only includes a set of limitations and\nrecommendations focused on clarifying the development.\nTools\nResharper\uF1C5 is a great 3rd party code cleanup and style tool.\nStyleCop\uF1C5 analyzes C# srouce code to enforce a set of style and consistency rules and\nhas been integrated into many 3rd party development tools such as Resharper.\nFxCop\uF1C5 is an application that analyzes managed code assemblies (code that targets\nthe .NET Framework common language runtime) and reports information about the\nassemblies, such as possible design, localization, performance, and security\nimprovements.\nC# Stylizer\uF1C5 does many of the style rules automatically\nHighlights of Coding Standards\nThis section is not intended to give a summary of all the coding standards that enabled by\nour customized StyleCop, but to give a highlight of some rules one will possibly meet in",
      "Links": [
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229042.aspx"
        },
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229042.aspx"
        },
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229042.aspx"
        },
        {
          "Uri": "http://www.jetbrains.com/resharper/"
        },
        {
          "Uri": "http://www.jetbrains.com/resharper/"
        },
        {
          "Uri": "http://www.jetbrains.com/resharper/"
        },
        {
          "Uri": "http://stylecop.codeplex.com/"
        },
        {
          "Uri": "http://stylecop.codeplex.com/"
        },
        {
          "Uri": "http://stylecop.codeplex.com/"
        },
        {
          "Uri": "http://codebox/SDLFxCop"
        },
        {
          "Uri": "http://codebox/SDLFxCop"
        },
        {
          "Uri": "http://codebox/SDLFxCop"
        },
        {
          "Uri": "http://toolbox/22561"
        },
        {
          "Uri": "http://toolbox/22561"
        },
        {
          "Uri": "http://toolbox/22561"
        }
      ]
    },
    {
      "Number": 9,
      "Text": "9 / 19\ndaily coding life. It also provides some recommended however not mandatory(which means\nnot enabled in StyleCop) coding standards.\nFile Layout (Recommended)\nOnly one public class is allowed per file.\nThe file name is derived from the class name.\nClass Definition Order (Mandatory)\nThe class definition contains class members in the following order, from less restricted\nscope (public) to more restrictive (private):\nNested types, e.g. classes, enum, struct, etc.\nField members, e.g. member variables, const, etc.\nMember functions\nConstructors\nFinalizer (Do not use unless absolutely necessary)\nMethods (Properties, Events, Operations, Overridables, Static)\nPrivate nested types\nNaming (Mandatory)\nDO use PascalCasing for all public member, type, and namespace names consisting of\nmultiple words.\nNOTE: A special case is made for two-letter acronyms in which both letters are capitalized,\ne.g. IOStream\nDO use camelCasing for parameter names.\nClass   : Observer\nFilename: Observer.cs\nPropertyDescriptor\nHtmlTag\nIOStream\npropertyDescriptor\nhtmlTag\nioStream",
      "Links": []
    },
    {
      "Number": 10,
      "Text": "10 / 19\nDO start with underscore for private fields\nDO start static readonly fields, constants with capitalized case\nDO NOT capitalize each word in so-called closed-form compound words\uF1C5 .\nDO have \"Async\" explicitly in the Async method name to notice people how to use it\nproperly\nFormatting (Mandatory)\nDO use spaces over tabs, and always show all spaces/tabs in IDE\nTips\nVisual Studio > TOOLS > Options > Text Editor > C# > Tabs > Insert spaces (Tab size:\n4)\nVisual Studio > Edit > Advanced > View White Space\nDO add using inside namespace declaration\nDO add a space when:\n1. for (var i = 0; i < 1; i++)\n2. if (a == b)\nCross-platform coding\nOur code should supports multiple operating systems. Don't assume we only run (and\ndevelop) on Windows. Code should be sensitvie to the differences between OS's. Here are\nsome specifics to consider.\nprivate readonly Guid _userId = Guid.NewGuid();\nprivate static readonly IEntityAccessor EntityAccessor = null;\nprivate const string MetadataName = \"MetadataName\";\nnamespace Microsoft.Content.Build.BuildWorker.UnitTest\n{ \nusing System;\n}",
      "Links": [
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229043.aspx"
        },
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229043.aspx"
        },
        {
          "Uri": "http://msdn.microsoft.com/en-us/library/ms229043.aspx"
        }
      ]
    },
    {
      "Number": 11,
      "Text": "11 / 19\nDO use Enviroment.NewLine instead of hard-coding the line break instead of \\r\\n, as\nWindows uses \\r\\n and OSX/Linux uses \\n.\nNote\nBe aware that thes line-endings may cause problems in code when using @\"\" text blocks\nwith line breaks.\nDO Use Path.Combine() or Path.DirectorySeparatorChar to separate directories. If this is\nnot possible (such as in scripting), use a forward slash /. Windows is more forgiving\nthan Linux in this regard.\nUnit tests and functional tests\nAssembly naming\nThe unit tests for the Microsoft.Foo assembly live in the Microsoft.Foo.Tests assembly.\nThe functional tests for the Microsoft.Foo assmebly live in the\nMicrosoft.Foo.FunctionalTests assmebly.\nIn general there should be exactly one unit test assebmly for each product runtime\nassembly. In general there should be one functional test assembly per repo. Exceptions can\nbe made for both.\nUnit test class naming\nTest class names end with Test and live in the same namespace as the class being tested.\nFor example, the unit tests for the Microsoft.Foo.Boo class would be in a Microsoft.Foo.Boo\nclass in the test assembly.\nUnit test method naming\nUnit test method names must be descriptive about what is being tested, under what\nconditions, and what the expectations are. Pascal casing and underscores can be used to\nimprove readability. The following test names are correct:\nThe following test names are incorrect:\nPublicApiArgumentsShouldHaveNotNullAnnotation\nPublic_api_arguments_should_have_not_null_annotation\nTest1\nConstructor",
      "Links": []
    },
    {
      "Number": 12,
      "Text": "12 / 19\nUnit test structure\nThe contents of every unit test should be split into three distinct stages, optionally\nseparated by these comments:\nThe crucial thing here is the Act stage is exactly one statement. That one statement is\nnothing more than a call to the one method that you are trying to test. keeping that one\nstatement as simple as possible is also very important. For example, this is not ideal:\nThis style is not recomended because way too many things can go wrong in this one\nstatement. All the GetComplexParamN() calls can throw for a variety of reasons unrelated to\nthe test itself. It is thus unclear to someone running into a problem why the failure occured.\nThe ideal pattern is to move the complex parameter building into the `Arrange section:\nNow the only reason the line with CallSomeMethod() can fail is if the method itself blew up.\nTesting exception messages\nIn general testing the specific exception message in a unit test is important. This ensures\nthat the exact desired exception is what is being tested rather than a different exception of\nFormatString\nGetData\n// Arrange\n// Act\n// Assert\nint result = myObj.CallSomeMethod(GetComplexParam1(), GetComplexParam2(),\nGetComplexParam3());\n// Arrange\nP1 p1 = GetComplexParam1();\nP2 p2 = GetComplexParam2();\nP3 p3 = GetComplexParam3();\n// Act\nint result = myObj.CallSomeMethod(p1, p2, p3);\n// Assert\nAssert.AreEqual(1234, result);",
      "Links": []
    },
    {
      "Number": 13,
      "Text": "13 / 19\nthe same type. In order to verify the exact exception it is important to verify the message.\nUse xUnit.net's plethora of built-in assertions\nxUnit.net includes many kinds of assertions – please use the most appropriate one for your\ntest. This will make the tests a lot more readable and also allow the test runner report the\nbest possible errors (whether it's local or the CI machine). For example, these are bad:\nThese are good:\nParallel tests\nBy default all unit test assemblies should run in parallel mode, which is the default. Unit\ntests shouldn't depend on any shared state, and so should generally be runnable in\nparallel. If the tests fail in parallel, the first thing to do is to figure out why; do not just\ndisable parallel tests!\nvar ex = Assert.Throws<InvalidOperationException>(\n() => fruitBasket.GetBananaById(1234));\nAssert.Equal(\n\"1234\",\nex.Message);\nAssert.Equal(true, someBool);\nAssert.True(\"abc123\" == someString);\nAssert.True(list1.Length == list2.Length);\nfor (int i = 0; i < list1.Length; i++) {\nAssert.True(\nString.Equals\nlist1[i],\nlist2[i],\nStringComparison.OrdinalIgnoreCase));\n}\nAssert.True(someBool);\nAssert.Equal(\"abc123\", someString);\n// built-in collection assertions!\nAssert.Equal(list1, list2, StringComparer.OrdinalIgnoreCase);",
      "Links": []
    },
    {
      "Number": 14,
      "Text": "14 / 19\nFor functional tests it is reasonable to disable parallel tests.",
      "Links": []
    },
    {
      "Number": 15,
      "Text": "15 / 19\nMarkdown\nMarkdown\uF1C5 is a lightweight markup language with plain text formatting syntax. Docfx\nsupports CommonMark\uF1C5 compliant Markdown parsed through the Markdig\uF1C5 parsing\nengine.\nLink to Math Expressions\nBlock Quotes\nThis is a block quote.\nAlerts\nNOTE\nInformation the user should notice even if skimming.\n\uF431\nTIP\nOptional information to help a user be more successful.\n\uF431\nIMPORTANT\nEssential information required for user success.\n\uF623\nCAUTION\nNegative potential consequences of an action.\n\uF623\nWARNING\nDangerous certain consequences of an action.\n\uF333",
      "Links": [
        {
          "Uri": "https://daringfireball.net/projects/markdown/"
        },
        {
          "Uri": "https://daringfireball.net/projects/markdown/"
        },
        {
          "Uri": "https://daringfireball.net/projects/markdown/"
        },
        {
          "Uri": "https://commonmark.org/"
        },
        {
          "Uri": "https://commonmark.org/"
        },
        {
          "Uri": "https://commonmark.org/"
        },
        {
          "Uri": "https://github.com/xoofx/markdig"
        },
        {
          "Uri": "https://github.com/xoofx/markdig"
        },
        {
          "Uri": "https://github.com/xoofx/markdig"
        },
        {
          "Goto": {
            "PageNumber": 17,
            "Coordinates": {
              "Left": 0,
              "Top": 239.25
            }
          }
        }
      ]
    },
    {
      "Number": 16,
      "NumberOfImages": 1,
      "Text": "16 / 19\nImage\nMermaid Diagrams\nFlowchart\nCode Snippet\nThe example highlights lines 2, line 5 to 7 and lines 9 to the end of the file.\nMY TODO\nThis is a TODO.\nText\nOne\nTwo\nHard Round Decision\nResult 1\nResult 2",
      "Links": [
        {
          "Uri": "https://learn.microsoft.com/en-us/media/learn/not-found/learn-not-found-light-mode.png?branch=main"
        },
        {
          "Uri": "https://learn.microsoft.com/en-us/media/learn/not-found/learn-not-found-light-mode.png?branch=main"
        }
      ]
    },
    {
      "Number": 17,
      "Text": "17 / 19\nMath Expressions\nThis sentence uses $ delimiters to show math inline:\nThe Cauchy-Schwarz Inequality\nThis expression uses \\$ to display a dollar sign:\nTo split $100 in half, we calculate\nusing System;\nusing Azure;\nusing Azure.Storage;\nusing Azure.Storage.Blobs;\nclass Program\n{   \nstatic void Main(string[] args)\n{       \n// Define the connection string for the storage account\nstring connectionString = \"DefaultEndpointsProtocol=https;AccountName=<your-\naccount-name>;AccountKey=<your-account-key>;EndpointSuffix=core.windows.net\";\n// Create a new BlobServiceClient using the connection string\nvar blobServiceClient = new BlobServiceClient(connectionString);\n// Create a new container\nvar container = blobServiceClient.CreateBlobContainer(\"mycontainer\");\n// Upload a file to the container\nusing (var fileStream = File.OpenRead(\"path/to/file.txt\"))\n{           \ncontainer.UploadBlob(\"file.txt\", fileStream);\n}       \n// Download the file from the container\nvar downloadedBlob = container.GetBlobClient(\"file.txt\").Download();\nusing (var fileStream = File.OpenWrite(\"path/to/downloaded-file.txt\"))\n{           \ndownloadedBlob.Value.Content.CopyTo(fileStream);\n}   \n}\n}",
      "Links": []
    },
    {
      "Number": 18,
      "Text": "18 / 19\nCustom Syntax Highlighting\nTabs\nLinux Windows\nThe above tab group was created with the following syntax:\nTabs are indicated by using a specific link syntax within a Markdown header. The syntax can\nbe described as follows:\nA tab starts with a Markdown header, #, and is followed by a Markdown link [](). The text\nof the link will become the text of the tab header, displayed to the customer. In order for\nthe header to be recognized as a tab, the link itself must start with #tab/ and be followed\nby an ID representing the content of the tab. The ID is used to sync all same-ID tabs across\nthe page. Using the above example, when a user selects a tab with the link #tab/windows, all\ntabs with the link #tab/windows on the page will be selected.\nDependent tabs\nresource storageAccount 'Microsoft.Storage/storageAccounts@2021-06-01' = {\nname: 'hello'\n// (...)\n}\nContent for Linux...\n# [Linux](#tab/linux)\nContent for Linux...\n# [Windows](#tab/windows)\nContent for Windows...\n---\n# [Tab Display Name](#tab/tab-id)",
      "Links": [
        {
          "Goto": {
            "PageNumber": 18,
            "Coordinates": {
              "Left": 0,
              "Top": 603
            }
          }
        }
      ]
    },
    {
      "Number": 19,
      "Text": "19 / 19\nIt's possible to make the selection in one set of tabs dependent on the selection in another\nset of tabs. Here's an example of that in action:\n.NET TypeScript REST API\nNotice how changing the Linux/Windows selection above changes the content in the .NET\nand TypeScript tabs. This is because the tab group defines two versions for each .NET and\nTypeScript, where the Windows/Linux selection above determines which version is shown\nfor .NET/TypeScript. Here's the markup that shows how this is done:\nDetails\nDemo\n.NET content for Linux...\n# [.NET](#tab/dotnet/linux)\n.NET content for Linux...\n# [.NET](#tab/dotnet/windows)\n.NET content for Windows...\n# [TypeScript](#tab/typescript/linux)\nTypeScript content for Linux...\n# [TypeScript](#tab/typescript/windows)\nTypeScript content for Windows...\n# [REST API](#tab/rest)\nREST API content, independent of platform...\n---",
      "Links": [
        {
          "Goto": {
            "PageNumber": 19,
            "Coordinates": {
              "Left": 0,
              "Top": 712.5
            }
          }
        }
      ]
    }
  ],
  "Bookmarks": [
    {
      "Title": "Getting Started with docfx",
      "Children": [],
      "Destination": {
        "PageNumber": 3,
        "Type": 2,
        "Coordinates": {
          "Top": 0
        }
      }
    },
    {
      "Title": "Engineering Docs",
      "Children": [
        {
          "Title": "Section 1",
          "Children": [],
          "Destination": {
            "PageNumber": 5,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Title": "Engineering Guidelines",
          "Children": [],
          "Destination": {
            "PageNumber": 5,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        },
        {
          "Title": "C# Coding Standards",
          "Children": [],
          "Destination": {
            "PageNumber": 8,
            "Type": 2,
            "Coordinates": {
              "Top": 0
            }
          }
        }
      ],
      "Destination": {
        "PageNumber": 5,
        "Type": 2,
        "Coordinates": {
          "Top": 0
        }
      }
    },
    {
      "Title": "Markdown",
      "Children": [],
      "Destination": {
        "PageNumber": 15,
        "Type": 2,
        "Coordinates": {
          "Top": 0
        }
      }
    },
    {
      "Title": "Microsoft Docs",
      "Children": [],
      "Uri": "https://docs.microsoft.com/en-us/"
    }
  ]
}