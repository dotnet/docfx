{
  "api/BuildFromAssembly.Class1.html": {
    "href": "api/BuildFromAssembly.Class1.html",
    "title": "Class Class1 | docfx seed website",
    "keywords": "Class Class1 Namespace BuildFromAssembly Assembly BuildFromAssembly.dll This is a test class. public class Class1 Inheritance object Class1 Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Class1() public Class1() Methods HelloWorld() public static void HelloWorld()"
  },
  "api/BuildFromAssembly.html": {
    "href": "api/BuildFromAssembly.html",
    "title": "Namespace BuildFromAssembly | docfx seed website",
    "keywords": "Namespace BuildFromAssembly Classes Class1 This is a test class."
  },
  "api/BuildFromCSharpSourceCode.CSharp.html": {
    "href": "api/BuildFromCSharpSourceCode.CSharp.html",
    "title": "Class CSharp | docfx seed website",
    "keywords": "Class CSharp Namespace BuildFromCSharpSourceCode Assembly cs.temp.dll.dll public class CSharp Inheritance object CSharp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/BuildFromCSharpSourceCode.html": {
    "href": "api/BuildFromCSharpSourceCode.html",
    "title": "Namespace BuildFromCSharpSourceCode | docfx seed website",
    "keywords": "Namespace BuildFromCSharpSourceCode Classes CSharp"
  },
  "api/BuildFromProject.Class1.html": {
    "href": "api/BuildFromProject.Class1.html",
    "title": "Class Class1 | docfx seed website",
    "keywords": "Class Class1 Namespace BuildFromProject Assembly BuildFromProject.dll public class Class1 Inheritance object Class1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Issue1651() Pricing models are used to calculate theoretical option values 1Black Scholes 2Black76 3Black76Fut 4Equity Tree 5Variance Swap 6Dividend Forecast public void Issue1651() Issue7484() public void Issue7484() Remarks There's really no reason to not believe that this class can test things. Term Description A Term A Description Bee Term Bee Description Issue896() Test public void Issue896() See Also Class1.Test<T> XmlCommentIncludeTag() This method should do something... public void XmlCommentIncludeTag() Remarks This is remarks."
  },
  "api/BuildFromProject.Class1.Test-1.html": {
    "href": "api/BuildFromProject.Class1.Test-1.html",
    "title": "Class Class1.Test<T> | docfx seed website",
    "keywords": "Class Class1.Test<T> Namespace BuildFromProject Assembly BuildFromProject.dll public class Class1.Test<T> Type Parameters T Inheritance object Class1.Test<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BuildFromProject.html": {
    "href": "api/BuildFromProject.html",
    "title": "Namespace BuildFromProject | docfx seed website",
    "keywords": "Namespace BuildFromProject Classes Class1 Class1.Test<T> Inheritdoc Inheritdoc.Issue6366 Inheritdoc.Issue6366.Class1<T> Inheritdoc.Issue6366.Class2 Inheritdoc.Issue7035 Inheritdoc.Issue7484 This is a test class to have something for DocFX to document. Inheritdoc.Issue8101 Structs Inheritdoc.Issue8129 Interfaces IInheritdoc"
  },
  "api/BuildFromProject.IInheritdoc.html": {
    "href": "api/BuildFromProject.IInheritdoc.html",
    "title": "Interface IInheritdoc | docfx seed website",
    "keywords": "Interface IInheritdoc Namespace BuildFromProject Assembly BuildFromProject.dll public interface IInheritdoc Methods Issue7629() This method should do something... void Issue7629()"
  },
  "api/BuildFromProject.Inheritdoc.html": {
    "href": "api/BuildFromProject.Inheritdoc.html",
    "title": "Class Inheritdoc | docfx seed website",
    "keywords": "Class Inheritdoc Namespace BuildFromProject Assembly BuildFromProject.dll public class Inheritdoc : IInheritdoc, IDisposable Inheritance object Inheritdoc Implements IInheritdoc IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Issue7628() This method should do something... public void Issue7628() Issue7629() This method should do something... public void Issue7629()"
  },
  "api/BuildFromProject.Inheritdoc.Issue6366.Class1-1.html": {
    "href": "api/BuildFromProject.Inheritdoc.Issue6366.Class1-1.html",
    "title": "Class Inheritdoc.Issue6366.Class1<T> | docfx seed website",
    "keywords": "Class Inheritdoc.Issue6366.Class1<T> Namespace BuildFromProject Assembly BuildFromProject.dll public abstract class Inheritdoc.Issue6366.Class1<T> Type Parameters T Inheritance object Inheritdoc.Issue6366.Class1<T> Derived Inheritdoc.Issue6366.Class2 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestMethod1(T, int) This text inherited. public abstract T TestMethod1(T parm1, int parm2) Parameters parm1 T This text NOT inherited. parm2 int This text inherited. Returns T This text inherited."
  },
  "api/BuildFromProject.Inheritdoc.Issue6366.Class2.html": {
    "href": "api/BuildFromProject.Inheritdoc.Issue6366.Class2.html",
    "title": "Class Inheritdoc.Issue6366.Class2 | docfx seed website",
    "keywords": "Class Inheritdoc.Issue6366.Class2 Namespace BuildFromProject Assembly BuildFromProject.dll public class Inheritdoc.Issue6366.Class2 : Inheritdoc.Issue6366.Class1<bool> Inheritance object Inheritdoc.Issue6366.Class1<bool> Inheritdoc.Issue6366.Class2 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestMethod1(bool, int) This text inherited. public override bool TestMethod1(bool parm1, int parm2) Parameters parm1 bool This text NOT inherited. parm2 int This text inherited. Returns bool This text inherited."
  },
  "api/BuildFromProject.Inheritdoc.Issue6366.html": {
    "href": "api/BuildFromProject.Inheritdoc.Issue6366.html",
    "title": "Class Inheritdoc.Issue6366 | docfx seed website",
    "keywords": "Class Inheritdoc.Issue6366 Namespace BuildFromProject Assembly BuildFromProject.dll public class Inheritdoc.Issue6366 Inheritance object Inheritdoc.Issue6366 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BuildFromProject.Inheritdoc.Issue7035.html": {
    "href": "api/BuildFromProject.Inheritdoc.Issue7035.html",
    "title": "Class Inheritdoc.Issue7035 | docfx seed website",
    "keywords": "Class Inheritdoc.Issue7035 Namespace BuildFromProject Assembly BuildFromProject.dll public class Inheritdoc.Issue7035 Inheritance object Inheritdoc.Issue7035 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods A() public void A() B() public void B()"
  },
  "api/BuildFromProject.Inheritdoc.Issue7484.html": {
    "href": "api/BuildFromProject.Inheritdoc.Issue7484.html",
    "title": "Class Inheritdoc.Issue7484 | docfx seed website",
    "keywords": "Class Inheritdoc.Issue7484 Namespace BuildFromProject Assembly BuildFromProject.dll This is a test class to have something for DocFX to document. public class Inheritdoc.Issue7484 Inheritance object Inheritdoc.Issue7484 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks We're going to talk about things now. BoolReturningMethod(bool) Simple method to generate docs for. DoDad A string that could have something. Constructors Issue7484() This is a constructor to document. public Issue7484() Properties DoDad A string that could have something. public string DoDad { get; } Property Value string Methods BoolReturningMethod(bool) Simple method to generate docs for. public bool BoolReturningMethod(bool source) Parameters source bool A meaningless boolean value, much like most questions in the world. Returns bool An exactly equivalently meaningless boolean value, much like most answers in the world. Remarks I'd like to take a moment to thank all of those who helped me get to a place where I can write documentation like this."
  },
  "api/BuildFromProject.Inheritdoc.Issue8101.html": {
    "href": "api/BuildFromProject.Inheritdoc.Issue8101.html",
    "title": "Class Inheritdoc.Issue8101 | docfx seed website",
    "keywords": "Class Inheritdoc.Issue8101 Namespace BuildFromProject Assembly BuildFromProject.dll public class Inheritdoc.Issue8101 Inheritance object Inheritdoc.Issue8101 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Tween(int, int, float, Action<int>) Create a new tween. public static object Tween(int from, int to, float duration, Action<int> onChange) Parameters from int The starting value. to int The end value. duration float Total tween duration in seconds. onChange Action<int> A callback that will be invoked every time the tween value changes. Returns object The newly created tween instance. Tween(float, float, float, Action<float>) Create a new tween. public static object Tween(float from, float to, float duration, Action<float> onChange) Parameters from float The starting value. to float The end value. duration float Total tween duration in seconds. onChange Action<float> A callback that will be invoked every time the tween value changes. Returns object The newly created tween instance."
  },
  "api/BuildFromProject.Inheritdoc.Issue8129.html": {
    "href": "api/BuildFromProject.Inheritdoc.Issue8129.html",
    "title": "Struct Inheritdoc.Issue8129 | docfx seed website",
    "keywords": "Struct Inheritdoc.Issue8129 Namespace BuildFromProject Assembly BuildFromProject.dll public struct Inheritdoc.Issue8129 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Issue8129(string) public Issue8129(string foo) Parameters foo string"
  },
  "api/BuildFromVBSourceCode.BaseClass1.html": {
    "href": "api/BuildFromVBSourceCode.BaseClass1.html",
    "title": "Class BaseClass1 | docfx seed website",
    "keywords": "Class BaseClass1 Namespace BuildFromVBSourceCode Assembly vb.temp.dll.dll This is the BaseClass public abstract class BaseClass1 Inheritance object BaseClass1 Derived Class1 Inherited Members object.Equals(object) object.Equals(object, object) object.Finalize() object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithDeclarationKeyword(Class1) public abstract DateTime WithDeclarationKeyword(Class1 keyword) Parameters keyword Class1 Returns DateTime"
  },
  "api/BuildFromVBSourceCode.Class1.html": {
    "href": "api/BuildFromVBSourceCode.Class1.html",
    "title": "Class Class1 | docfx seed website",
    "keywords": "Class Class1 Namespace BuildFromVBSourceCode Assembly vb.temp.dll.dll This is summary from vb class... public class Class1 : BaseClass1 Inheritance object BaseClass1 Class1 Inherited Members object.Equals(object) object.Equals(object, object) object.Finalize() object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ValueClass This is a Value type public Class1 ValueClass Field Value Class1 Properties Keyword [Obsolete(\"This member is obsolete.\", true)] public Class1 Keyword { get; } Property Value Class1 Methods Value(string) This is a Function public int Value(string name) Parameters name string Name as the String value Returns int Returns Ahooo WithDeclarationKeyword(Class1) What is Sub? public override DateTime WithDeclarationKeyword(Class1 keyword) Parameters keyword Class1 Returns DateTime"
  },
  "api/BuildFromVBSourceCode.html": {
    "href": "api/BuildFromVBSourceCode.html",
    "title": "Namespace BuildFromVBSourceCode | docfx seed website",
    "keywords": "Namespace BuildFromVBSourceCode Classes BaseClass1 This is the BaseClass Class1 This is summary from vb class..."
  },
  "api/CatLibrary.Cat-2.html": {
    "href": "api/CatLibrary.Cat-2.html",
    "title": "Class Cat<T, K> | docfx seed website",
    "keywords": "Class Cat<T, K> Namespace CatLibrary Assembly CatLibrary.dll Here's main class of this Demo. You can see mostly type of article within this class and you for more detail, please see the remarks. this class is a template class. It has two Generic parameter. they are: T and K. The extension method of this class can refer to ICatExtension class This is a class talking about CAT. NOTE This is a CAT class Refer to IAnimal to see other animals. [Serializable] public class Cat<T, K> : ICat, IAnimal where T : class, new() where K : struct Type Parameters T This type should be class and can new instance. K This type is a struct type, class type can't be used for this parameter. Inheritance object Cat<T, K> Implements ICat IAnimal Inherited Members object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ICatExtension.Play(ICat, ContainersRefType.ColorType) ICatExtension.Sleep(ICat, long) Examples Here's example of how to create an instance of this class. As T is limited with class and K is limited with struct. var a = new Cat(object, int)(); int catNumber = new int(); unsafe { a.GetFeetLength(catNumber); } As you see, here we bring in pointer so we need to add unsafe keyword. Remarks THIS is remarks overridden in MARKDWON file Constructors Cat() Default constructor. public Cat() Cat(T) Constructor with one generic parameter. public Cat(T ownType) Parameters ownType T This parameter type defined by class. Cat(string, out int, string, bool) It's a complex constructor. The parameter will have some attributes. public Cat(string nickName, out int age, string realName, bool isHealthy) Parameters nickName string it's string type. age int It's an out and ref parameter. realName string It's an out paramter. isHealthy bool It's an in parameter. Fields isHealthy Field with attribute. [ContextStatic] [NonSerialized] public bool isHealthy Field Value bool Properties Age Hint cat's age. protected int Age { get; set; } Property Value int this[string] This is index property of Cat. You can see that the visibility is different between get and set method. public int this[string a] { protected get; set; } Parameters a string Cat's name. Property Value int Cat's number. Name EII property. public string Name { get; } Property Value string Methods Override CalculateFood Name It's an overridden summary in markdown format This is overriding methods. You can override parameter descriptions for methods, you can even add exceptions to methods. Check the intermediate obj folder to see the data model of the generated method/class. Override Yaml header should follow the data structure. public Dictionary<string, List<int>> CalculateFood(DateTime date) Parameters date DateTime This is overridden description for a parameter. id must be specified. Returns Dictionary<string, List<int>> It's overridden description for return. type must be specified. Exceptions ArgumentException This is an overridden argument exception. you can add additional exception by adding different exception type. Equals(object) Override the method of Object.Equals(object obj). public override bool Equals(object obj) Parameters obj object Can pass any class type. Returns bool The return value tell you whehter the compare operation is successful. GetTailLength(int*, params object[]) It's an unsafe method. As you see, catName is a pointer, so we need to add unsafe keyword. public long GetTailLength(int* catName, params object[] parameters) Parameters catName int* Thie represent for cat name length. parameters object[] Optional parameters. Returns long Return cat tail's length. Jump(T, K, ref bool) This method have attribute above it. [Conditional(\"Debug\")] public void Jump(T ownType, K anotherOwnType, ref bool cheat) Parameters ownType T Type come from class define. anotherOwnType K Type come from class define. cheat bool Hint whether this cat has cheat mode. Exceptions ArgumentException This is an argument exception Events ownEat Eat event of this cat public event EventHandler ownEat Event Type EventHandler Operators operator +(Cat<T, K>, int) Addition operator of this class. public static int operator +(Cat<T, K> lsr, int rsr) Parameters lsr Cat<T, K> ... rsr int Returns int Result with int type. explicit operator Tom(Cat<T, K>) Expilicit operator of this class. It means this cat can evolve to change to Tom. Tom and Jerry. public static explicit operator Tom(Cat<T, K> src) Parameters src Cat<T, K> Instance of this class. Returns Tom Advanced class type of cat. operator -(Cat<T, K>, int) Similar with operaotr +, refer to that topic. public static int operator -(Cat<T, K> lsr, int rsr) Parameters lsr Cat<T, K> rsr int Returns int"
  },
  "api/CatLibrary.CatException-1.html": {
    "href": "api/CatLibrary.CatException-1.html",
    "title": "Class CatException<T> | docfx seed website",
    "keywords": "Class CatException<T> Namespace CatLibrary Assembly CatLibrary.dll public class CatException<T> : Exception, ISerializable Type Parameters T Inheritance object Exception CatException<T> Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/CatLibrary.Complex-2.html": {
    "href": "api/CatLibrary.Complex-2.html",
    "title": "Class Complex<T, J> | docfx seed website",
    "keywords": "Class Complex<T, J> Namespace CatLibrary Assembly CatLibrary.dll public class Complex<T, J> Type Parameters T J Inheritance object Complex<T, J> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/CatLibrary.Core.ContainersRefType.ColorType.html": {
    "href": "api/CatLibrary.Core.ContainersRefType.ColorType.html",
    "title": "Enum ContainersRefType.ColorType | docfx seed website",
    "keywords": "Enum ContainersRefType.ColorType Namespace CatLibrary.Core Assembly CatLibrary.Core.dll Enumeration ColorType public enum ContainersRefType.ColorType Fields Blue = 1 blue Red = 0 red Yellow = 2 yellow"
  },
  "api/CatLibrary.Core.ContainersRefType.ContainersRefTypeChild.html": {
    "href": "api/CatLibrary.Core.ContainersRefType.ContainersRefTypeChild.html",
    "title": "Class ContainersRefType.ContainersRefTypeChild | docfx seed website",
    "keywords": "Class ContainersRefType.ContainersRefTypeChild Namespace CatLibrary.Core Assembly CatLibrary.Core.dll public class ContainersRefType.ContainersRefTypeChild Inheritance object ContainersRefType.ContainersRefTypeChild Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/CatLibrary.Core.ContainersRefType.ContainersRefTypeChildInterface.html": {
    "href": "api/CatLibrary.Core.ContainersRefType.ContainersRefTypeChildInterface.html",
    "title": "Interface ContainersRefType.ContainersRefTypeChildInterface | docfx seed website",
    "keywords": "Interface ContainersRefType.ContainersRefTypeChildInterface Namespace CatLibrary.Core Assembly CatLibrary.Core.dll public interface ContainersRefType.ContainersRefTypeChildInterface"
  },
  "api/CatLibrary.Core.ContainersRefType.ContainersRefTypeDelegate.html": {
    "href": "api/CatLibrary.Core.ContainersRefType.ContainersRefTypeDelegate.html",
    "title": "Delegate ContainersRefType.ContainersRefTypeDelegate | docfx seed website",
    "keywords": "Delegate ContainersRefType.ContainersRefTypeDelegate Namespace CatLibrary.Core Assembly CatLibrary.Core.dll Delegate ContainersRefTypeDelegate public delegate void ContainersRefType.ContainersRefTypeDelegate()"
  },
  "api/CatLibrary.Core.ContainersRefType.html": {
    "href": "api/CatLibrary.Core.ContainersRefType.html",
    "title": "Struct ContainersRefType | docfx seed website",
    "keywords": "Struct ContainersRefType Namespace CatLibrary.Core Assembly CatLibrary.Core.dll Struct ContainersRefType public struct ContainersRefType Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ColorCount ColorCount public long ColorCount Field Value long Properties GetColorCount GetColorCount public long GetColorCount { get; } Property Value long Methods ContainersRefTypeNonRefMethod(params object[]) ContainersRefTypeNonRefMethod array public static int ContainersRefTypeNonRefMethod(params object[] parmsArray) Parameters parmsArray object[] Returns int Events ContainersRefTypeEventHandler public event EventHandler ContainersRefTypeEventHandler Event Type EventHandler"
  },
  "api/CatLibrary.Core.ExplicitLayoutClass.html": {
    "href": "api/CatLibrary.Core.ExplicitLayoutClass.html",
    "title": "Class ExplicitLayoutClass | docfx seed website",
    "keywords": "Class ExplicitLayoutClass Namespace CatLibrary.Core Assembly CatLibrary.Core.dll public class ExplicitLayoutClass Inheritance object ExplicitLayoutClass Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/CatLibrary.Core.html": {
    "href": "api/CatLibrary.Core.html",
    "title": "Namespace CatLibrary.Core | docfx seed website",
    "keywords": "Namespace CatLibrary.Core Classes ContainersRefType.ContainersRefTypeChild ExplicitLayoutClass Structs ContainersRefType Struct ContainersRefType Interfaces ContainersRefType.ContainersRefTypeChildInterface Enums ContainersRefType.ColorType Enumeration ColorType Delegates ContainersRefType.ContainersRefTypeDelegate Delegate ContainersRefTypeDelegate"
  },
  "api/CatLibrary.FakeDelegate-1.html": {
    "href": "api/CatLibrary.FakeDelegate-1.html",
    "title": "Delegate FakeDelegate<T> | docfx seed website",
    "keywords": "Delegate FakeDelegate<T> Namespace CatLibrary Assembly CatLibrary.dll Fake delegate public delegate int FakeDelegate<T>(long num, string name, params object[] scores) Parameters num long Fake para name string Fake para scores object[] Optional Parameter. Returns int Return a fake number to confuse you. Type Parameters T Fake para"
  },
  "api/CatLibrary.html": {
    "href": "api/CatLibrary.html",
    "title": "Namespace CatLibrary | docfx seed website",
    "keywords": "Namespace CatLibrary CatLibrary.Core Classes Cat<T, K> Here's main class of this Demo. You can see mostly type of article within this class and you for more detail, please see the remarks. this class is a template class. It has two Generic parameter. they are: T and K. The extension method of this class can refer to ICatExtension class CatException<T> Complex<T, J> ICatExtension It's the class that contains ICat interface's extension method. This class must be public and static. Also it shouldn't be a geneic class Tom Tom class is only inherit from Object. Not any member inside itself. TomFromBaseClass TomFromBaseClass inherits from @ Interfaces IAnimal This is basic interface of all animal. ICat Cat's interface Delegates FakeDelegate<T> Fake delegate MRefDelegate<K, T, L> Generic delegate with many constrains. MRefNormalDelegate Delegate in the namespace"
  },
  "api/CatLibrary.IAnimal.html": {
    "href": "api/CatLibrary.IAnimal.html",
    "title": "Interface IAnimal | docfx seed website",
    "keywords": "Interface IAnimal Namespace CatLibrary Assembly CatLibrary.dll This is basic interface of all animal. Welcome to the Animal world! public interface IAnimal Remarks THIS is remarks overridden in MARKDWON file Properties this[int] Return specific number animal's name. string this[int index] { get; } Parameters index int Animal number. Property Value string Animal name. Name Name of Animal. string Name { get; } Property Value string Methods Eat() Animal's eat method. void Eat() Eat(string) Feed the animal with some food void Eat(string food) Parameters food string Food to eat Eat<Tool>(Tool) Overload method of eat. This define the animal eat by which tool. void Eat<Tool>(Tool tool) where Tool : class Parameters tool Tool Tool name. Type Parameters Tool It's a class type."
  },
  "api/CatLibrary.ICat.html": {
    "href": "api/CatLibrary.ICat.html",
    "title": "Interface ICat | docfx seed website",
    "keywords": "Interface ICat Namespace CatLibrary Assembly CatLibrary.dll Cat's interface public interface ICat : IAnimal Inherited Members IAnimal.Name IAnimal.this[int] IAnimal.Eat() IAnimal.Eat<Tool>(Tool) IAnimal.Eat(string) Extension Methods ICatExtension.Play(ICat, ContainersRefType.ColorType) ICatExtension.Sleep(ICat, long) Events eat eat event of cat. Every cat must implement this event. event EventHandler eat Event Type EventHandler"
  },
  "api/CatLibrary.ICatExtension.html": {
    "href": "api/CatLibrary.ICatExtension.html",
    "title": "Class ICatExtension | docfx seed website",
    "keywords": "Class ICatExtension Namespace CatLibrary Assembly CatLibrary.dll It's the class that contains ICat interface's extension method. This class must be public and static. Also it shouldn't be a geneic class public static class ICatExtension Inheritance object ICatExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Play(ICat, ColorType) Extension method to let cat play public static void Play(this ICat icat, ContainersRefType.ColorType toy) Parameters icat ICat Cat toy ContainersRefType.ColorType Something to play Sleep(ICat, long) Extension method hint that how long the cat can sleep. public static void Sleep(this ICat icat, long hours) Parameters icat ICat The type will be extended. hours long The length of sleep."
  },
  "api/CatLibrary.MRefDelegate-3.html": {
    "href": "api/CatLibrary.MRefDelegate-3.html",
    "title": "Delegate MRefDelegate<K, T, L> | docfx seed website",
    "keywords": "Delegate MRefDelegate<K, T, L> Namespace CatLibrary Assembly CatLibrary.dll Generic delegate with many constrains. public delegate void MRefDelegate<K, T, L>(K k, T t, L l) where K : class, IComparable where T : struct where L : Tom, IEnumerable<long> Parameters k K Type K. t T Type T. l L Type L. Type Parameters K Generic K. T Generic T. L Generic L."
  },
  "api/CatLibrary.MRefNormalDelegate.html": {
    "href": "api/CatLibrary.MRefNormalDelegate.html",
    "title": "Delegate MRefNormalDelegate | docfx seed website",
    "keywords": "Delegate MRefNormalDelegate Namespace CatLibrary Assembly CatLibrary.dll Delegate in the namespace public delegate void MRefNormalDelegate(List<string> pics, out string name) Parameters pics List<string> a name list of pictures. name string give out the needed name."
  },
  "api/CatLibrary.Tom.html": {
    "href": "api/CatLibrary.Tom.html",
    "title": "Class Tom | docfx seed website",
    "keywords": "Class Tom Namespace CatLibrary Assembly CatLibrary.dll Tom class is only inherit from Object. Not any member inside itself. public class Tom Inheritance object Tom Derived TomFromBaseClass Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TomMethod(Complex<TomFromBaseClass, TomFromBaseClass>, Tuple<string, Tom>) This is a Tom Method with complex type as return public Complex<string, TomFromBaseClass> TomMethod(Complex<TomFromBaseClass, TomFromBaseClass> a, Tuple<string, Tom> b) Parameters a Complex<TomFromBaseClass, TomFromBaseClass> A complex input b Tuple<string, Tom> Another complex input Returns Complex<string, TomFromBaseClass> Complex TomFromBaseClass Exceptions NotImplementedException This is not implemented ArgumentException This is the exception to be thrown when implemented CatException<T> This is the exception in current documentation"
  },
  "api/CatLibrary.TomFromBaseClass.html": {
    "href": "api/CatLibrary.TomFromBaseClass.html",
    "title": "Class TomFromBaseClass | docfx seed website",
    "keywords": "Class TomFromBaseClass Namespace CatLibrary Assembly CatLibrary.dll TomFromBaseClass inherits from @ public class TomFromBaseClass : Tom Inheritance object Tom TomFromBaseClass Inherited Members Tom.TomMethod(Complex<TomFromBaseClass, TomFromBaseClass>, Tuple<string, Tom>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TomFromBaseClass(int) This is a #ctor with parameter public TomFromBaseClass(int k) Parameters k int"
  },
  "api/MRef.Demo.Enumeration.ColorType.html": {
    "href": "api/MRef.Demo.Enumeration.ColorType.html",
    "title": "Enum ColorType | docfx seed website",
    "keywords": "Enum ColorType Namespace MRef.Demo.Enumeration Assembly CatLibrary.dll Enumeration ColorType public enum ColorType Fields Blue = 1 blue like river Red = 0 this color is red Yellow = 2 yellow comes from desert Remarks Red/Blue/Yellow can become all color you want. See Also object"
  },
  "api/MRef.Demo.Enumeration.html": {
    "href": "api/MRef.Demo.Enumeration.html",
    "title": "Namespace MRef.Demo.Enumeration | docfx seed website",
    "keywords": "Namespace MRef.Demo.Enumeration Enums ColorType Enumeration ColorType"
  },
  "articles/csharp_coding_standards.html": {
    "href": "articles/csharp_coding_standards.html",
    "title": "C# Coding Standards | docfx seed website",
    "keywords": "C# Coding Standards Introduction The coding standard will be used in conjunction with customized version of StyleCop and FxCop [TODO] during both development and build process. This will help ensure that the standard is followed by all developers on the team in a consistent manner. \"Any fool can write code that a computer can understand. Good programmers write code that humans understand\". Martin Fowler. Refactoring: Improving the design of existing code. Purpose The aim of this section is to define a set of C# coding standards to be used by CAPS build team to guarantee maximum legibility, reliability, re-usability and homogeneity of our code. Each section is marked Mandatory or Recommended. Mandatory sections, will be enforced during code reviews as well as tools like StyleCop and FxCop, and code will not be considered complete until it is compliant. Scope This section contains general C# coding standards which can be applied to any type of application developed in C#, based on Framework Design Guidelines. It does not pretend to be a tutorial on C#. It only includes a set of limitations and recommendations focused on clarifying the development. Tools Resharper is a great 3rd party code cleanup and style tool. StyleCop analyzes C# srouce code to enforce a set of style and consistency rules and has been integrated into many 3rd party development tools such as Resharper. FxCop is an application that analyzes managed code assemblies (code that targets the .NET Framework common language runtime) and reports information about the assemblies, such as possible design, localization, performance, and security improvements. C# Stylizer does many of the style rules automatically Highlights of Coding Standards This section is not intended to give a summary of all the coding standards that enabled by our customized StyleCop, but to give a highlight of some rules one will possibly meet in daily coding life. It also provides some recommended however not mandatory(which means not enabled in StyleCop) coding standards. File Layout (Recommended) Only one public class is allowed per file. The file name is derived from the class name. Class : Observer Filename: Observer.cs Class Definition Order (Mandatory) The class definition contains class members in the following order, from less restricted scope (public) to more restrictive (private): Nested types, e.g. classes, enum, struct, etc. Field members, e.g. member variables, const, etc. Member functions Constructors Finalizer (Do not use unless absolutely necessary) Methods (Properties, Events, Operations, Overridables, Static) Private nested types Naming (Mandatory) DO use PascalCasing for all public member, type, and namespace names consisting of multiple words. PropertyDescriptor HtmlTag IOStream NOTE: A special case is made for two-letter acronyms in which both letters are capitalized, e.g. IOStream DO use camelCasing for parameter names. propertyDescriptor htmlTag ioStream DO start with underscore for private fields private readonly Guid _userId = Guid.NewGuid(); DO start static readonly fields, constants with capitalized case private static readonly IEntityAccessor EntityAccessor = null; private const string MetadataName = \"MetadataName\"; DO NOT capitalize each word in so-called closed-form compound words. DO have \"Async\" explicitly in the Async method name to notice people how to use it properly Formatting (Mandatory) DO use spaces over tabs, and always show all spaces/tabs in IDE Tips Visual Studio > TOOLS > Options > Text Editor > C# > Tabs > Insert spaces (Tab size: 4) Visual Studio > Edit > Advanced > View White Space DO add using inside namespace declaration namespace Microsoft.Content.Build.BuildWorker.UnitTest { using System; } DO add a space when: for (var i = 0; i < 1; i++) if (a == b) Cross-platform coding Our code should supports multiple operating systems. Don't assume we only run (and develop) on Windows. Code should be sensitvie to the differences between OS's. Here are some specifics to consider. DO use Enviroment.NewLine instead of hard-coding the line break instead of \\r\\n, as Windows uses \\r\\n and OSX/Linux uses \\n. Note Be aware that thes line-endings may cause problems in code when using @\"\" text blocks with line breaks. DO Use Path.Combine() or Path.DirectorySeparatorChar to separate directories. If this is not possible (such as in scripting), use a forward slash /. Windows is more forgiving than Linux in this regard. Unit tests and functional tests Assembly naming The unit tests for the Microsoft.Foo assembly live in the Microsoft.Foo.Tests assembly. The functional tests for the Microsoft.Foo assmebly live in the Microsoft.Foo.FunctionalTests assmebly. In general there should be exactly one unit test assebmly for each product runtime assembly. In general there should be one functional test assembly per repo. Exceptions can be made for both. Unit test class naming Test class names end with Test and live in the same namespace as the class being tested. For example, the unit tests for the Microsoft.Foo.Boo class would be in a Microsoft.Foo.Boo class in the test assembly. Unit test method naming Unit test method names must be descriptive about what is being tested, under what conditions, and what the expectations are. Pascal casing and underscores can be used to improve readability. The following test names are correct: PublicApiArgumentsShouldHaveNotNullAnnotation Public_api_arguments_should_have_not_null_annotation The following test names are incorrect: Test1 Constructor FormatString GetData Unit test structure The contents of every unit test should be split into three distinct stages, optionally separated by these comments: // Arrange // Act // Assert The crucial thing here is the Act stage is exactly one statement. That one statement is nothing more than a call to the one method that you are trying to test. keeping that one statement as simple as possible is also very important. For example, this is not ideal: int result = myObj.CallSomeMethod(GetComplexParam1(), GetComplexParam2(), GetComplexParam3()); This style is not recomended because way too many things can go wrong in this one statement. All the GetComplexParamN() calls can throw for a variety of reasons unrelated to the test itself. It is thus unclear to someone running into a problem why the failure occured. The ideal pattern is to move the complex parameter building into the `Arrange section: // Arrange P1 p1 = GetComplexParam1(); P2 p2 = GetComplexParam2(); P3 p3 = GetComplexParam3(); // Act int result = myObj.CallSomeMethod(p1, p2, p3); // Assert Assert.AreEqual(1234, result); Now the only reason the line with CallSomeMethod() can fail is if the method itself blew up. Testing exception messages In general testing the specific exception message in a unit test is important. This ensures that the exact desired exception is what is being tested rather than a different exception of the same type. In order to verify the exact exception it is important to verify the message. var ex = Assert.Throws<InvalidOperationException>( () => fruitBasket.GetBananaById(1234)); Assert.Equal( \"1234\", ex.Message); Use xUnit.net's plethora of built-in assertions xUnit.net includes many kinds of assertions – please use the most appropriate one for your test. This will make the tests a lot more readable and also allow the test runner report the best possible errors (whether it's local or the CI machine). For example, these are bad: Assert.Equal(true, someBool); Assert.True(\"abc123\" == someString); Assert.True(list1.Length == list2.Length); for (int i = 0; i < list1.Length; i++) { Assert.True( String.Equals list1[i], list2[i], StringComparison.OrdinalIgnoreCase)); } These are good: Assert.True(someBool); Assert.Equal(\"abc123\", someString); // built-in collection assertions! Assert.Equal(list1, list2, StringComparer.OrdinalIgnoreCase); Parallel tests By default all unit test assemblies should run in parallel mode, which is the default. Unit tests shouldn't depend on any shared state, and so should generally be runnable in parallel. If the tests fail in parallel, the first thing to do is to figure out why; do not just disable parallel tests! For functional tests it is reasonable to disable parallel tests."
  },
  "articles/docfx_getting_started.html": {
    "href": "articles/docfx_getting_started.html",
    "title": "Getting Started with docfx | docfx seed website",
    "keywords": "Getting Started with docfx Getting Started This is a seed. docfx is an API documentation generator for .NET, currently support C# and VB. It has the ability to extract triple slash comments out from your source code. What's more, it has syntax to link additional files to API to add additional remarks. docfx will scan your source code and your additional conceptual files and generate a complete HTML documentation website for you. docfx provides the flexibility for you to customize the website through templates. We currently have several embedded templates, including websites containing pure static html pages and also website managed by AngularJS. Click \"View Source\" for an API to route to the source code in GitHub (your API must be pushed to GitHub) docfx provide DNX version for cross platform use. docfx can be used within Visual Studio seamlessly. NOTE offical docfx.msbuild nuget package is now in pre-release version. You can also build your own with source code and use it locally. We support Docfx Flavored Markdown(DFM) for writing conceptual files. DFM is 100% compatible with Github Flavored Markdown(GFM) and add several new features including file inclusion, cross reference, and yaml header."
  },
  "articles/engineering_guidelines.html": {
    "href": "articles/engineering_guidelines.html",
    "title": "Engineering Guidelines | docfx seed website",
    "keywords": "Engineering Guidelines Basics Copyright header and license notice All source code files require the following exact header according to its language (please do not make any changes to it). extension: .cs // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. extension: .js // Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information. extension: .css /* Copyright (c) Microsoft Corporation. All Rights Reserved. Licensed under the MIT License. See License.txt in the project root for license information. */ extension: .tmpl, .tmpl.partial {{!Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information.}} External dependencies This refers to dependencies on projects (i.e. NuGet packages) outside of the docfx repo, and especially outside of Microsoft. Adding new dependencies require additional approval. Current approved dependencies are: Newtonsoft.Json Jint HtmlAgilityPack Nustache YamlDotNet Code reviews and checkins To help ensure that only the highest quality code makes its way into the project, please submit all your code changes to GitHub as PRs. This includes runtime code changes, unit test updates, and deployment scripts. For example, sending a PR for just an update to a unit test might seem like a waste of time but the unit tests are just as important as the product code and as such, reviewing changes to them is also just as important. The advantages are numerous: improving code quality, more visibility on changes and their potential impact, avoiding duplication of effort, and creating general awareness of progress being made in various areas. In general a PR should be signed off(using the \uD83D\uDC4D emoticon) by the Owner of that code. To commit the PR to the repo do not use the Big Green Button. Instead, do a typical push that you would use with Git (e.g. local pull, rebase, merge, push). Source Code Management Branch strategy In general: master has the code for the latest release on NuGet.org. (e.g. 1.0.0, 1.1.0) dev has the code that is being worked on but not yet released. This is the branch into which devs normally submit pull requests and merge changes into. We run daily CI towards dev branch and generate pre-release nuget package, e.g. 1.0.1-alpha-9-abcdefsd. hotfix has the code for fixing master bug after it is released. hotfix changes will be merged back to master and dev once it is verified. Solution and project folder structure and naming Solution files go in the repo root. The default entry point is All.sln. Every project also needs a project.json and a matching .xproj file. This project.json is the source of truth for a project's dependencies and configuration options. Solution need to contain solution folders that match the physical folder (src, test, tools, etc.). Assembly naming pattern The general naming pattern is Microsoft.DocAsCode.<area>.<subarea>. Unit tests We use xUnit.net for all unit testing. Coding Standards Please refer to C# Coding standards for detailed guideline for C# coding standards. TODO Template Coding standards TODO Template Preprocess JS Coding standards"
  },
  "articles/markdown.html": {
    "href": "articles/markdown.html",
    "title": "Markdown | docfx seed website",
    "keywords": "Markdown Markdown is a lightweight markup language with plain text formatting syntax. Docfx supports CommonMark compliant Markdown parsed through the Markdig parsing engine. Markdown Extensions Docfx supports additional markdown syntax that provide richer content. These syntax are specific to docfx and won't be rendered elsewhere like GitHub. To use a custom markdown extension: Use docfx as a NuGet library: <PackageReference Include=\"Microsoft.DocAsCode.App\" Version=\"2.61.0\" /> Configure the markdig markdown pipeline: var options = new BuildOptions { // Enable custom markdown extensions here ConfigureMarkdig = pipeline => pipeline.UseCitations(), } await Docset.Build(\"docfx.json\", options); Here is a list of markdown extensions provided by docfx by default. Alerts Alerts are block quotes that render with colors and icons that indicate the significance of the content. The following alert types are supported: > [!NOTE] > Information the user should notice even if skimming. > [!TIP] > Optional information to help a user be more successful. > [!IMPORTANT] > Essential information required for user success. > [!CAUTION] > Negative potential consequences of an action. > [!WARNING] > Dangerous certain consequences of an action. They look like this in rendered page: Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action. Image You can embed a image in your page by using the following Markdown syntax: ![ <alt-text> ]( <image-link> ) Example: ![alt-text](https://learn.microsoft.com/en-us/media/learn/not-found/learn-not-found-light-mode.png?branch=main) This will be rendered as: Include Markdown Files Where markdown files need to be repeated in multiple articles, you can use an include file. The includes feature replace the reference with the contents of the included file at build time. You can reuse a common text snippet within a sentence using inline include: Text before [!INCLUDE [<title>](<filepath>)] and after. Or reuse an entire Markdown file as a block, nested within a section of an article. Block include is on its own line: [!INCLUDE [<title>](<filepath>)] Where <title> is the name of the file and <filepath> is the relative path to the file. Included markdown files needs to be excluded from build, they are usually placed in the /includes folder. Code Snippet There are several ways to include code in an article. The code snippet syntax replaces code from another file: [!code-csharp[](Program.cs)] You can include selected lines from the code snippet using region or line range syntax: [!code-csharp[](Program.cs#region)] [!code-csharp[](Program.cs#L12-L16)] Code snippets are indicated by using a specific link syntax described as follows: [!code-<language>[](<filepath><query-options>)] Where <language> is the syntax highlighting language of the code and <filepath> is the relative path to the markdown file. Highlight Selected Lines Code Snippets typically include more code than necessary in order to provide context. It helps readability when you highlight the key lines that you're focusing on. To highlight key lines, use the highlight query options: [!code-csharp[](Program.cs?highlight=2,5-7,9-)] The example highlights lines 2, line 5 to 7 and lines 9 to the end of the file. using System; using Azure; using Azure.Storage; using Azure.Storage.Blobs; class Program { static void Main(string[] args) { // Define the connection string for the storage account string connectionString = \"DefaultEndpointsProtocol=https;AccountName=<your-account-name>;AccountKey=<your-account-key>;EndpointSuffix=core.windows.net\"; // Create a new BlobServiceClient using the connection string var blobServiceClient = new BlobServiceClient(connectionString); // Create a new container var container = blobServiceClient.CreateBlobContainer(\"mycontainer\"); // Upload a file to the container using (var fileStream = File.OpenRead(\"path/to/file.txt\")) { container.UploadBlob(\"file.txt\", fileStream); } // Download the file from the container var downloadedBlob = container.GetBlobClient(\"file.txt\").Download(); using (var fileStream = File.OpenWrite(\"path/to/downloaded-file.txt\")) { downloadedBlob.Value.Content.CopyTo(fileStream); } } } Tabs Tabs enable content that is multi-faceted. They allow sections of a document to contain variant content renderings and eliminates duplicate content. Here's an example of the tab experience: Linux Windows Content for Linux... Content for Windows... The above tab group was created with the following syntax: # [Linux](#tab/linux) Content for Linux... # [Windows](#tab/windows) Content for Windows... --- Tabs are indicated by using a specific link syntax within a Markdown header. The syntax can be described as follows: # [Tab Display Name](#tab/tab-id) A tab starts with a Markdown header, #, and is followed by a Markdown link [](). The text of the link will become the text of the tab header, displayed to the customer. In order for the header to be recognized as a tab, the link itself must start with #tab/ and be followed by an ID representing the content of the tab. The ID is used to sync all same-ID tabs across the page. Using the above example, when a user selects a tab with the link #tab/windows, all tabs with the link #tab/windows on the page will be selected. Dependent tabs It's possible to make the selection in one set of tabs dependent on the selection in another set of tabs. Here's an example of that in action: .NET .NET TypeScript TypeScript REST API .NET content for Linux... .NET content for Windows... TypeScript content for Linux... TypeScript content for Windows... REST API content, independent of platform... Notice how changing the Linux/Windows selection above changes the content in the .NET and TypeScript tabs. This is because the tab group defines two versions for each .NET and TypeScript, where the Windows/Linux selection above determines which version is shown for .NET/TypeScript. Here's the markup that shows how this is done: # [.NET](#tab/dotnet/linux) .NET content for Linux... # [.NET](#tab/dotnet/windows) .NET content for Windows... # [TypeScript](#tab/typescript/linux) TypeScript content for Linux... # [TypeScript](#tab/typescript/windows) TypeScript content for Windows... # [REST API](#tab/rest) REST API content, independent of platform... ---"
  },
  "index.html": {
    "href": "index.html",
    "title": "docfx-seed | docfx seed website",
    "keywords": "docfx-seed Description This is a sample docfx documentation project. It contains .NET source code and markdown files. docfx.json is the configuration file for running docfx. docfx will generate a static website as similar to http://docascode.github.io/docfx-seed. How to run Under Windows Download and unzip docfx.zip to run docfx.exe directly! Run docfx under current repo! Website will be generated under _site folder. Run any web hosting tool to host _site folder, e.g. docfx serve _site. Cross platform and use dnx As a prerequisite, you will need to install DNVM and DNX. ###Quick Start dnvm upgrade to get the latest dnvm. Add feed https://www.myget.org/F/aspnetrelease/api/v2/ to Nuget.config For Windows, the nuget config file is %AppData%\\NuGet\\NuGet.config. For Linux/OSX, the nuget config file is ~/.config/NuGet/NuGet.config. dnu commands install docfx to install docfx as a command Run docfx under current repo! Website will be generated under _site folder. Run any web hosting tool to host _site folder, e.g. docfx serve _site. Further information about docfx docfx is a tool to generate documentation towards .NET source code and markdown files. Please refer to docfx to get start. The docfx website itself is generated by docfx!"
  },
  "restapi/contacts.html": {
    "href": "restapi/contacts.html",
    "title": "Contacts | docfx seed website",
    "keywords": "Contacts | Improve this Doc View Source get contacts You can get a collection of contacts from your tenant. Required scope: Contacts.Read or Contacts.Write Request GET /contacts?api-version Parameters Name Type Value Notes *api-version string 1.6 The version of the Graph API to target. Beginning with version 1.5, the api-version string is represented in major.minor format. Prior releases were represented as date strings: '2013-11-08' and '2013-04-05'. Required. Responses Status Code Description Samples 200 OK. Indicates success. The results are returned in the response body. Mime type: application/json { \"odata.metadata\": \"https://graph.windows.net/myorganization/$metadata#directoryObjects/Microsoft.DirectoryServices.Contact\", \"value\": [ { \"odata.type\": \"Microsoft.DirectoryServices.Contact\", \"objectType\": \"Contact\", \"objectId\": \"31944231-fd52-4a7f-b32e-7902a01fddf9\", \"deletionTimestamp\": null, \"city\": null, \"companyName\": null, \"country\": null, \"department\": null, \"dirSyncEnabled\": null, \"displayName\": \"Marcus Breyer\", \"facsimileTelephoneNumber\": null, \"givenName\": \"Marcus\", \"jobTitle\": null, \"lastDirSyncTime\": null, \"mail\": \"Marcus@contoso.com\", \"mailNickname\": \"MarcusBreyer\", \"mobile\": null, \"physicalDeliveryOfficeName\": null, \"postalCode\": null, \"provisioningErrors\": [], \"proxyAddresses\": [ \"SMTP:Marcus@contoso.com\" ], \"sipProxyAddress\": null, \"state\": null, \"streetAddress\": null, \"surname\": \"Breyer\", \"telephoneNumber\": null }, { \"odata.type\": \"Microsoft.DirectoryServices.Contact\", \"objectType\": \"Contact\", \"objectId\": \"35110b16-360c-4c4a-93b2-03f065fabd93\", \"deletionTimestamp\": null, \"city\": null, \"companyName\": null, \"country\": null, \"department\": null, \"dirSyncEnabled\": null, \"displayName\": \"Yossi Ran\", \"facsimileTelephoneNumber\": null, \"givenName\": \"Yossi\", \"jobTitle\": null, \"lastDirSyncTime\": null, \"mail\": \"Yossi@contoso.com\", \"mailNickname\": \"YossiRan\", \"mobile\": null, \"physicalDeliveryOfficeName\": null, \"postalCode\": null, \"provisioningErrors\": [], \"proxyAddresses\": [ \"SMTP:Yossi@contoso.com\" ], \"sipProxyAddress\": null, \"state\": null, \"streetAddress\": null, \"surname\": \"Ran\", \"telephoneNumber\": null }, { \"odata.type\": \"Microsoft.DirectoryServices.Contact\", \"objectType\": \"Contact\", \"objectId\": \"7163f3b8-70c9-43d2-b9e1-4467ddaf087a\", \"deletionTimestamp\": null, \"city\": null, \"companyName\": null, \"country\": null, \"department\": null, \"dirSyncEnabled\": null, \"displayName\": \"Jeremy Nelson\", \"facsimileTelephoneNumber\": null, \"givenName\": \"Jeremy\", \"jobTitle\": null, \"lastDirSyncTime\": null, \"mail\": \"Jeremy@contoso.com\", \"mailNickname\": \"JeremyNelson\", \"mobile\": null, \"physicalDeliveryOfficeName\": null, \"postalCode\": null, \"provisioningErrors\": [], \"proxyAddresses\": [ \"SMTP:Jeremy@contoso.com\" ], \"sipProxyAddress\": null, \"state\": null, \"streetAddress\": null, \"surname\": \"Nelson\", \"telephoneNumber\": null }, { \"odata.type\": \"Microsoft.DirectoryServices.Contact\", \"objectType\": \"Contact\", \"objectId\": \"83234b5c-3a10-4108-8f36-39b1addadfdb\", \"deletionTimestamp\": null, \"city\": null, \"companyName\": null, \"country\": null, \"department\": null, \"dirSyncEnabled\": null, \"displayName\": \"David Strome\", \"facsimileTelephoneNumber\": null, \"givenName\": \"David\", \"jobTitle\": null, \"lastDirSyncTime\": null, \"mail\": \"David@contoso.com\", \"mailNickname\": \"DavidStrome\", \"mobile\": null, \"physicalDeliveryOfficeName\": null, \"postalCode\": null, \"provisioningErrors\": [], \"proxyAddresses\": [ \"SMTP:David@contoso.com\" ], \"sipProxyAddress\": null, \"state\": null, \"streetAddress\": null, \"surname\": \"Strome\", \"telephoneNumber\": null }, { \"odata.type\": \"Microsoft.DirectoryServices.Contact\", \"objectType\": \"Contact\", \"objectId\": \"8c1315ce-bf6f-4e26-b24f-c830606ef41c\", \"deletionTimestamp\": null, \"city\": null, \"companyName\": null, \"country\": null, \"department\": null, \"dirSyncEnabled\": null, \"displayName\": \"Holly Holt\", \"facsimileTelephoneNumber\": null, \"givenName\": \"Holly\", \"jobTitle\": null, \"lastDirSyncTime\": null, \"mail\": \"Holly@contoso.com\", \"mailNickname\": \"HollyHolt\", \"mobile\": null, \"physicalDeliveryOfficeName\": null, \"postalCode\": null, \"provisioningErrors\": [], \"proxyAddresses\": [ \"SMTP:Holly@contoso.com\" ], \"sipProxyAddress\": null, \"state\": null, \"streetAddress\": null, \"surname\": \"Holt\", \"telephoneNumber\": null } ] } | Improve this Doc View Source get contact by id Get a contact by using the object ID. Required scope: Contacts.Read or Contacts.Write Request GET /contacts/{object_id}?api-version Parameters Name Type Value Notes *object_id string 31944231-fd52-4a7f-b32e-7902a01fddf9 The object ID (GUID) of the target contact. *api-version string 1.6 Specifies the version of the Graph API to target. Beginning with version 1.5, the api-version string is represented in major.minor format. Prior releases were represented as date strings: '2013-11-08' and '2013-04-05'. Required. Responses Status Code Description Samples 200 OK. Indicates success. The contact is returned in the response body. Mime type: application/json { \"odata.metadata\": \"https://graph.windows.net/graphdir1.onmicrosoft.com/$metadata#directoryObjects/Microsoft.DirectoryServices.Contact/@Element\", \"odata.type\": \"Microsoft.DirectoryServices.Contact\", \"objectType\": \"Contact\", \"objectId\": \"31944231-fd52-4a7f-b32e-7902a01fddf9\", \"deletionTimestamp\": null, \"city\": null, \"companyName\": null, \"country\": null, \"department\": null, \"dirSyncEnabled\": null, \"displayName\": \"Marcus Breyer\", \"facsimileTelephoneNumber\": null, \"givenName\": \"Marcus\", \"jobTitle\": null, \"lastDirSyncTime\": null, \"mail\": \"Marcus@contoso.com\", \"mailNickname\": \"MarcusBreyer\", \"mobile\": null, \"physicalDeliveryOfficeName\": null, \"postalCode\": null, \"provisioningErrors\": [], \"proxyAddresses\": [ \"SMTP:Marcus@contoso.com\" ], \"sipProxyAddress\": null, \"state\": null, \"streetAddress\": null, \"surname\": \"Breyer\", \"telephoneNumber\": null } | Improve this Doc View Source update contact Change a contact's properties. Required scope: Contacts.Write Request PATCH /contacts/{object_id}?api-version Parameters Name Type Value Notes *object_id string 7163f3b8-70c9-43d2-b9e1-4467ddaf087a The object ID (GUID) of the target contact. *api-version string 1.6 The version of the Graph API to target. Beginning with version 1.5, the api-version string is represented in major.minor format. Prior releases were represented as date strings: '2013-11-08' and '2013-04-05'. Required. bodyparam this is request body, not real parameter Responses Status Code Description Samples 204 No Content. Indicates success. No response body is returned. | Improve this Doc View Source delete contact Delete a contact. Required scope: Contacts.Write Request DELETE /contacts/{object_id}[?api-version] Parameters Name Type Value Notes *object_id string 7163f3b8-70c9-43d2-b9e1-4467ddaf087a The object ID (GUID) of the target contact. api-version string 1.6 Specifies the version of the Graph API to target. Beginning with version 1.5, the api-version string is represented in major.minor format. Prior releases were represented as date strings: '2013-11-08' and '2013-04-05'. Required. Responses Status Code Description Samples 204 No Content. Indicates success. | Improve this Doc View Source get contact manager link Get a link to the contact's manager. Required scope: Contacts.Read or Contacts.Write Request GET /contacts/{object_id}/$links/manager?api-version Parameters Name Type Value Notes *object_id string 31944231-fd52-4a7f-b32e-7902a01fddf9 The object ID (GUID) of the target contact. *api-version string 1.6 The version of the Graph API to target. Beginning with version 1.5, the api-version string is represented in major.minor format. Prior releases were represented as date strings: '2013-11-08' and '2013-04-05'. Required. Responses Status Code Description Samples 200 OK. Indicates success. A link to the contact's manager is returned. Mime type: application/json { \"odata.metadata\": \"https://graph.windows.net/myorganization/$metadata#directoryObjects/$links/manager\", \"url\": \"https://graph.windows.net/myorganization/directoryObjects/35110b16-360c-4c4a-93b2-03f065fabd93/Microsoft.WindowsAzure.ActiveDirectory.Contact\" } 404 Not Found. The requested resource was not found. This can occur if the manager property is not currently set for the specified contact. It can also have other causes, for example, a bad domain. A code and associated message is returned with the error. Mime type: application/json { \"odata.error\": { \"code\": \"Request_ResourceNotFound\", \"message\": { \"lang\": \"en\", \"value\": \"Resource not found for the segment 'manager'.\" } } } | Improve this Doc View Source update contact manager Update the contact's manager Required scope: Contacts.Write Request PUT /contacts/{object_id}/$links/manager?api-version Parameters Name Type Value Notes *object_id string 31944231-fd52-4a7f-b32e-7902a01fddf9 The object ID (GUID) of the target contact. *api-version string 1.6 The version of the Graph API to target. Beginning with version 1.5, the api-version string is represented in major.minor format. Prior releases were represented as date strings: '2013-11-08' and '2013-04-05'. Required. *bodyparam The request body contains a single property that specifies the URL of the user or contact to add as manager. Responses Status Code Description Samples 204 No Content. Indicates success. No response body is returned. | Improve this Doc View Source delete contact manager by id Delete the contact's manager. Required scope: Contacts.Write Request DELETE /contacts/{object_id}/$links/manager?api-version Parameters Name Type Value Notes *object_id string 31944231-fd52-4a7f-b32e-7902a01fddf9 The object ID (GUID) of the target contact. *api-version string 1.6 The version of the Graph API to target. Beginning with version 1.5, the api-version string is represented in major.minor format. Prior releases were represented as date strings: '2013-11-08' and '2013-04-05'. Required. Responses Status Code Description Samples 204 No Content. Indicates success. N response body is returned. | Improve this Doc View Source get contact direct reports links Get a links to the contact's direct reports. Required scope: Contacts.Read or Contacts.Write Request GET /contacts/{object_id}/$links/directReports?api-version Parameters Name Type Value Notes *object_id string 31944231-fd52-4a7f-b32e-7902a01fddf9 The object ID (GUID) of the target contact. *api-version string 1.6 The version of the Graph API to target. Beginning with version 1.5, the api-version string is represented in major.minor format. Prior releases were represented as date strings: '2013-11-08' and '2013-04-05'. Required. Responses Status Code Description Samples 200 OK. Indicates success. One or more direct reports are returned. Mime type: application/json { \"odata.metadata\": \"https://graph.windows.net/myorganization/$metadata#directoryObjects/$links/directReports\", \"value\": [ { \"url\": \"https://graph.windows.net/myorganization/directoryObjects/8c1315ce-bf6f-4e26-b24f-c830606ef41c/Microsoft.DirectoryServices.Contact\" } ] } | Improve this Doc View Source get contact memberOf links Get a links to the contact's direct group and directory role memberships. Required scope: Contacts.Read or Contacts.Write Request GET /contacts/{object_id}/$links/memberOf?api-version Parameters Name Type Value Notes *object_id string 31944231-fd52-4a7f-b32e-7902a01fddf9 The object ID (GUID) of the target contact. *api-version string 1.6 The version of the Graph API to target. Beginning with version 1.5, the api-version string is represented in major.minor format. Prior releases were represented as date strings: '2013-11-08' and '2013-04-05'. Required. Responses Status Code Description Samples 200 OK. Indicates success. One or more groups and/or directory roles are returned. Mime type: application/json { \"odata.metadata\": \"https://graph.windows.net/myorganization/$metadata#directoryObjects/$links/memberOf\", \"value\": [ { \"url\": \"https://graph.windows.net/myorganization/directoryObjects/12345678-b942-47c9-a10e-a4bee353ce60/Microsoft.DirectoryServices.Group\" } ] }"
  },
  "restapi/petstore.html": {
    "href": "restapi/petstore.html",
    "title": "Pet Store APIs | docfx seed website",
    "keywords": "Swagger Petstore Describe APIs in Pet Store pet Description for pet tag | Improve this Doc View Source addPet Add a new pet to the store Request POST /pet Parameters Name Type Value Notes *body Pet object that needs to be added to the store Responses Status Code Description Samples 405 Invalid input NOTE: Add pet only when you needs. | Improve this Doc View Source updatePet Update an existing pet Request PUT /pet Parameters Name Type Value Notes *body Pet object that needs to be added to the store Responses Status Code Description Samples 400 Invalid ID supplied 404 Pet not found 405 Validation exception | Improve this Doc View Source findPetsByStatus Finds Pets by status Multiple status values can be provided with comma separated strings Request GET /pet/findByStatus?status Parameters Name Type Value Notes *status array Status values that need to be considered for filter Responses Status Code Description Samples 200 successful operation 400 Invalid status value | Improve this Doc View Source findPetsByTags Finds Pets by tags Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. Request GET /pet/findByTags?tags Parameters Name Type Value Notes *tags array Tags to filter by Responses Status Code Description Samples 200 successful operation 400 Invalid tag value | Improve this Doc View Source deletePet Deletes a pet Request DELETE /pet/{petId} Parameters Name Type Value Notes api_key string *petId integer Pet id to delete Responses Status Code Description Samples 400 Invalid ID supplied 404 Pet not found | Improve this Doc View Source getPetById Find pet by ID Returns a single pet Request GET /pet/{petId} Parameters Name Type Value Notes *petId integer ID of pet to return Responses Status Code Description Samples 200 successful operation 400 Invalid ID supplied 404 Pet not found | Improve this Doc View Source updatePetWithForm Updates a pet in the store with form data Request POST /pet/{petId} Parameters Name Type Value Notes *petId integer ID of pet that needs to be updated name string Updated name of the pet status string Updated status of the pet Responses Status Code Description Samples 405 Invalid input | Improve this Doc View Source uploadFile uploads an image Request POST /pet/{petId}/uploadImage Parameters Name Type Value Notes *petId integer ID of pet to update additionalMetadata string Additional data to pass to server file file file to upload Responses Status Code Description Samples 200 successful operation store Access to Petstore orders Additional description for store tag | Improve this Doc View Source addPet Add a new pet to the store Request POST /pet Parameters Name Type Value Notes *body Pet object that needs to be added to the store Responses Status Code Description Samples 405 Invalid input NOTE: Add pet only when you needs. | Improve this Doc View Source getInventory Returns pet inventories by status Returns a map of status codes to quantities Request GET /store/inventory Responses Status Code Description Samples 200 successful operation | Improve this Doc View Source placeOrder Place an order for a pet Request POST /store/order Parameters Name Type Value Notes *body order placed for purchasing the pet Responses Status Code Description Samples 200 successful operation 400 Invalid Order | Improve this Doc View Source deleteOrder Delete purchase order by ID For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors Request DELETE /store/order/{orderId} Parameters Name Type Value Notes *orderId integer ID of the order that needs to be deleted Responses Status Code Description Samples 400 Invalid ID supplied 404 Order not found | Improve this Doc View Source getOrderById Find purchase order by ID For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions Request GET /store/order/{orderId} Parameters Name Type Value Notes *orderId integer ID of pet that needs to be fetched Responses Status Code Description Samples 200 successful operation 400 Invalid ID supplied 404 Order not found user Operations about user | Improve this Doc View Source createUser Create user This can only be done by the logged in user. Request POST /user Parameters Name Type Value Notes *body Created user object Responses Status Code Description Samples default successful operation | Improve this Doc View Source createUsersWithArrayInput Creates list of users with given input array Request POST /user/createWithArray Parameters Name Type Value Notes *body List of user object Responses Status Code Description Samples default successful operation | Improve this Doc View Source createUsersWithListInput Creates list of users with given input array Request POST /user/createWithList Parameters Name Type Value Notes *body List of user object Responses Status Code Description Samples default successful operation | Improve this Doc View Source loginUser Logs user into the system Request GET /user/login?username&password Parameters Name Type Value Notes *username string The user name for login *password string The password for login in clear text Responses Status Code Description Samples 200 successful operation 400 Invalid username/password supplied | Improve this Doc View Source logoutUser Logs out current logged in user session Request GET /user/logout Responses Status Code Description Samples default successful operation | Improve this Doc View Source deleteUser Delete user This can only be done by the logged in user. Request DELETE /user/{username} Parameters Name Type Value Notes *username string The name that needs to be deleted Responses Status Code Description Samples 400 Invalid username supplied 404 User not found | Improve this Doc View Source getUserByName Get user by user name Request GET /user/{username} Parameters Name Type Value Notes *username string The name that needs to be fetched. Use user1 for testing. Responses Status Code Description Samples 200 successful operation 400 Invalid username supplied 404 User not found Other APIs | Improve this Doc View Source updateUser Updated user This can only be done by the logged in user. Request PUT /user/{username} Parameters Name Type Value Notes *username string name that need to be updated *body Updated user object Responses Status Code Description Samples 400 Invalid user supplied 404 User not found See Alsos See other REST APIs: Contacts API"
  }
}