#YamlMime:PythonReference
api_name: []
items:
- _type: class
  children:
  - cntk.core.Value.create
  - cntk.core.Value.data
  - cntk.core.Value.mask
  - cntk.core.Value.one_hot
  - cntk.core.Value.shape
  class: cntk.core.Value
  fullName: cntk.core.Value
  langs:
  - python
  module: cntk.core
  name: Value
  source:
    id: Value
    path: cntk/core.py
    remote:
      branch: master
      path: cntk/core.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 182
  summary: 'Bases: @cntk.cntk_py.Value

    Internal representation of minibatch data.





    '
  syntax:
    parameters:
    - description: shape of the value
      id: shape
      type:
      - tuple
    - description: the value to be converted
      id: value
      type:
      - None or value that can be cast to NumPy array
    - description: data type (np.float32 or np.float64)
      id: dtype
    - description: "batch input for *var*. It can be:\n\n   * a pure Python structure\
        \ (list of lists, ...),\n\n   * a list of NumPy arrays or SciPy sparse CSR\
        \ matrices\n\n   * a @cntk.core.Value object (e.g. returned by `one_hot()`)"
      id: batch
    - description: if None, every sequence is treated as a new sequence. Otherwise,
        it is interpreted as a list of Booleans that tell whether a sequence is a
        new sequence (*True*) or a continuation of the sequence in the same slot of
        the previous minibatch (*False*)
      id: seq_starts
      type:
      - list of bools or None
    - description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor
  type: Class
  uid: cntk.core.Value
- _type: method
  class: cntk.core.Value
  fullName: cntk.core.Value.create
  langs:
  - python
  module: cntk.core
  name: create
  source:
    id: create
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 272
  summary: Creates a @cntk.core.Value object.
  syntax:
    parameters:
    - description: variable into which `data` is passed
      id: var
      type:
      - Variable
    - description: "data for *var*. It can be:\n\n   * a single NumPy array denoting\
        \ the full minibatch\n\n   * a list of NumPy arrays or SciPy sparse CSR matrices\n\
        \n   * a single NumPy array denoting one parameter or constant"
      id: data
    - description: if None, every sequence is treated as a new sequence. Otherwise,
        it is interpreted as a list of Booleans that tell whether a sequence is a
        new sequence (*True*) or a continuation of the sequence in the same slot of
        the previous minibatch (*False*)
      id: seq_starts
      type:
      - list of bools or None
    - description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor, default None
    - description: whether the data is read only
      id: read_only
      type:
      - bool, default False
    return:
      type:
      - type1
      - type2
      - type3
      description: '@cntk.core.Value object.'
  type: Method
  uid: cntk.core.Value.create
- _type: attribute
  class: cntk.core.Value
  fullName: cntk.core.Value.data
  langs:
  - python
  module: cntk.core
  name: data
  source:
    id: data
    path: null
    remote:
      branch: master
      path: null
      repo: https://github.com/Microsoft/CNTK
    startLine: null
  summary: Retrieves the underlying `NDArrayView` instance.
  syntax: {}
  type: Property
  uid: cntk.core.Value.data
- _type: attribute
  class: cntk.core.Value
  fullName: cntk.core.Value.mask
  langs:
  - python
  module: cntk.core
  name: mask
  source:
    id: mask
    path: null
    remote:
      branch: master
      path: null
      repo: https://github.com/Microsoft/CNTK
    startLine: null
  summary: "The mask matrix of this value. Each row denotes a sequence with its elements\
    \ describing the mask of the element:\n* 2: beginning of sequence (e.g. an LSTM\
    \ would be reset)\n\n   * 1: valid element\n\n   * 0: invalid element\n-[ Example\
    \ ]-\nA mask of `[[2, 1, 1], [1, 1, 0]]` describes a batch of two sequences. The\
    \ first has three elements, of which the first element (2) signals the beginning\
    \ of a sequence. The second sequence has two elements (last element marked 'invalid'\
    \ by '0'). As it starts with (1), it is a continuation of the 2nd sequence in\
    \ the previous minibatch."
  syntax: {}
  type: Property
  uid: cntk.core.Value.mask
- _type: method
  class: cntk.core.Value
  fullName: cntk.core.Value.one_hot
  langs:
  - python
  module: cntk.core
  name: one_hot
  source:
    id: one_hot
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 365
  summary: "Converts `batch` into a `Value` object of `dtype` such that the integer\
    \ data in `batch` is interpreted as the indices representing one-hot vectors.\n\
    -[ Example ]-\n>>> num_classes = 6\n>>> sparse_indices = [[1,5],[4]]\n>>> i0 =\
    \ C.input_variable(shape=num_classes, is_sparse=True)\n>>> z = C.times(i0, np.eye(num_classes))\n\
    >>> value = C.one_hot(sparse_indices, num_classes)\n>>> z.eval({i0: value})\n\
    [array([[ 0.,  1.,  0.,  0.,  0.,  0.],\n        [ 0.,  0.,  0.,  0.,  0.,  1.]],\
    \ dtype=float32),\n array([[ 0.,  0.,  0.,  0.,  1.,  0.]], dtype=float32)]\n\
    <BLANKLINE>\n>>> num_classes = 6\n>>> sample_shape = (2, num_classes)\n>>> sparse_indices\
    \ = [[1,5,3,2],[4,1]]\n>>> i0 = C.input_variable(shape=sample_shape, is_sparse=True)\n\
    >>> z = C.times(i0, np.eye(num_classes))\n>>> value = C.one_hot(sparse_indices,\
    \ sample_shape)\n>>> z.eval({i0: value})\n[array([[[ 0.,  1.,  0.,  0.,  0., \
    \ 0.],\n         [ 0.,  0.,  0.,  0.,  0.,  1.]],\n        [[ 0.,  0.,  0.,  1.,\
    \  0.,  0.],\n         [ 0.,  0.,  1.,  0.,  0.,  0.]]], dtype=float32),\n array([[[\
    \ 0.,  0.,  0.,  0.,  1.,  0.],\n         [ 0.,  1.,  0.,  0.,  0.,  0.]]], dtype=float32)]"
  syntax:
    parameters:
    - description: batch input data of indices
      id: batch
      type:
      - list of lists of integers
    - description: number of classes or shape of each sample whose trailing axis is
        one_hot
      id: sample_shape
      type:
      - integer or tuple
    - description: data type
      id: dtype
      type:
      - np.float32, np.float64, default None
    - description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor, default None
    return:
      description: '`batch` converted into a `Value` object that can be passed to
        the forward or eval function.'
  type: Method
  uid: cntk.core.Value.one_hot
- _type: attribute
  class: cntk.core.Value
  fullName: cntk.core.Value.shape
  langs:
  - python
  module: cntk.core
  name: shape
  source:
    id: shape
    path: null
    remote:
      branch: master
      path: null
      repo: https://github.com/Microsoft/CNTK
    startLine: null
  summary: The rectangular shape of this value. I.e., if this value has sequences
    of varying lengths, the shape will have the max sequence length in the sequence
    dimension.
  syntax: {}
  type: Property
  uid: cntk.core.Value.shape
references:
- fullName: cntk.core.Value.create
  isExternal: false
  name: create
  parent: cntk.core.Value
  uid: cntk.core.Value.create
- fullName: cntk.core.Value.data
  isExternal: false
  name: data
  parent: cntk.core.Value
  uid: cntk.core.Value.data
- fullName: cntk.core.Value.mask
  isExternal: false
  name: mask
  parent: cntk.core.Value
  uid: cntk.core.Value.mask
- fullName: cntk.core.Value.one_hot
  isExternal: false
  name: one_hot
  parent: cntk.core.Value
  uid: cntk.core.Value.one_hot
- fullName: cntk.core.Value.shape
  isExternal: false
  name: shape
  parent: cntk.core.Value
  uid: cntk.core.Value.shape
