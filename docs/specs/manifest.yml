---
# Publish manifest contains files to publish
inputs:
  docfx.yml:
  docs/a.md:
  docs/TOC.md:
  docs/folder/b~$.md:
  docs/index.md:
outputs:
  docs/a.json:
  docs/toc.json:
  docs/folder/b~$.json:
  docs/index.json:
  .publish.json: |
    {
      "files": [
        { "url": "/docs/a", "path": "docs/a.json" },
        { "url": "/docs/folder/b~$", "path": "docs/folder/b~$.json" },
        { "url": "/docs/", "path": "docs/index.json" },
        { "url": "/docs/toc.json", "path": "docs/toc.json" }
      ]
    }
---
# Publish manifest path is source relative path when copyResources is set to false
inputs:
  docfx.yml: |
    files: '**'
    output:
      copyResources: false
  a.png:
outputs:
  .publish.json: |
    {
      "files": [
        { "url": "/a.png", "path": "../a.png" }
      ]
    }
---
# Publish manifest output contains file hash
repos:
  https://docs.com/output-hash:
  - files:
      docfx.yml: |
        files: '**'
        redirections:
          c.md: "/"
      a.md:
      b.png:
      TOC.md:
outputs:
  a.json:
  b.png:
  toc.json:
  .publish.json: |
    {
      "files": [
        { "url": "/c", "!hash": null },
        { "url": "/a", "hash": "bfbbe0080a162c951c3fb9b2349be9aa173edac1" },
        { "url": "/b.png", "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709" },
        { "url": "/toc.json", "hash": "ad75fac1a867d604c1df88742ed36d56aecd1926" }
      ]
    }
---
# Redirections outputs redirect_url to .publish.json, but does not have output file
inputs:
  docfx.yml: |
    redirections:
      a.md: /b
outputs:
  .publish.json: |
    {
      "files": [{ "url": "/a", "redirect_url": "/b", "!path": null, "!hash": null }]
    }
---
# Publish manifest for articles contains custom metadata
inputs:
  docfx.yml:
  a.md: |
    ---
    ms.my: 1
    ---
outputs:
  a.json:
  .publish.json: |
    {
      "files": [{ "url": "/a", "ms.my": 1 }]
    }
---
# Manifest contains Toc dependencies
inputs:
  docfx.yml:
  docs/a.md:
  docs/TOC.md: |
    # [file reference](a.md)
outputs:
  docs/a.json:
  docs/toc.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/TOC.md":[  
             {  
                "source":"docs/a.md",
                "type":"link"
             }
          ]
       }
    }
---
# Manifest contains Inclusion dependencies
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md:
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/a.md":[  
             {  
                "source":"docs/b.md",
                "type":"inclusion"
             }
          ]
       }
    }
---
# Manifest contains link dependencies
inputs:
  docfx.yml:
  docs/a.md: Link to [b](b.md)
  docs/b.md:
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/a.md":[  
             {  
                "source":"docs/b.md",
                "type":"link"
             }
          ]
       }
    }
---
# Manifest contains nested token or codesnippet dependencies
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)
  docs/b.md: |
    Link to [c](c.md)
    b [!INCLUDE[](c.md)
  docs/c.md:
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/a.md":[  
             {  
                "source":"docs/c.md",
                "type":"inclusion"
             },
             {  
                "source":"docs/c.md",
                "type":"link"
             },
             {  
                "source":"docs/b.md",
                "type":"inclusion"
             }
          ],
          "docs/b.md":[  
             {  
                "source":"docs/c.md",
                "type":"inclusion"
             },
             {  
                "source":"docs/c.md",
                "type":"link"
             }
          ]
       }
    }
---
# Manifest contains nested TOC dependencies
inputs:
  docfx.yml:
  docs/TOC.md: |
    # [a](a/TOC.md)
  docs/a/TOC.md: |
    # [b](b.md)
  docs/a/b.md:
outputs:
  docs/toc.json:
  docs/a/b.json:
  .dependencymap.json: |
    {  
       "dependencies":{
          "docs/TOC.md":[
             {  
                "source":"docs/a/TOC.md",
                "type":"tocInclusion"
             }
          ],
          "docs/a/TOC.md":[  
             {  
                "source":"docs/a/b.md",
                "type":"link"
             }
          ]
       }
    }
---
# Manifest inclusion circular reference
inputs:
  docfx.yml:
  docs/a.md: |
    a [!INCLUDE[](b.md)
  docs/b.md: |
    b [!INCLUDE[](a.md)
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/b.md":[  
             {  
                "source":"docs/b.md",
                "type":"inclusion"
             },
             {  
                "source":"docs/a.md",
                "type":"inclusion"
             }
          ],
          "docs/a.md":[  
             {  
                "source":"docs/b.md",
                "type":"inclusion"
             },
             {  
                "source":"docs/a.md",
                "type":"inclusion"
             }
          ]
       }
    }
  build.log: |
    ["warning","circular-reference","Found circular reference: docs/b.md --> docs/a.md --> docs/b.md","docs/b.md"]
    ["warning","circular-reference","Found circular reference: docs/a.md --> docs/b.md --> docs/a.md","docs/a.md"]
---
# Manifest link circular reference
inputs:
  docfx.yml:
  docs/a.md: |
    Link to [b](b.md)
    # bookmark
  docs/b.md: |
    Link to [a](a.md#bookmark)
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/a.md":[  
             {  
                "source":"docs/b.md",
                "type":"link"
             }
          ],
          "docs/b.md":[  
             {  
                "source":"docs/a.md",
                "type":"bookmark"
             }
          ]
       }
    }
---
# Ignores link to self, treat empty bookmark as link
inputs:
  docfx.yml:
  docs/a.md: |
    # bookmark
    Link to [a](#bookmark) and [b](b.md#)
  docs/b.md:
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/a.md":[  
             {  
                "source":"docs/b.md",
                "type":"link"
             }
          ]
       }
    }
---
# Manifest does not include files with errors
inputs:
  docfx.yml: |
    rules:
      link-is-empty: error
  docs/a.md: |
    a []()
outputs:
  .publish.json: |
    { "!files": null }
  build.log: |
    ["error","link-is-empty","Link is empty","docs/a.md"]
---
# inclusion chain
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b [!INCLUDE[](c.md)]
  docs/c.md: c
outputs:
  docs/a.json: |
    { "content": "<p>a b c</p>" }
  docs/b.json: |
    { "content": "<p>b c</p>" }
  docs/c.json: |
    { "content": "<p>c</p>" }
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        {
          "source": "docs/c.md",
          "type": "inclusion"
        }
      ],
      "docs/a.md": [
        {
          "source": "docs/c.md",
          "type": "inclusion"
        },
        {
          "source": "docs/b.md",
          "type": "inclusion"
        }
      ]
    }
   }
---
# link chain
inputs:
  docfx.yml:
  docs/a.md: a [b](b.md)
  docs/b.md: b [c](c.md)
  docs/c.md: c
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json: |
    { "content": "<p>c</p>" }
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        {
          "source": "docs/c.md",
          "type": "link"
        }
      ],
      "docs/a.md": [
        {
          "source": "docs/b.md",
          "type": "link"
        }
      ]
    }
   }
---
# mixed chain a include b, b link c
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b [c](c.md)
  docs/c.md: c
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json: |
    { "content": "<p>c</p>" }
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        {
          "source": "docs/c.md",
          "type": "link"
        }
      ],
      "docs/a.md": [
        {
          "source": "docs/c.md",
          "type": "link"
        },
        {
          "source": "docs/b.md",
          "type": "inclusion"
        }
      ]
    }
   }
---
# mixed chain a link b, b include c
inputs:
  docfx.yml:
  docs/a.md: a [b](b.md)
  docs/b.md: b [!INCLUDE[](c.md)]
  docs/c.md: c
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json: |
    { "content": "<p>c</p>" }
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        {
          "source": "docs/c.md",
          "type": "inclusion"
        }
      ],
      "docs/a.md": [
        {
          "source": "docs/b.md",
          "type": "link"
        }
      ]
    }
   }
---
# circular chain
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b [a](a.md)
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        {
          "source": "docs/a.md",
          "type": "link"
        }
      ],
      "docs/a.md": [
        {
          "source": "docs/b.md",
          "type": "inclusion"
        },
        {
          "source": "docs/a.md",
          "type": "link"
        }
      ]
    }
   }
---
# circular chain a include b include c include d link b
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b [!INCLUDE[](c.md)]
  docs/c.md: c [!INCLUDE[](d.md)]
  docs/d.md: d [b](b.md)
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
  docs/d.json:
  .dependencymap.json: |
    dependencies:
      docs/d.md:
        - source: docs/b.md
          type: link
      docs/c.md:
        - source: docs/d.md
          type: inclusion
        - source: docs/b.md
          type: link
      docs/b.md:
        - source: docs/d.md
          type: inclusion
        - source: docs/c.md
          type: inclusion
        - source: docs/b.md
          type: link
      docs/a.md:
        - source: docs/d.md
          type: inclusion
        - source: docs/c.md
          type: inclusion
        - source: docs/b.md
          type: inclusion
        - source: docs/b.md
          type: link
---
