---
# Restore dependencies with their children
repos:
  https://docs.com/restore/a:
    - files:
        docs/a.md: a2
    - files:
        docs/a.md: a1
inputs:
  docfx.yml: |
    dependencies:
      docfx-test-dependencies1: https://docs.com/restore/a
      docfx-test-dependencies2: https://docs.com/restore/a#b6720c99618c1d080f48da04922fc9756e93818c
  docs/a.md: |
    [link to 1](~/docfx-test-dependencies1/docs/a.md)
    [!include[include to 2](~/docfx-test-dependencies2/docs/a.md)]
outputs:
  .errors.log: |
    {"message_severity":"warning","code":"link-out-of-scope","message":"File 'docfx-test-dependencies1/docs/a.md [docfx-test-dependencies1]' referenced by link '~/docfx-test-dependencies1/docs/a.md' will not be built because it is not included in build scope","file":"docs/a.md","line":1,"column":1}
  docs/a.json: |
    {"conceptual":"<p><a href=\"%7E/docfx-test-dependencies1/docs/a.md\">link to 1</a></p>\n<p>a1</p>\n"}
---
# Restore dependencies azure repos with their children
repos:
  https://docascode.visualstudio.com/project/_git/a:
    - files:
        docs/a.md: a2
    - files:
        docs/a.md: a1
inputs:
  docfx.yml: |
    dependencies:
      docfx-test-dependencies1: https://docascode.visualstudio.com/project/_git/a
      docfx-test-dependencies2: https://docascode.visualstudio.com/project/_git/a#b6720c99618c
  docs/a.md: |
    [link to 1](~/docfx-test-dependencies1/docs/a.md)
    [!include[include to 2](~/docfx-test-dependencies2/docs/a.md)]
outputs:
  .errors.log: |
    {"message_severity":"warning","code":"link-out-of-scope","message":"File 'docfx-test-dependencies1/docs/a.md [docfx-test-dependencies1]' referenced by link '~/docfx-test-dependencies1/docs/a.md' will not be built because it is not included in build scope","file":"docs/a.md","line":1,"column":1}
  docs/a.json: |
    {"conceptual":"<p><a href=\"%7E/docfx-test-dependencies1/docs/a.md\">link to 1</a></p>\n<p>a1</p>\n"}
---
# Template could be a local folder
inputs:
  docfx.yml: |
    files: '*'
    template: _template
  a.md: |
    >[!NOTE]
    >note
  _template/ContentTemplate/token.json: |
    { "note": "<p>my note</p>" }
outputs:
  a.json: |
    { "conceptual": "<div class=\"NOTE\"><p>my note</p><p>note</p></div>" }
---
# Restore urls
inputs:
  docfx.yml: |
    xref: https://raw.githubusercontent.com/docascode/docfx-test-dependencies/xref/xrefmap.json
  a.md: '@System.String'
outputs:
  a.json: |
    { "conceptual": "<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\">String</a></p>" }
---
# Restore urls with extends
inputs:
  docfx.yml: |
    extend: https://raw.githubusercontent.com/docascode/docfx-test-dependencies/xref/extend.yml
  a.md: '@System.String'
outputs:
  a.json: |
    { "conceptual": "<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\">String</a></p>" }
---
# Restore empty files
inputs:
  docfx.yml: |
    extend: config.json
  config.json:
  a.md:
outputs:
  .errors.log: |
    {"message_severity":"error","code":"json-syntax-error","message":"*","file":"config.json"}
---
# Restore dependencies with extends
repos:
  https://github.com/restore/d:
    - files:
        docs/a.md: d
inputs:
  docfx.yml: |
    extend: https://raw.githubusercontent.com/docascode/docfx-test-dependencies/extend-test-2/extend3.yml
  docs/a.md: |
    [link to 1](~/docfx-test-dependencies1/docs/a.md)
    [!include[include to 2](~/docfx-test-dependencies2/docs/a.md)]
outputs:
  .errors.log: |
    {"message_severity":"warning","code":"link-out-of-scope","message":"File 'docfx-test-dependencies1/docs/a.md [docfx-test-dependencies1]' referenced by link '~/docfx-test-dependencies1/docs/a.md' will not be built because it is not included in build scope","file":"docs/a.md","line":1,"column":1}
  docs/a.json: |
    {"conceptual":"<p><a href=\"%7E/docfx-test-dependencies1/docs/a.md\">link to 1</a></p>\n<p>d</p>\n"}
---
# Show error when download failed
inputs:
  docfx.yml: |
    extend: https://this-url-does-not-exit.com/this-is-a-bad-url
outputs:
  .errors.log: |
    {"message_severity":"error","code":"download-failed","message":"Download failed for file 'https://this-url-does-not-exit.com/this-is-a-bad-url*'. Try closing and reopening the PR. If you get this Error again, file an issue."}
---
# Show error when git clone failed
inputs:
  docfx.yml: |
    dependencies:
      error: https://github.com/docascode/docfx-test-dependencies#bad-branch
outputs:
  .errors.log: |
    {"message_severity":"error","code":"committish-not-found","message":"Can't find branch, tag, or commit 'bad-branch' for repo https://github.com/docascode/docfx-test-dependencies."}
---
# Show error when dependent repo can't be found
noRestore: true
inputs:
  docfx.yml: |
    dependencies:
      dep: https://github.com/docascode/docfx-test-dependencies#bad-branch
  docs/a.md: |
    [test](dep/abc)
outputs:
  .errors.log: |
    {"message_severity":"error","code":"need-restore","message":"Cannot find dependency 'https://github.com/docascode/docfx-test-dependencies#bad-branch', did you forget to run `docfx restore`?"}
---
# Show error when dependent URL can't be found
noRestore: true
inputs:
  docfx.yml: |
    monikerDefinition: https://docs.microsoft.com/bad-url
outputs:
  .errors.log: |
    {"message_severity":"error","code":"need-restore","message":"Cannot find dependency 'https://docs.microsoft.com/bad-url', did you forget to run `docfx restore`?"}
---
# Show error when dependent file can't be found
inputs:
  docfx.yml: |
    monikerDefinition: a.json
outputs:
  .errors.log: |
    {"message_severity":"error","code":"file-not-found","message":"*","file":"docfx.yml","line":1,"column":20}
---
# Restore long path repo
inputs:
  docfx.yml: |
    dependencies:
      dep: https://github.com/docascode/docfx-test-dependencies#restore/long-path
  docs/test.md: 
    "[!INCLUDE[](~/dep/for-long-path-file-test-for-long-path-file-test-for-long-path-file-test-for-long-path-\
    file-test-for-long-path-file-test-for-long-path-file-test-for-long-path-file-test-for-long-path-file-tes\
    t-for-l/for-long-path-file-test-for-long-path-file-test-for-long-path-file-test-for-long-path-file-test-\
    for-long-path-file-test-for-long-path-file-test-for-long-path-file-test-for-long-path-file-test-for-long\
    -path-file-test-for-long-path-file-test-fo/for-long-path-test.md)]"
outputs:
  docs/test.json: |
    {
      "conceptual": "<p>for long file path test.</p>"
    }
---
# Restored repo should be always retrieved
repos:
  https://docs.com/restore/x#master1:
    - files:
        docfx.yml: |
          dependencies:
            restore-child1: https://docs.com/restore/x#child
            restore-child2: https://docs.com/restore/x#child-a
        docs/a.md: |
          [!include[](~/restore-child1/docs/child.md)]
  https://docs.com/restore/x#child:
    - files:
        docs/child.md:
  https://docs.com/restore/x#child-a:
    - files:
        docs/childx.md:
outputs:
  docs/a.json:
---
# build content in dependency repository
# content in dependency repository:
#   1. by default will not be built
#   2. will be built when:
#      1. explicitly turn on the inScope flag
#      2. specify the dependency name in `build scope`
repos:
  https://docs.com/crrcontent/a:
    - files:
        docfx.yml: |
          files:
            - "docs/**/*"
            - "crrb/folder/**/*"
          dependencies:
            crrb:
              url: https://docs.com/crrcontent/b
              branch: master
              includeInBuild: true
            crrc: https://docs.com/crrcontent/c
        docs/a.md:
  https://docs.com/crrcontent/b:
    - files:
        folder/b.md:
        folder/image.png: xxx
  https://docs.com/crrcontent/c:
    - files:
        c.md:
outputs:
  docs/a.json:
  crrb/folder/b.json:
  crrb/folder/image.png: xxx
---
# apply routes to the files in dependency repository
# if no route applied, crr files will be built to `{dependencyName}/` folder
repos:
  https://docs.com/crrcontent/1:
    - files:
        docfx.yml: |
          files:
            - "crrb/**/*"
            - "crrc/**/*"
          routes:
            "crrb/": "xyz"
          dependencies:
            crrb:
              url: https://docs.com/crrcontent/2
              branch: master
              includeInBuild: true
            crrc:
              url: https://docs.com/crrcontent/3
              includeInBuild: true
  https://docs.com/crrcontent/2:
    - files:
        b.md:
  https://docs.com/crrcontent/3:
    - files:
        c.md:
outputs:
  xyz/b.json:
  crrc/c.json:
---
# apply metadata to the files in dependency repository
repos:
  https://docs.com/crrmetadata/1:
    - files:
        docfx.yml: |
          fileMetadata:
            key:
              docs/**/*: value
              crrb/folder/**/*: another value
          dependencies:
            crrb:
              url: https://docs.com/crrmetadata/2
              branch: master
              includeInBuild: true
        docs/b.md:
  https://docs.com/crrmetadata/2:
    - files:
        folder/b.md:
outputs:
  docs/b.json: |
    {"key": "value"}
  crrb/folder/b.json: |
    {"key": "another value"}
---
# build crr file with moniker
repos:
  https://docs.com/crrmoniker/1:
    - files:
        docfx.yml: |
          monikerRange:
            'docs/**': '>= netcore-1.0'
            'crrb/folder/**': '>= netcore-1.1'
          dependencies:
            crrb:
              url: https://docs.com/crrmoniker/2
              branch: master
              includeInBuild: true
          monikerDefinition: monikerDefinition.json
        docs/b.md:
        monikerDefinition.json: |
          {
            "monikers": [
              { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
              { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
            ]
          }
  https://docs.com/crrmoniker/2:
    - files:
        folder/b.md:
outputs:
  218c13d0/crrb/folder/b.json:
  9d4e15fd/docs/b.json:
  .publish.json: |
    {"files": [{"url": "/crrb/folder/b", "monikers":["netcore-1.1"]}, {"url": "/docs/b", "monikers":["netcore-1.0","netcore-1.1"]}]}
---
# crr files have same name but in different crr
legacy: true
repos:
  https://docs.com/crrsame/a:
    - files:
        docfx.yml: |
          files:
            - "crrb/**/*"
            - "crrc/**/*"
            - "docs/**/*"
          dependencies:
            crrb:
              url: https://docs.com/crrsame/b
              branch: master
              includeInBuild: true
            crrc:
              url: https://docs.com/crrsame/c
              branch: test
              includeInBuild: true
        docs/a.md: |
          [link to b](b.md)
        docs/b.md:
  https://docs.com/crrsame/b:
    - files:
        a.md: |
          [link to b](b.md)
        b.md:
  https://docs.com/crrsame/c#test:
    - files:
        a.md: |
          [link to b](b.md)
        b.md:
outputs:
  docs/a.mta.json:
  docs/a.raw.page.json:
  docs/b.mta.json:
  docs/b.raw.page.json:
  crrb/a.mta.json:
  crrb/a.raw.page.json:
  crrb/b.mta.json:
  crrb/b.raw.page.json:
  crrc/a.mta.json:
  crrc/a.raw.page.json:
  crrc/b.mta.json:
  crrc/b.raw.page.json:
  filemap.json: |
    {
      "file_mapping": {
        "crrb/a.md": {
          "type": "Content",
          "output_relative_path": "crrb/a.html",
          "asset_id": "crrb/a"
        },
        "crrc/a.md": {
          "type": "Content",
          "output_relative_path": "crrc/a.html",
          "asset_id": "crrc/a"
        },
        "docs/a.md": {
          "type": "Content",
          "output_relative_path": "docs/a.html",
          "asset_id": "docs/a"
        }
      }
    }
  .dependencymap.json: |
    {
      "dependencies": {
        "crrb/a.md": [{ "source": "crrb/b.md", "type": "file" }],
        "crrc/a.md": [{ "source": "crrc/b.md", "type": "file" }],
        "docs/a.md": [{ "source": "docs/b.md", "type": "file" }]
      }
    }
