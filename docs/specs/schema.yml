---
# Support schema documents in YAML format
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:LandingData
    title: my title
    metadata:
      key: value
outputs:
  docs/a.json: |
    {
      "title": "my title",
      "metadata": { "key": "value" }
    }
---
# Support schema documents in JSON format
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/LandingData.json",
      "title": "my title",
      "metadata": { "key": "value" }
    }
outputs:
  docs/a.json: |
    { 
      "title": "my title",
      "metadata": { "key": "value" }
    }
---
# Throw error when schema is not specified
inputs:
  docfx.yml:
  docs/a.yml: |
    title: my title
  docs/b.json: |
    {
      "a": 1,
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/LandingData.json"
    }
outputs:
  .errors.log: |
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema ''.","file":"docs/a.yml","line":1,"column":1}
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema ''.","file":"docs/b.json","line":1,"column":1}
---
# Fallback to documentType when yaml mime is YamlDocument
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:YamlDocument
    documentType: LandingData
    title: my title
outputs:
  docs/a.json: |
    {
      "title": "my title"
    }
---
# Throw error when defined schema is not found
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:SchemaNotExisting
    title: my title
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/SchemaNotExisting.json",
    }
  docs/c.json: |
    { "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/SchemaNotExisting.json"}
outputs:
  .errors.log: |
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema 'SchemaNotExisting'.","file":"docs/a.yml","line":1,"column":1}
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema 'SchemaNotExisting'.","file":"docs/b.json","line":2,"column":95}
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema 'SchemaNotExisting'.","file":"docs/c.json","line":1,"column":95}
---
# Support schema documents with Href content
inputs:
  docfx.yml:
  docs/A/TOC.yml:
  docs/TOC.yml:
  docs/a.yml: |
    #YamlMime:ContextObject
    brand: azure
    breadcrumb_path: TOC.yml
    toc_rel: A/TOC.yml
  _themes/ContentTemplate/schemas/ContextObject.schema.json: |
    {
      "type": "object",
      "properties": {
          "breadcrumb_path": {"contentType": "Href"},
          "toc_rel": {"contentType": "Href"},
      }
    }
outputs:
  docs/toc.json:
  docs/a/toc.json:
  docs/a.json: |
    {
      "brand": "azure",
      "breadcrumb_path": "toc.json",
      "toc_rel": "a/toc.json"
    }
  .dependencymap.json: |
      {
         "dependencies":{
            "docs/a.yml":[
               { "source": "docs/A/TOC.yml", "type": "file" },
               { "source": "docs/TOC.yml", "type": "file" }
            ]
         }
      }
---
# schema documents with Href content but wrong type
inputs:
  docfx.yml:
  TOC.yml:
  docs/TOC.yml:
  docs/a.yml: |
    #YamlMime:ContextObject
    brand: azure
    breadcrumb_path: {}
    toc_rel: ../TOC.yml
  _themes/ContentTemplate/schemas/ContextObject.schema.json: |
    {
      "type": "object",
      "properties": {
          "breadcrumb_path": {"type": "string", "contentType": "Href"},
          "toc_rel": {"type": "string", "contentType": "Href"},
      }
    }
outputs:
  toc.json:
  docs/toc.json:
  .errors.log: |
    {"message_severity":"error","code":"unexpected-type","message":"Expected type 'String' but got 'Object'.","file":"docs/a.yml","line":3,"column":18}
---
# Schema documents with Href content referencing resource file, the resource file should be outputed
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestPage
    href: image.png
  docs/image.png:
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "href": {"contentType": "href"}
      }
    }
outputs:
  docs/a.json: |
    {"href": "image.png"}
  docs/image.png:
---
# Support schema documents with Markdown content
inputs:
  docfx.yml:
  docs/index.yml: |
    #YamlMime:TestPage
    description: Hello `docfx`! <a href="a.md">a</a>
  docs/a.md:
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "description": {"contentType": "Markdown"}
      }
    }
outputs:
  docs/index.json: |
    { "description": "<p>Hello <code>docfx</code>! <a href=\"a\">a</a></p>" }
  docs/a.json:
---
# Markdown content with null value
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestPage
    description:
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "description": {"type": "string"}
      }
    }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"unexpected-type","message":"Expected type 'String' but got 'Null'.","file":"docs/a.yml","line":2,"column":13}
---
# Support schema documents with inline markdown content
inputs:
  docfx.yml: |
    customRules:
      heading-not-found: error
  docs/a.yml: |
    #YamlMime:TestPage
    inlineDescription: >
      This is a list:
        - Item 1
        - Item 2
        - `Item 3`

      ## Not heading
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "inlineDescription": {"contentType": "InlineMarkdown"}
      }
    }
outputs:
  docs/a.json: |
    { "inlineDescription": "This is a list:\n- Item 1\n- Item 2\n- <code>Item 3</code>## Not heading" }
---
# [skip] Support schema documents with html content
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestPage
    html: link <a href="b.md"></a> <script></script>
  docs/b.md:
outputs:
  docs/a.json: |
    { "html": "link <a href=\"b\"></a>" }
  docs/b.json:
---
# Support schema documents with href content
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestPage
    href: b.md
  docs/b.md:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "href": {"contentType": "href"}
      }
    }
outputs:
  docs/a.json: |
    { "href": "b" }
  docs/b.json:
---
# Output data schema to json, output page schema to html
inputs:
  docfx.yml:
  docs/a.md: |
    link to [data](data.yml) or [page](page.yml)
  docs/data.yml: |
    #YamlMime:TestData
  docs/page.yml: |
    #YamlMime:TestPage
  _themes/ContentTemplate/schemas/TestData.schema.json: "{}"
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: "{}"
outputs:
  docs/a.json: |
    { "conceptual": "<p>link to <a href=\"data.json\"> data</a> or <a href=\"page\"> page</a></p>" }
  docs/data.json:
  docs/page.json:
---
# Markdown field with heading should not be removed
inputs:
  docfx.yml:
  docs/page.yml: |
    #YamlMime:TestPage
    description: >
      # Heading
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "description": {"contentType": "Markdown"}
      }
    }
outputs:
  docs/page.json: |
    {
      "description": "<h1 id=\"heading\">Heading</h1>"
    }
---
# Show yaml, json syntax error
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestData
    a: b:
  docs/b.json: |
    {
outputs:
  .errors.log: |
    {"message_severity":"error","code":"yaml-syntax-error","file":"docs/a.yml","line":2,"column":5}
    {"message_severity":"error","code":"json-syntax-error","file":"docs/b.json","line":2}
---
# Invalid JSON
inputs:
  docfx.yml:
  docs/a.json: |
    {a}/{b}/{c}
outputs:
  .errors.log: |
    {"message_severity":"error","code":"json-syntax-error","message":"Invalid JavaScript property identifier character: }.","file":"docs/a.json","line":1,"column":2}
---
# Data-model output should only contains input(or transformed input)
inputs:
  docfx.yml: |
    globalMetadata:
      globalMta: global
    fileMetadata:
      fileMta:
        a.yml: file
  a.yml: |
    #YamlMime:TestData
    prop: value
    metadata:
      userMta: user
  _themes/ContentTemplate/schemas/TestData.schema.json: "{}"
outputs:
  a.json: |
    {
      "prop": "value",
      "metadata": {
        "userMta": "user",
        "globalMta": undefined,
        "fileMta": undefined,
        "locale": undefined
      }
    }
  .publish.json: |
    {"files":[{"path":"a.json", "locale":"en-us"}]}
---
# Throw error when content is not an object
inputs:
  docfx.yml:
  _themes/ContentTemplate/schemas/test.schema.json: '{}'
  a.yml: |
    #YamlMime:test
    - array
outputs:
  .errors.log: |
    {"message_severity":"error","code":"unexpected-type","message":"Expected type 'Object' but got 'Array'.","file":"a.yml","line":1,"column":1}
---
# Validate bookmark against content HTML after applying template for SDP 
legacy: true
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestPage
    heading: heading-1
    description: |
      ## heading 2
  b.yml: |
    #YamlMime:TestPage
    heading: heading-1
    description: |
      ## heading 2
      [](#heading-1)
      [](#heading-2)
      [](#heading-3)
      [](a.yml#heading-1)
      [](a.yml#heading-2)
      [](a.yml#heading-3)
  c.md: |
      [](a.yml#heading-1)
      [](a.yml#heading-2)
      [](a.yml#heading-3)
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "properties": {
        "description": {"contentType": "Markdown"}
      }
    }
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <h2 id="{{heading}}"></h2>{{{description}}}
outputs:
  .errors.log: |
    {"message_severity":"warning","log_item_type":"user","code":"bookmark-not-found","message":"Cannot find bookmark '#heading-3' in 'b.yml', did you mean '#heading-1'?","file":"b.yml","line":4}
    {"message_severity":"warning","log_item_type":"user","code":"bookmark-not-found","message":"Cannot find bookmark '#heading-3' in 'a.yml', did you mean '#heading-1'?","file":"c.md","line":3}
    {"message_severity":"warning","log_item_type":"user","code":"bookmark-not-found","message":"Cannot find bookmark '#heading-3' in 'a.yml', did you mean '#heading-1'?","file":"b.yml","line":7}
  a.mta.json:
  a.raw.page.json:
  b.mta.json:
  b.raw.page.json:
  c.mta.json:
  c.raw.page.json:
---
# metadata need to be transformed for SDP
inputs:
  docfx.yml: |
    fileMetadata:
      href:
        c.yml: b.md
  a.yml: |
    #YamlMime:TestData
    metadata:
      href: b.md
  b.md:
  c.yml: |
    #YamlMime: TestData
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "metadata": {
          "properties": {
            "href": { "contentType": "Href" }
          }
        }
      }
    }
  _themes/ContentTemplate/TestData.html.primary.js: |
    exports.transform = function (model) {
      return model.prop;
    }
outputs:
  a.json: |
    {"metadata": {"href": "b"}}
  b.json:
  c.json: |
    {"metadata": {"href": "b"}}
---
# metadata need to be transformed for SDP
inputs:
  docfx.yml: |
    outputType: html
    outputUrlType: pretty
  a.yml: |
    #YamlMime:TestPage
    key: value
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "required": ["authors"],
      "properties": {
        "authors": {
          "type": "array"
        }
      }
    }
  _themes/ContentTemplate/TestPage.html.primary.js: |
    exports.transform = function (model) {
      // should throw here
      var authorCount = model.authors.length;
      return model;
    }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"missing-attribute","message":"Missing required attribute: 'authors'.","file":"a.yml","line":2,"column":1}
  .publish.json: |
    {"files":[{"url":"/a/","source_path":"a.yml","has_error":true}]}
