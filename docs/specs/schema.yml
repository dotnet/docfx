---
# Support schema documents in YAML format
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:LandingData
    title: my title
    metadata:
      key: value
outputs:
  docs/a.json: |
    {
      "title": "my title",
      "metadata": { "key": "value" }
    }
---
# Support schema documents in JSON format
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/LandingData.json",
      "title": "my title",
      "metadata": { "key": "value" }
    }
outputs:
  docs/a.json: |
    { 
      "title": "my title",
      "metadata": { "key": "value" }
    }
---
# Throw error when schema is not specified
inputs:
  docfx.yml:
  docs/a.yml: |
    title: my title
  docs/b.json: |
    {
      "a": 1,
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/LandingData.json"
    }
outputs:
  .errors.log: |
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema ''.","file":"docs/a.yml","line":1,"column":1}
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema ''.","file":"docs/b.json","line":1,"column":1}
---
# Fallback to documentType when yaml mime is YamlDocument
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:YamlDocument
    documentType: LandingData
    title: my title
outputs:
  docs/a.json: |
    {
      "title": "my title"
    }
---
# Throw error when defined schema is not found
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:SchemaNotExisting
    title: my title
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/SchemaNotExisting.json",
    }
  docs/c.json: |
    { "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/SchemaNotExisting.json"}
outputs:
  .errors.log: |
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema 'SchemaNotExisting'.","file":"docs/a.yml","line":1,"column":1}
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema 'SchemaNotExisting'.","file":"docs/b.json","line":2,"column":95}
   {"message_severity":"error","code":"schema-not-found","message":"Unknown schema 'SchemaNotExisting'.","file":"docs/c.json","line":1,"column":95}
---
# Support schema documents with Href content
inputs:
  docfx.yml:
  docs/A/TOC.yml:
  docs/TOC.yml:
  docs/a.yml: |
    #YamlMime:ContextObject
    brand: azure
    breadcrumb_path: TOC.yml
    toc_rel: A/TOC.yml
  _themes/ContentTemplate/schemas/ContextObject.schema.json: |
    {
      "renderType": "component",
      "type": "object",
      "properties": {
          "breadcrumb_path": {"contentType": "Href"},
          "toc_rel": {"contentType": "Href"},
      }
    }
outputs:
  docs/toc.json:
  docs/a/toc.json:
  docs/a.json: |
    {
      "brand": "azure",
      "breadcrumb_path": "toc.json",
      "toc_rel": "a/toc.json"
    }
  .dependencymap.json: |
      {
         "dependencies":{
            "docs/a.yml":[
               { "source": "docs/A/TOC.yml", "type": "file" },
               { "source": "docs/TOC.yml", "type": "file" }
            ]
         }
      }
---
# schema documents with Href content but wrong type
inputs:
  docfx.yml:
  TOC.yml:
  docs/TOC.yml:
  docs/a.yml: |
    #YamlMime:ContextObject
    brand: azure
    breadcrumb_path: {}
    toc_rel: ../TOC.yml
  _themes/ContentTemplate/schemas/ContextObject.schema.json: |
    {
      "type": "object",
      "properties": {
          "breadcrumb_path": {"type": "string", "contentType": "Href"},
          "toc_rel": {"type": "string", "contentType": "Href"},
      }
    }
outputs:
  toc.json:
  docs/toc.json:
  .errors.log: |
    {"message_severity":"error","code":"unexpected-type","message":"Expected type 'String' but got 'Object'.","file":"docs/a.yml","line":3,"column":18}
---
# Schema documents with Href content referencing resource file, the resource file should be outputed
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestPage
    href: image.png
  docs/image.png:
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "href": {"contentType": "href"}
      }
    }
outputs:
  docs/a.json: |
    {"href": "image.png"}
  docs/image.png:
---
# Support schema documents with Markdown content
inputs:
  docfx.yml:
  docs/index.yml: |
    #YamlMime:TestPage
    description: Hello `docfx`! <a href="a.md">a</a>
  docs/a.md:
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "description": {"contentType": "Markdown"}
      }
    }
outputs:
  docs/index.json: |
    { "description": "<p>Hello <code>docfx</code>! <a href=\"a\">a</a></p>" }
  docs/a.json:
---
# Markdown content with null value
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestPage
    description:
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "description": {"type": "string"}
      }
    }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"unexpected-type","message":"Expected type 'String' but got 'Null'.","file":"docs/a.yml","line":2,"column":13}
---
# Support schema documents with inline markdown content
inputs:
  docfx.yml: |
    rules:
      heading-not-found: error
  docs/a.yml: |
    #YamlMime:TestPage
    inlineDescription: >
      This is a list:
        - Item 1
        - Item 2
        - `Item 3`

      ## Not heading
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "inlineDescription": {"contentType": "InlineMarkdown"}
      }
    }
outputs:
  docs/a.json: |
    { "inlineDescription": "This is a list:\n- Item 1\n- Item 2\n- <code>Item 3</code>## Not heading" }
---
# [skip] Support schema documents with html content
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestPage
    html: link <a href="b.md"></a> <script></script>
  docs/b.md:
outputs:
  docs/a.json: |
    { "html": "link <a href=\"b\"></a>" }
  docs/b.json:
---
# Support schema documents with href content
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestPage
    href: b.md
  docs/b.md:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "href": {"contentType": "href"}
      }
    }
outputs:
  docs/a.json: |
    { "href": "b" }
  docs/b.json:
---
# Output data schema to json, output page schema to html
inputs:
  docfx.yml:
  docs/a.md: |
    link to [data](data.yml) or [page](page.yml)
  docs/data.yml: |
    #YamlMime:TestData
  docs/page.yml: |
    #YamlMime:TestPage
  _themes/ContentTemplate/schemas/TestData.schema.json: "{\"renderType\": \"component\"}"
  _themes/ContentTemplate/TestPage.html.tmpl:
  _themes/ContentTemplate/schemas/TestPage.schema.json: "{\"renderType\": \"content\"}"
outputs:
  docs/a.json: |
    { "conceptual": "<p>link to <a href=\"data.json\"> data</a> or <a href=\"page\"> page</a></p>" }
  docs/data.json:
  docs/page.json:
---
# Markdown field with heading should not be removed
inputs:
  docfx.yml:
  docs/page.yml: |
    #YamlMime:TestPage
    description: >
      # Heading
  _themes/ContentTemplate/TestPage.html.primary.js:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "description": {"contentType": "Markdown"}
      }
    }
outputs:
  docs/page.json: |
    {
      "description": "<h1 id=\"heading\">Heading</h1>"
    }
---
# Show yaml, json syntax error
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestData
    a: b:
  docs/b.json: |
    {
  _themes/ContentTemplate/schemas/TestData.schema.json: "{\"renderType\": \"component\"}"
outputs:
  .errors.log: |
    {"message_severity":"error","code":"yaml-syntax-error","file":"docs/a.yml","line":2,"column":5}
    {"message_severity":"error","code":"json-syntax-error","file":"docs/b.json","line":2}
---
# Invalid JSON
inputs:
  docfx.yml:
  docs/a.json: |
    {a}/{b}/{c}
outputs:
  .errors.log: |
    {"message_severity":"error","code":"json-syntax-error","message":"Invalid JavaScript property identifier character: }.","file":"docs/a.json","line":1,"column":2}
---
# Data-model output should only contains input(or transformed input)
inputs:
  docfx.yml: |
    globalMetadata:
      globalMta: global
    fileMetadata:
      fileMta:
        a.yml: file
  a.yml: |
    #YamlMime:TestData
    prop: value
    metadata:
      userMta: user
  _themes/ContentTemplate/schemas/TestData.schema.json: "{\"renderType\": \"component\"}"
outputs:
  a.json: |
    {
      "prop": "value",
      "metadata": {
        "userMta": "user",
        "globalMta": undefined,
        "fileMta": undefined,
        "locale": undefined
      }
    }
  .publish.json: |
    {"files":[{"path":"a.json", "locale":"en-us"}]}
---
# Throw error when content is not an object
inputs:
  docfx.yml:
  _themes/ContentTemplate/schemas/test.schema.json: "{\"renderType\": \"component\"}"
  a.yml: |
    #YamlMime:test
    - array
outputs:
  .errors.log: |
    {"message_severity":"error","code":"unexpected-type","message":"Expected type 'Object' but got 'Array'.","file":"a.yml","line":1,"column":1}
---
# Validate bookmark against content HTML after applying template for SDP 
noSingleFile: true
inputs:
  docfx.yml: |
    outputType: pageJson
  a.yml: |
    #YamlMime:TestPage
    heading: heading-1
    description: |
      ## heading 2
  b.yml: |
    #YamlMime:TestPage
    heading: heading-1
    description: |
      ## heading 2
      [](#heading-1)
      [](#heading-2)
      [](#heading-3)
      [](a.yml#heading-1)
      [](a.yml#heading-2)
      [](a.yml#heading-3)
  c.md: |
      [](a.yml#heading-1)
      [](a.yml#heading-2)
      [](a.yml#heading-3)
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "properties": {
        "description": {"contentType": "Markdown"}
      }
    }
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <h2 id="{{heading}}"></h2>{{{description}}}
outputs:
  .errors.log: |
    {"message_severity":"warning","log_item_type":"user","code":"bookmark-not-found","message":"Cannot find bookmark '#heading-3' in 'b.yml', did you mean '#heading-1'?","file":"b.yml","line":6,"column":1}
    {"message_severity":"warning","log_item_type":"user","code":"bookmark-not-found","message":"Cannot find bookmark '#heading-3' in 'a.yml', did you mean '#heading-1'?","file":"c.md","line":3,"column":1}
    {"message_severity":"warning","log_item_type":"user","code":"bookmark-not-found","message":"Cannot find bookmark '#heading-3' in 'a.yml', did you mean '#heading-1'?","file":"b.yml","line":9,"column":1}
  a.mta.json:
  a.raw.page.json:
  b.mta.json:
  b.raw.page.json:
  c.mta.json:
  c.raw.page.json:
---
# Transform metadata in SDP yaml
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestData
    metadata:
      href: b.md
  b.md:
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "metadata": {
          "properties": {
            "href": { "contentType": "Href" }
          }
        }
      }
    }
  _themes/ContentTemplate/TestData.html.tmpl:
outputs:
  a.json: |
    {"metadata": {"href": "b"}, "schema": "TestData"}
  b.json: |
    {"conceptual": "", "schema": "Conceptual"}
---
# Skip javascript on schema validation failure
inputs:
  docfx.yml: |
    outputType: html
    urlType: pretty
  a.yml: |
    #YamlMime:TestPage
    key: value
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "required": ["authors"],
      "properties": {
        "authors": {
          "type": "array"
        }
      }
    }
  _themes/ContentTemplate/TestPage.html.primary.js: |
    exports.transform = function (model) {
      // should throw here
      var authorCount = model.authors.length;
      return model;
    }
  _themes/ContentTemplate/TestPage.html.tmpl: |
outputs:
  .errors.log: |
    {"message_severity":"error","code":"missing-attribute","message":"Missing required attribute: 'authors'.","file":"a.yml","line":2,"column":1}
  .publish.json: |
    {"files":[{"url":"/a/","source_path":"a.yml","has_error":true}]}
---
# .manifest.json original_type uses mime name
inputs:
  docfx.yml: 
  a.yml: |
    #YamlMime:TestPage
    key: value
  b.yml: |
    #YamlMime:TestData
  redirections.yml: |
    redirections:
      original_b.md: /b
  _themes/ContentTemplate/schemas/TestData.schema.json: "{\"renderType\": \"component\"}"
  _themes/ContentTemplate/schemas/TestPage.schema.json: "{\"renderType\": \"content\"}"
  _themes/ContentTemplate/TestPage.html.tmpl:
outputs:
  a.json:
  b.json:
  .manifest.json: |
    {
      "files": [
        {"asset_id": "a", "original_type": "TestPage"},
        {"asset_id": "b.json", "original_type": "TestData"},
        {"asset_id": "original_b", "original_type": "Conceptual"},
      ]
    }
---
# Support public template
inputs:
  docfx.yml: |
    template: "https://static.docs.com/ui/latest"
  docs/a.yml: |
    #YamlMime:TestData
    test: b.md
  docs/b.md:
http:
  https://static.docs.com/ui/latest/schemas/TestData.schema.json: |
    {
      "renderType": "component",
      "type": "object",
      "properties": {
        "test": {"contentType": "Href"},
      }
    }
outputs:
  docs/a.json: |
    {
      "test": "b"
    }
  docs/b.json:
---
# Disable markdown fallback for loc page
locale: zh-cn
repos:
  https://docs.com/page-fallback#master:
    - files:
        docfx.yml:
        includes/b.md: |
          **Text**
  https://docs.com/page-fallback.zh-cn#master:
    - files:
        docfx.yml:
        unit.yml: |
          ### YamlMime:TestData
          content: '[!include[](includes/b.md)]'
        _themes/ContentTemplate/schemas/TestData.schema.json: |
          {
            "contentFallback": false,
            "properties": { 
              "content": {"type":"string","contentType": "markdown"}
              }
          }
        _themes/ContentTemplate/TestData.html.primary.tmpl:
outputs:
  .errors.log: |
    { "message_severity":"error","code":"include-not-found","message":"Invalid include link: 'includes/b.md'.","file":"unit.yml"}
---
# Disable markdown fallback for loc page, but enable for files except markdown
locale: zh-cn
repos:
  https://docs.com/page-fallback#master:
    - files:
        docfx.yml:
        includes/codes/a.cs: |
          Console.WriteLine("Hello, world!");
  https://docs.com/page-fallback.zh-cn#master:
    - files:
        docfx.yml: |
          exclude: includes/b.md
        includes/b.md: |
          # demo code
          [!code-demo[](codes/a.cs)]
        unit.yml: |
          ### YamlMime:TestData
          content: '[!include[](includes/b.md)]'
        _themes/ContentTemplate/schemas/TestData.schema.json: |
          {
            "contentFallback": false,
            "properties": { 
              "content": {"type":"string","contentType": "markdown"}
              }
          }
        _themes/ContentTemplate/TestData.html.primary.tmpl:
outputs:
  unit.json: |
    {
      "content": "<h1 id=\"demo-code\">demo code</h1>\n<pre><code class=\"lang-demo\">Console.WriteLine(&quot;Hello, world!&quot;);\n</code></pre>"
    }
---
# Report approximate line number for markdown contents inside YAML
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime: Test
    markdowns:
    - '[!include[](a.md)]'
    - '[!include[](b.md)]'
  _themes/ContentTemplate/schemas/Test.schema.json: |
    {
      "properties": {
        "markdowns": {
          "items": { "contentType": "markdown" }
        }
      }
    }
outputs:
  .errors.log: |
    { "code":"include-not-found","file":"a.yml","line":3,"column":3,"end_line":3,"end_column":3 }
    { "code":"include-not-found","file":"a.yml","line":4,"column":3,"end_line":4,"end_column":3 }
---
# Require min or max item count that meet condition
noDryRun: true
inputs:
  docfx.yml:
  unit.yml: |
    ### YamlMime:ModuleUnit
    questions:
    - content: "question #1"
      choices:
      - content: "choice 1-1"
        isCorrect: false
      - content: "choice 1-2"
        isCorrect: false
      - content: "choice 1-3"
        isCorrect: false
      - content: "choice 1-4"
        isCorrect: false
    - content: "questin #2"
      choices:
      - content: "choice 2-1"
        isCorrect: true
      - content: "choice 2-2"
        isCorrect: true
      - content: "choice 2-3"
        isCorrect: false
  _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
    {
      "properties": {
        "questions": {
          "type": "array",
          "items": {
            "properties": {
              "choices" : {
                "type": "array",
                "minItemsWhen": [
                  {
                    "value": 1,
                    "condition": {"properties": {"isCorrect": {"const": true}}}
                  }
                ],
                "maxItemsWhen": [
                  {
                    "value": 1,
                    "condition": {"properties": {"isCorrect": {"const": true}}}
                  }
                ]
              }
            }
          }
        }
      }
    }
  _themes/ContentTemplate/ModuleUnit.html.primary.tmpl:
outputs:
  .errors.log: | 
    {"message_severity":"error","code":"array-max-check-invalid","message":"The array must not have more than 1 matched item(s).","file":"unit.yml","line":15}
    {"message_severity":"error","code":"array-min-check-invalid","message":"The array must have least 1 matched item(s).","file":"unit.yml","line":5}

---
# export schemaType to xrefmap.json
inputs:
  docfx.yml:
  a.yml: |
    ### YamlMime:TestData_a
    uid: a
  _themes/ContentTemplate/schemas/TestData_a.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"}
      }
    }
  b.yml: |
    ### YamlMime:TestData_b
    uid: b
  _themes/ContentTemplate/schemas/TestData_b.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid", "schemaType": "b_type"}
      }
    }
  c.yml: |
    ### YamlMime:TestData_c
    uid: c
    type: c_type
  _themes/ContentTemplate/schemas/TestData_c.schema.json: |
    {
      "schemaTypeProperty": "type",
      "properties": {
        "uid" : {"contentType": "uid"},
        "type": {"type": "string"}
      }
    }
  d.yml: |
    ### YamlMime:TestData_d
    uid: d
    type: d1_type
  _themes/ContentTemplate/schemas/TestData_d.schema.json: |
    {
      "schemaTypeProperty": "type",
      "properties": {
        "uid" : {"contentType": "uid", "schemaType": "d2_type"},
        "type": {"type": "string"}
      }
    }
  e.yml: |
    ### YamlMime:TestData_e
    uid: e_parent
    obj:
      uid: e
  _themes/ContentTemplate/schemas/TestData_e.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"},
        "obj": {
          "type": "object",
          "properties": {"uid": {"contentType": "uid"}}
        }
      }
    }
outputs:
  a.json:
  b.json:
  c.json:
  d.json:
  e.json:
  .xrefmap.json: | 
    {
      "references":[
        {"uid": "a", "schemaType": "TestData_a"},
        {"uid": "b", "schemaType": "b_type"},
        {"uid": "c", "schemaType": "c_type"},
        {"uid": "d", "schemaType": "d2_type"},
        {"uid": "e"},
        {"uid": "e_parent", "schemaType": "TestData_e"}
      ]
    }
---
# support SDP validation xrefType
inputs:
  docfx.yml: |
    xref:
    - 1.xrefmap.json
  1.xrefmap.json: |
    {
      "references":[
        {"uid": "external_c", "schemaType": "c2_type"}
      ]
    }
  docs/a.yml: |
    ### YamlMime:a_type
    uid: uid_a
    bs: ['uid_b']
    achieve: uid_c
  docs/b.yml: |
    ### YamlMime:b_type
    uid: uid_b
    achieve: external_c
  docs/c.yml: |
    ### YamlMime:c_type
    achieves:
    - uid: uid_c
      type: c3_type
  _themes/ContentTemplate/schemas/a_type.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"},
        "bs": {"items": {"contentType": "xref", "xrefType": "b_type"}},
        "achieve": {"contentType": "xref", "xrefType": "c3_type"}
      }
    }
  _themes/ContentTemplate/schemas/b_type.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"},
        "achieve": {"contentType": "xref", "xrefType": "c2_type"}
      }
    }
  _themes/ContentTemplate/schemas/c_type.schema.json: |
    {
      "properties": {
        "achieves": {
          "items": { 
            "properties": {"uid" : {"contentType": "uid"}},
            "schemaTypeProperty": "type"
          }
        }
      }
    }
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
  .xrefmap.json: | 
    {
      "references":[
        {"uid": "uid_a", "schemaType": "a_type"},
        {"uid": "uid_b", "schemaType": "b_type"},
        {"uid": "uid_c", "schemaType": "c3_type"}
      ]
    }
---
# support SDP validation xrefType 2
inputs:
  docfx.yml: |
    xref:
    - 1.xrefmap.json
  1.xrefmap.json: |
    {
      "references":[
        {"uid": "external_c", "schemaType": "c_type"},
        {"uid": "external_d"}
      ]
    }
  docs/a.yml: |
    ### YamlMime:a_type
    uid: uid_a
    bs: ['uid_e', 'external_d', 'uid_d']
    achieve: uid_c
  docs/e.yml: |
    ### YamlMime:e_type
    uid: uid_e
    achieve: external_c
  docs/c.yml: |
    ### YamlMime:c_type
    achieves:
    - uid: uid_c
      type: c3_type
    - uid: uid_d
  _themes/ContentTemplate/schemas/a_type.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"},
        "bs": {"items": {"contentType": "xref", "xrefType": "b_type"}},
        "achieve": {"contentType": "xref", "xrefType": "c3_type"}
      }
    }
  _themes/ContentTemplate/schemas/e_type.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"},
        "achieve": {"contentType": "xref", "xrefType": "c2_type"}
      }
    }
  _themes/ContentTemplate/schemas/c_type.schema.json: |
    {
      "properties": {
        "achieves": {
          "items": { 
            "properties": {"uid" : {"contentType": "uid"}},
            "schemaTypeProperty": "type"
          }
        }
      }
    }
outputs:
  docs/a.json:
  docs/c.json:
  docs/e.json:
  .xrefmap.json: | 
    {
      "references":[
        {"uid": "uid_a", "schemaType": "a_type"},
        {"uid": "uid_c", "schemaType": "c3_type"},
        {"uid": "uid_d"},
        {"uid": "uid_e", "schemaType": "e_type"}
      ]
    }
  .errors.log: |
    {"message_severity":"warning","code":"xref-type-invalid","message":"Invalid cross reference: 'external_c'. Expected type 'c2_type' but got 'c_type'.","file":"docs/e.yml","line":3}
    {"message_severity":"warning","code":"xref-type-invalid","message":"Invalid cross reference: 'external_d'. Expected type 'b_type' but got ''.","file":"docs/a.yml","line":3}
    {"message_severity":"warning","code":"xref-type-invalid","message":"Invalid cross reference: 'uid_d'. Expected type 'b_type' but got ''.","file":"docs/a.yml","line":3}
    {"message_severity":"warning","code":"xref-type-invalid","message":"Invalid cross reference: 'uid_e'. Expected type 'b_type' but got 'e_type'.","file":"docs/a.yml","line":3}
---
# Report file path for empty YAML files
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestPage
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    { "required": ["authors"] }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"missing-attribute","message":"Missing required attribute: 'authors'.","file":"a.yml","line":0,"column":0}
---
# Schema based transform supports oneOf
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestSchema
    oneOf:
    - _markdown_
    - inline _markdown_
  _themes/ContentTemplate/schemas/TestSchema.schema.json: |
    {
      "properties": {
        "oneOf": {
          "type": "array",
          "items": {
            "oneOf": [
              { "type": "string", "maxlength": 10, "contentType": "markdown" },
              { "type": "string", "minlength": 11, "contentType": "inlineMarkdown" },
            ]
          }
        }
      }
    }
outputs:
  a.json: |
    { "oneOf": ["<p><em>markdown</em></p>", "inline <em>markdown</em>"] }
---
# Schema based transform supports anyOf
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestSchema
    anyOf:
    - _markdown_
    - inline _markdown_
  _themes/ContentTemplate/schemas/TestSchema.schema.json: |
    {
      "properties": {
        "anyOf": {
          "type": "array",
          "items": {
            "anyOf": [
              { "type": "string", "maxlength": 10, "contentType": "markdown" },
              { "type": "string", "minlength": 11, "contentType": "inlineMarkdown" },
            ]
          }
        }
      }
    }
outputs:
  a.json: |
    { "anyOf": ["<p><em>markdown</em></p>", "inline <em>markdown</em>"] }
---
# Schema based transform supports if-then-else
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestSchema
    ifThenElse:
    - _markdown_
    - inline _markdown_
  _themes/ContentTemplate/schemas/TestSchema.schema.json: |
    {
      "properties": {
        "ifThenElse": {
          "type": "array",
          "items": {
            "if": { "type": "string", "maxlength": 10 },
            "then": { "contentType": "markdown" },
            "else": { "contentType": "inlineMarkdown" }
          }
        }
      }
    }
outputs:
  a.json: |
    { "ifThenElse": ["<p><em>markdown</em></p>", "inline <em>markdown</em>"] }
---
# Schema based transform on nested xref property
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestSchema
    uid: a
    foo:
      bar:
        _markdown_
  _themes/ContentTemplate/schemas/TestSchema.schema.json: |
    {
      "xrefProperties": ["foo"],
      "properties": {
        "uid": {
          "contentType": "uid"
        },
        "foo": {
          "properties": {
            "bar": { "type": "string", "contentType": "markdown" }
          }
        }
      }
    }
outputs:
  a.json: |
    { "uid": "a", "foo": { "bar": "<p><em>markdown</em></p>" } }
  .xrefmap.json: |
    { "references": [{ "uid": "a", "foo": { "bar": "<p><em>markdown</em></p>" } }] }
---
# JSON schemas $ref supports local file or HTTP
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestSchema
    foo: _markdown_
    bar: inline _markdown_
  _themes/ContentTemplate/schemas/TestSchema.schema.json: |
    {
      "properties": {
        "foo": { "$ref": "foo.json" },
        "bar": { "$ref": "https://raw.githubusercontent.com/docascode/docfx-test-dependencies/schema/schema.json#/baz" }
      }
    }
  _themes/ContentTemplate/schemas/foo.json: |
    { "contentType": "markdown" }
outputs:
  a.json: |
    {
      "foo": "<p><em>markdown</em></p>",
      "bar": "inline <em>markdown</em>"
    }
