# Metadata keys are case sensitive
inputs:
  docfx.yml: |
    globalMetadata:
      key: global
      KEY: GLOBAL
  docs/a.md: |
    ---
    key: header
    KEY: HEADER
    ---
outputs:
  docs/a.json: |
    { "key": "header", "KEY": "HEADER" }
---
# Preserve custom metadata
# read-only metadata will be kept as user input, no matter they are known by docfx or not, like uid
# overwritable metadata will be overwritten by docfx when the input is valid, otherwise it's will not be changed
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    ms.custom-metadata:
    uid:
    breadcrumb_path: "/breadcrumb_path"
    author: xxx
    ---
    # Title
outputs:
  docs/a.json: |
    { "ms.custom-metadata": null, "author":"xxx", "uid": null, "breadcrumb_path": "/breadcrumb_path", "title": "Title"}
---
# Overwrite global metadata with null in yaml header
inputs:
  docfx.yml: |
    globalMetadata:
      ms.custom-metadata: not-null
  a.md: |
    ---
    ms.custom-metadata:
    ---
outputs:
  a.json: |
    { "ms.custom-metadata": null }
---
# Add ms.author and other metadata to error log
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    ms.author: xxx
    ms.prod: abc
    ms.topic: reference
    ---
    [!include[]()]
    # Heading
outputs:
  .errors.log: |
    {"message_severity":"error","code":"include-not-found","ms.author":"xxx", "ms.prod":"abc", "ms.topic":"reference", "message":"Invalid include link: ''.","file":"docs/a.md"}
---
# Report error for invalid yaml header value type
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: {}
    ---
outputs:
  .errors.log: |
    {"message_severity":"error","code":"violate-schema","ms.author":undefined,"ms.prod":undefined,"message":"Expected type String, please input String or type compatible with String.","file":"docs/a.md","line":2,"column":8}
---
# Report error for invalid yaml header value type as array
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    author:
      - a
      - b
    ---
outputs:
  .errors.log: |
    {"message_severity":"error","code":"violate-schema","message":"Expected type String, please input String or type compatible with String.","file":"docs/a.md","line":3,"column":3}
---
# generate normal document id and version id
# document id = sha2("Win.sccm|mdt/release-notes")
# version independent id = sha2("Win.sccm|mdt/release-notes")
inputs:
  docsets.yml:
  sccm/docfx.yml: |
    name: sccm
    product: Win
    hostName: docs.com
    basePath: /sccm
  sccm/mdt/release-notes.md:
outputs:
  sccm/sccm/mdt/release-notes.json: |
    { "document_id": "a4ceeac3-3752-5918-388a-59695cd53c62", "document_version_independent_id": "a4ceeac3-3752-5918-388a-59695cd53c62", "depot_name": "Win.sccm" }
---
# generate index document id and version id
# document id = sha2("Win.sccm|index") || sha2("Win.sccm|mdm/index")
# version independent id = sha2("Win.sccm|index") || sha2("Win.sccm|mdm/index")
inputs:
  docsets.yml:
  sccm/docfx.yml: |
    name: sccm
    product: Win
    files: "**/*"
    hostName: docs.com
    basePath: /sccm
  sccm/mdm/index.md:
  sccm/index.md:
outputs:
  sccm/sccm/index.json: |
    { "document_id": "f91ad68a-d59c-e1b0-12d1-cc0e93260c8d", "document_version_independent_id": "f91ad68a-d59c-e1b0-12d1-cc0e93260c8d" }
  sccm/sccm/mdm/index.json: |
    { "document_id": "ef9b84bd-be67-f99d-6b01-58ea46745404", "document_version_independent_id": "ef9b84bd-be67-f99d-6b01-58ea46745404" }
---
# generate document id from document id override file
inputs:
  docfx.yml: |
    name: azure-documents
    product: Azure
    documentIdOverride: document-ids.json
  document-ids.json: |
    {
      "document_ids": [{
        "depot_name": "Azure.azure-documents",
        "source_path": "a",
        "document_id": "00000000-0000-0000-0000-00000000",
        "document_version_independent_id": "11111111-1111-1111-1111-11111111",
      }]
    }
  a.md:
outputs:
  a.json: |
    { "document_id": "00000000-0000-0000-0000-00000000", "document_version_independent_id": "11111111-1111-1111-1111-11111111" }
---
# yaml&json toc metadata
inputs:
  docfx.yml:
  docs/json/toc.json: |
    {
      "metadata": {"a":"b"},
      "items": [{ "name": "title" }]
    }
  docs/yaml/toc.yml: |
    metadata:
      a: b
    items:
      - name: title
outputs:
  docs/json/toc.json: |
    {  
      "metadata": {"a": "b"},
      "items":[{"name":"title"}]
    }
  docs/yaml/toc.json: |
    {  
      "metadata": {"a": "b"},
      "items":[{"name":"title"}]
    }
---
# yaml&json toc leaf metadata
inputs:
  docfx.yml:
  docs/json/toc.json: |
    [{ "name": "title", "a": "b" }]
  docs/yaml/toc.yml: |
    - name: title
      a: b
outputs:
  docs/json/toc.json: |
    {  
      "items":[{"name":"title", "a": "b"}]
    }
  docs/yaml/toc.json: |
    {  
      "items":[{"name":"title", "a": "b"}]
    }
---
# yaml&json toc metadata inclusion
# child's root metadata will be dropped
inputs:
  docfx.yml:
  docs/json/toc.json: |
    {  
      "metadata": {"a": "b"},
      "items":[{"name":"title", "c": "d"}]
    }
  docs/yaml/toc.yml: |
    - name: toc reference
      tocHref: ../json/toc.json
outputs:
  docs/yaml/toc.json: |
    {  
      "items":[{"name":"toc reference", "items": [{"name":"title", "c": "d"}]}]
    }
---
# TOC respect global metadata and file metadata
inputs:
  docfx.yml: |
    globalMetadata:
      a: b
    fileMetadata:
      area:
        docs/json/toc.json: 2
  docs/json/toc.json: '{}'
  docs/yaml/toc.yml: |
    metadata:
      c: d
  docs/md/toc.md:
outputs:
  docs/yaml/toc.json: |
    { "metadata": { "a": "b", "c": "d"} }
  docs/json/toc.json: |
    { "metadata": { "a": "b", "area": 2 } }
  docs/md/toc.json: |
    { "metadata": { "a": "b", "area": undefined } }
---
# Generate canonical URL
# In docs, canonical URL is later overwritten by template JINT code.
# TODO: need to handle the logic difference when template code is removed.
inputs:
  docfx.yml: |
    files: "**/*"
    hostName: docs.microsoft.com
    routes:
      articles/: azure/
  articles/app-service/index.md:
outputs:
  azure/app-service/index.json: |
    { "canonical_url": "https://docs.microsoft.com/en-us/azure/app-service/" }
---
# No canonical URL for profile page
inputs:
  docfx.yml:
  a.md: |
    ---
    page_type: profile
    ---
outputs:
  a.json: |
    { "canonical_url": undefined }
---
# redirection defined in file metadata is not supported
inputs:
  docfx.yml: |
    fileMetadata:
      redirect_url:
        docs/a.md: https://docfx.com
  docs/a.md:
outputs:
  docs/a.json:
  .errors.log: |
    {"message_severity":"warning","code":"attribute-reserved","message":"Attribute redirect_url is reserved for use by Docs.","file":"docfx.yml","line":2,"column":3}
---
# document_id defined in YAML file metadata is not supported
inputs:
  docfx.yml:
  docs/index.yml: |
    ### YamlMime:YamlDocument
    documentType: LandingData
    title: some title
    metadata:
      document_id: some id
  docs/a.md:
outputs:
  docs/a.json:
  docs/index.json:
  .errors.log: |
    {"message_severity":"warning","code":"attribute-reserved","message":"Attribute document_id is reserved for use by Docs.","file":"docs/index.yml","line":5,"column":3}
---
# redirection defined in global metadata is not supported
inputs:
  docfx.yml: |
    globalMetadata:
      redirect_url: https://docfx.com
  docs/a.md:
outputs:
  docs/a.json:
  .errors.log: |
    {"message_severity":"warning","code":"attribute-reserved","message":"Attribute redirect_url is reserved for use by Docs.","file":"docfx.yml","line":2,"column":3}
---
# resolve breadcrumb_path
inputs:
  docfx.yml: |
    globalMetadata:
      breadcrumb_path: ~/breadcrumbs/toc.json
  a.md:
  breadcrumbs/toc.json: '{}'
outputs:
  a.json: |
    { "breadcrumb_path": "breadcrumbs/toc.json" }
  breadcrumbs/toc.json:
---
# resolve breadcrumb_path relative to the declaring file
inputs:
  docfx.yml: |
    globalMetadata:
      breadcrumb_path: breadcrumbs/toc.json
  a-folder/a.md:
  breadcrumbs/toc.json: '{}'
outputs:
  a-folder/a.json: |
    { "breadcrumb_path": "../breadcrumbs/toc.json" }
  breadcrumbs/toc.json:
---
# Metadata should work for fields marked with SourceInfo<T>
inputs:
  docfx.yml: |
    fileMetadata:
      author:
        '**/*': name
  a.md:
outputs:
  a.json:
---
# Duplicated metadata
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    a: a
    a: b
    ---
outputs:
  docs/a.json: |
    {"a": "b"}
  .errors.log: |
    {"message_severity":"warning","code":"yaml-duplicate-key","message":"Key 'a' is already defined, remove the duplicate key.","file":"docs/a.md","line":3,"column":1}
---
# Invalid yaml syntax in yaml header
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    a: a: b
    title: A
    ---
    # B
outputs:
  docs/a.json: |
    {"a": undefined, "title": "B"}
  .errors.log: |
    {"message_severity":"warning","code":"yaml-header-syntax-error","file":"docs/a.md","line":2,"column":5}
---
# Input metadata doesn't overwrite system generated metadata
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    wordCount: 15
    document_id: 123
    ---
outputs:
  docs/a.json: |
    { "wordCount": 0, "document_id": "3862ef10-61c4-6242-7188-36960566ecb6" }
  .errors.log: |
    {"message_severity":"warning","code":"attribute-reserved","message":"Attribute wordCount is reserved for use by Docs.","file":"docs/a.md","line":2,"column":1}
    {"message_severity":"warning","code":"attribute-reserved","message":"Attribute document_id is reserved for use by Docs.","file":"docs/a.md","line":3,"column":1}
---
# Title in file metadata should overwrite H1
inputs:
  docfx.yml: |
    fileMetadata:
      title:
        docs/a.md: Title to overwrite
  docs/a.md: |
    # Title for a
outputs:
  docs/a.json: |
    {"title": "Title to overwrite"}
---
# Generate _op_pdfUrlPrefixTemplate when pdf is true
inputs:
  docfx.yml: |
    outputPdf: true
  a.md:
outputs:
  a.json: |
    { "_op_pdfUrlPrefixTemplate": "https://docs.com/pdfstore/en-us/./{branchName}" }
---
# no _op_pdfUrlPrefixTemplate for reference repository
inputs:
  docfx.yml: |
    outputPdf: true
    isReferenceRepository: true
  a.md:
outputs:
  a.json:
---
# Support tilde_path
inputs:
  docfx.yml:
  a/a.md: |
    ---
    tilde_path: 'a'
    ---
    [link to b](~/b.md)
  a/b.md:
outputs:
  a/a.json:
  a/b.json:
---
# Keep raw date string
inputs:
  docfx.yml: |
    outputType: pageJson
  docs/a.md: |
    ---
    loc_version: "2021-09-16T12:07:50.2667174Z"
    other_date_string: "9/16/2012 12:07:50 PM"
    ---
    (2021-09-16T12:07:50.2667174Z)Date string should not be parsed by Json.Net.
outputs:
  docs/a.raw.page.json: |
    {
      "pageMetadata": "
        <meta content=\"<p>(2021-09-16T12:07:50.2667174Z)Date string should not be parsed by Json.Net.</p>\r\n\" name=\"conceptual\" />
        <meta content=\".\" name=\"depot_name\" />\r\n<meta content=\"3862ef10-61c4-6242-7188-36960566ecb6\" name=\"document_id\" />
        <meta content=\"3862ef10-61c4-6242-7188-36960566ecb6\" name=\"document_version_independent_id\" />
        <meta content=\"2021-09-16T12:07:50.2667174Z\" name=\"loc_version\" />
        <meta content=\"en-us\" name=\"locale\" />
        <meta content=\"9/16/2012 12:07:50 PM\" name=\"other_date_string\" />
        <meta content=\"\" name=\"rawTitle\" />
        <meta content=\"Conceptual\" name=\"schema\" />
        <meta content=\"Docs\" name=\"site_name\" />
        <meta content=\"8\" name=\"wordCount\" />"
    }
  docs/a.mta.json:
---
# output defined xrefs per file to structure json
repos:
  https://docs.com/test#test:
    - files:
        docfx.yml:
        docs/a.md: |
          ---
          uid: abc
          breadcrumb_path: "/breadcrumb_path"
          author: xxx
          ---
          # Title
outputs:
  docs/a.json: |
    {      
      "author":"xxx", 
      "uid": "abc", 
      "breadcrumb_path": "/breadcrumb_path", 
      "title": "Title",  
      "xrefs": [
          {
            "href": "https://docs.com/docs/a?branch=test",
            "name": "abc",
            "uid": "abc",
          }
      ]
    }
  .xrefmap.json: | 
    {
      "references":[
        {"uid": "abc", "name": "abc" ,"href": "https://docs.com/docs/a?branch=test"},       
      ]
    }
---
# build page json, output defined xrefs to page mta.json and raw.page.json
repos:
  https://docs.com/test#test:
    - files:
        docfx.yml: |
          outputType: pageJson
        docs/a.md: |
          ---
          uid: abc
          breadcrumb_path: "/breadcrumb_path"
          author: xxx
          ---
          # Title
outputs:  
  docs/a.raw.page.json: | 
    { 
      "rawMetadata": {
        "xrefs": [
          {"uid": "abc", "name": "abc", "href": "https://docs.com/docs/a?branch=test"}
        ]
      }
    }
  docs/a.mta.json: |
    {       
      "xrefs": [
          {"uid": "abc", "name": "abc", "href": "https://docs.com/docs/a?branch=test"}
        ]
    }
  .xrefmap.json: | 
    {
      "references":[
        {"uid": "abc", "name": "abc" ,"href": "https://docs.com/docs/a?branch=test"},       
      ]
    }
---
