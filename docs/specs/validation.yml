---
# Check git merge conflict marker
inputs:
  docfx.yml:
  docs/a.md: |
    <<<<<<< HEAD
    foo
    =======
    bar
    >>>>>>> cb1abc6bd98cfc84317f8aa95a7662815417802d
outputs:
  docs/a.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"merge-conflict","message":"File contains merge conflict markers. NOTE: This Suggestion will become a Warning on 06/30/2020.","file":"docs/a.md","line":1,"column":1}
---
# Ignore git merge conflict marker inside code blocks
inputs:
  docfx.yml:
  docs/a.md: |
    a

    ```markdown
    <<<<<<< HEAD
    ...
    =======
    ...
    >>>>>>> 1d82c7efe18f86136247fb366df5030843199c19
    ```
outputs:
  docs/a.json:
---
# Metadata value must be scalar or scalar array
inputs:
  docfx.yml: |
    globalMetadata:
      key1: {}
    fileMetadata:
      key2:
        '**/*':
          - a: 1
  a.md:
outputs:
  .errors.log: |
    {"message_severity":"error","code":"invalid-metadata-type","message":"Metadata 'key1' can only be a scalar value or string array","file":"docfx.yml","line":2,"column":9}
    {"message_severity":"error","code":"invalid-metadata-type","message":"Metadata 'key2' can only be a scalar value or string array","file":"docfx.yml","line":6,"column":7}
---
# Additional metadata validation from external JSON schema
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    globalMetadata:
      key1: []
    fileMetadata:
      key2:
        '**/*': XNAGameStudio
  schema.json: |
    {
      "properties":{
        "key1": { "type": "string" },
        "key2": { "type": "string", "enum": ["VS", "MSDN"] },
        "key3": { "type": "integer" }
      }
    }
  a.md: |
    ---
    key3: net462
    ---
outputs:
  a.json: |
    {
      "key1": [],
      "key2": "XNAGameStudio",
      "key3": "net462"
    }
  .errors.log: |
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'String' but got 'Array'","file":"docfx.yml","line":3,"column":9}
    {"message_severity":"warning","code":"invalid-value","message":"Invalid value for 'key2': 'XNAGameStudio'","file":"docfx.yml","line":6,"column":13}
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'Integer' but got 'String'","file":"a.md","line":2,"column":7}
---
# Report missing-attribute at file level when yaml header missing
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    { "required": ["a"] }
  a.md:
  b.md: |
    ---
    ---
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'a'","file":"a.md","line":1,"column":1}
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'a'","file":"b.md","line":1,"column":1}
---
# Allow multiple metadata schema definitions
inputs:
  docfx.yml: |
    metadataSchema:
      - schema1.json
      - schema2.json
  schema1.json: |
    { "required": ["a"] }
  schema2.json: |
    { "properties": { "key": { "type": "string" } } }
  a.md: |
    ---
    key: []
    ---
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'a'","file":"a.md","line":2,"column":1}
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'String' but got 'Array'","file":"a.md","line":2,"column":6}
---
# Validate each metadata schema individually for multiple metadata schema definitions
inputs:
  docfx.yml: |
    metadataSchema:
      - schema1.json
      - schema2.json
  schema1.json: |
    { "required": ["a"], "properties": { "key": { "type": "string" } } }
  schema2.json: |
    { "required": ["b"], "properties": { "key": { "type": "array" } } }
  a.md: |
    ---
    key: 1
    ---
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'a'","file":"a.md","line":2,"column":1}
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'String' but got 'Integer'","file":"a.md","line":2,"column":6}
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'b'","file":"a.md","line":2,"column":1}
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'Array' but got 'Integer'","file":"a.md","line":2,"column":6}
---
# Json schema microsoft alias rule: Mute error, when no connection with Graph API
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: over123
    ---
outputs:
  a.json: |
    { "ms.author": "over123" }
---
# Json schema microsoft alias rule: The author is in the allow list
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":["amlstudiodocs", "over123"]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: over123
    ---
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json: |
    { "ms.author": "over123" }
---
# Json schema microsoft alias rule: The author is in the cache
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: over123
    ---
cache:
  msgraph-users.json: |
    { 
      "items": [{ "alias": "over123", "id": "1" }]
    }
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json: |
    { "ms.author": "over123" }
---
# Json schema microsoft alias rule: Missing author in the cache
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: over123
    ---
cache:
  msgraph-users.json: |
    { 
      "items": [{ "alias": "over123" }]
    }
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"ms-alias-invalid","message":"Invalid value for 'ms.author', 'over123' is not a valid Microsoft alias","file":"a.md","line":2,"column":12}
---
# Json schema microsoft alias rule: The author is valid with graph call
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: yufeih
    ---
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json: |
    { "ms.author": "yufeih" }
---
# Json schema microsoft alias rule: The author is invalid with graph call
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: abc1234cba
    ---
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"ms-alias-invalid","message":"Invalid value for 'ms.author', 'abc1234cba' is not a valid Microsoft alias","file":"a.md","line":2,"column":12}
---
# Content validation end to end scenario 
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Missing",
            "message": "H1 is required. Use a single hash (#) followed by a space to create your top-level heading.",
            "exclusions": [ "toc", "includes", "hubpage", "landingpage" ],
            "severity": "WARNING",
            "code": "h1-missing"
          }
        ]
      }
    }
  a.md: |
    This is test.
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"h1-missing","message":"H1 is required. Use a single hash (#) followed by a space to create your top-level heading.","file":"a.md","line":1}
---
# Validate included markdown files within Yaml file
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Missing",
            "message": "H1 is required. Use a single hash (#) followed by a space to create your top-level heading.",
            "exclusions": [],
            "severity": "WARNING",
            "code": "h1-missing"
          }
        ]
      }
    }
  docs/a.yml: |
    #YamlMime:YamlDocument
    documentType: LandingData
    title: my title
    content: |
      [!include[](b.md)]
  docs/b.md: |
    This is test.
outputs:
  docs/a.json: |
    {
      "title": "my title"
    }
  docs/b.json:
  .errors.log: |
    {"message_severity":"warning","code":"h1-missing","message":"H1 is required. Use a single hash (#) followed by a space to create your top-level heading.","file":"docs/b.md","line":1}
---
# Skip content validation for yaml files
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Missing",
            "message": "H1 is required. Use a single hash (#) followed by a space to create your top-level heading.",
            "exclusions": [],
            "severity": "WARNING",
            "code": "h1-missing"
          }
        ]
      }
    }
  docs/a.yml: |
    #YamlMime:YamlDocument
    documentType: LandingData
    title: my title
    abstract:
      description: this is test.
outputs:
  docs/a.json: |
    {
      "title": "my title"
    }
---
# Json schema docset unique: the attribute value must be unique within docset
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    {
      "docsetUnique": [ "title", "description"]
    }
  a.md: |
    ---
    title: title1
    description: description1
    ---
  b.md: |
    ---
    description: description1
    title: title2
    ---
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"duplicate-attribute","message":"Attribute 'description' with value 'description1' is duplicated in 'a.md(3,14)', 'b.md(2,14)'","file":"b.md","line":2,"column":14}
    {"message_severity":"suggestion","code":"duplicate-attribute","message":"Attribute 'description' with value 'description1' is duplicated in 'a.md(3,14)', 'b.md(2,14)'","file":"a.md","line":3,"column":14}
---
# Json schema docset unique: null/empty values are not in-scope
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    {
      "docsetUnique": [ "title", "description"]
    }
  a.md: |
    ---
    title: null
    description:
    ---
  b.md: |
    ---
    description:
    title: null
    ---
outputs:
  a.json:
  b.json:
---
# Json schema docset unique: global metadata and file metadata
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    globalMetadata:
      description: abc
  schema.json: |
    {
      "docsetUnique": ["description"]
    }
  a.md: |
    ---
    description: abc
    ---
  b.md:
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"duplicate-attribute","message":"Attribute 'description' with value 'abc' is duplicated in 'a.md(2,14)', 'docfx.yml(3,16)'","file":"a.md","line":2,"column":14}
    {"message_severity":"suggestion","code":"duplicate-attribute","message":"Attribute 'description' with value 'abc' is duplicated in 'a.md(2,14)', 'docfx.yml(3,16)'","file":"docfx.yml","line":3,"column":16}
---
# Json schema length rule: the length of string must be in range of MinLength and MaxLength
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    { 
      "properties":
      { 
        "description": {
          "type": [
            "string",
            "null"
          ],
          "minLength": 2,
          "maxLength": 10
        }
      }
    }
  a.md: |
    ---
    description: a
    ---
  b.md: |
    ---
    description: a long description
    ---
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"warning","code":"string-length-invalid","message":"String 'description' length should be >= 2","file":"a.md","line":2,"column":14}
    {"message_severity":"warning","code":"string-length-invalid","message":"String 'description' length should be <= 10","file":"b.md","line":2,"column":14}
---
# Content validation - H1 unique
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Unique",
            "message": "H1 '{0}' is duplicated with other articles: '{1}'",
            "code": "duplicate-h1",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # Title 1
  b.md: |
    # Title 1
  c.md: |
    # Title 2
outputs:
  a.json:
  b.json:
  c.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md'","file":"b.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md'","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# Content validation - Publish Url - max level
# Validation is only worked in the conceptual page
inputs:
  docfx.yml: |
    monikerRange:
      'v1/**': '< netcore-2.0'
      'v2/**': '>= netcore-2.0'
    markdownValidationRules: rules.json
    basePath: /docs
    routes:
      v1/: folder/
      v2/: folder/
      folder0/: folder/
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
      ]
    }
  redirections.yml: |
    redirections:
      folder0/folder1/folder2/c.md: "docs/folder/folder1/c"
  rules.json: |
    {
      "publishurls": {
        "name": "PublishUrls",
        "description": "Validates publish urls",
        "aliases": null,
        "rules": [
          {
            "type": "MaxLevel",
            "message": "Article URL '{0}' is '{1}' levels deep. For SEO, URLs should be '{2}' levels or fewer.",
            "code": "path-too-deep",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc",
              "redirection"
            ],
            "excludedDocfxVersions": [
              "v2"
            ],
            "maxLevel": 4
          }
        ]
      }
    }
  folder0/folder1/folder2/index.md:  
  v1/folder1/folder2/a.md: |
    Moniker: netcore-1.0
  v2/folder1/folder2/a.md: |
    Moniker: netcore-2.0
  folder0/folder1/folder2/TOC.md:
  folder0/b.md: '![](folder1/folder2/image.png)'
  folder0/folder1/folder2/image.png:
outputs:
  docs/folder/folder1/folder2/index.json:
  docs/136a42ac/folder/folder1/folder2/a.json: 
  docs/4667fedf/folder/folder1/folder2/a.json: 
  docs/folder/folder1/folder2/toc.json:
  docs/folder/b.json: |
    {"conceptual": "<p><img src=\"folder1/folder2/image.png\" alt=\"\" data-linktype=\"relative-path\"></p>"}
  docs/folder/folder1/folder2/image.png:
  .errors.log: |
    {"message_severity":"suggestion","code":"path-too-deep","message":"Article URL '/docs/folder/folder1/folder2/' is '5' levels deep. For SEO, URLs should be '4' levels or fewer.","file":"folder0/folder1/folder2/index.md"}
    {"message_severity":"suggestion","code":"path-too-deep","message":"Article URL '/docs/folder/folder1/folder2/a' is '5' levels deep. For SEO, URLs should be '4' levels or fewer.","file":"v1/folder1/folder2/a.md"}
    {"message_severity":"suggestion","code":"path-too-deep","message":"Article URL '/docs/folder/folder1/folder2/a' is '5' levels deep. For SEO, URLs should be '4' levels or fewer.","file":"v2/folder1/folder2/a.md"}
---
# Content validation - Publish Url - segment uniqueness
# Validation is only worked in the conceptual page
inputs:
  docfx.yml: |
    monikerRange:
      'v1/**': '< netcore-2.0'
      'v2/**': '>= netcore-2.0'
    markdownValidationRules: rules.json
    basePath: /docs
    routes:
      v1/: folder/
      v2/: folder/
      folder0/: folder/
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
      ]
    }
  redirections.yml: |
    redirections:
      folder0/duplicatedword/duplicatedword/c.md: "docs/folder/folder1/c"
  rules.json: |
    {
      "publishurls": {
        "name": "PublishUrls",
        "description": "Validates publish urls",
        "aliases": null,
        "rules": [
          {
            "type": "SegmentUnique",
            "message": "Article URL '{0}' contains duplicated text '{1}'. For SEO, article URLs should not contain duplication.",
            "code": "path-duplication",
            "severity": "SUGGESTION",
            "exclusions": [
              "inclusion",
              "landingpage",
              "hubpage",
              "toc",
              "redirection"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  folder0/duplicatedword/duplicatedword/index.md: '![](./image.png)'
  v1/duplicatedword/folder1/DuplicatedWord.md: |
    Moniker: netcore-1.0
  v2/duplicatedword/folder1/DuplicatedWord.md: |
    Moniker: netcore-2.0
  folder0/duplicatedword/duplicatedword/TOC.md:
  folder0/duplicatedword/duplicatedword/image.png:
  folder0/duplicated-base-path/docs/a.md:
outputs:
  docs/folder/duplicatedword/duplicatedword/index.json:
  docs/136a42ac/folder/duplicatedword/folder1/duplicatedword.json: 
  docs/4667fedf/folder/duplicatedword/folder1/duplicatedword.json: 
  docs/folder/duplicatedword/duplicatedword/toc.json:
  docs/folder/duplicatedword/duplicatedword/image.png:
  docs/folder/duplicated-base-path/docs/a.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"path-duplication","message":"Article URL '/docs/folder/duplicatedword/duplicatedword/' contains duplicated text 'duplicatedword'. For SEO, article URLs should not contain duplication.","file":"folder0/duplicatedword/duplicatedword/index.md"}
    {"message_severity":"suggestion","code":"path-duplication","message":"Article URL '/docs/folder/duplicatedword/folder1/duplicatedword' contains duplicated text 'duplicatedword'. For SEO, article URLs should not contain duplication.","file":"v1/duplicatedword/folder1/DuplicatedWord.md"}
    {"message_severity":"suggestion","code":"path-duplication","message":"Article URL '/docs/folder/duplicatedword/folder1/duplicatedword' contains duplicated text 'duplicatedword'. For SEO, article URLs should not contain duplication.","file":"v2/duplicatedword/folder1/DuplicatedWord.md"}
    {"message_severity":"suggestion","code":"path-duplication","message":"Article URL '/docs/folder/duplicated-base-path/docs/a' contains duplicated text 'docs'. For SEO, article URLs should not contain duplication.","file":"folder0/duplicated-base-path/docs/a.md"}
---
# Validate user html
inputs:
  docfx.yml:
  a.md: |
    <H2 id="head" TITLE="HEAD"></H2>
    <BUTTON>click</BUTTON>
    <img height="docs"></img>
    <h1 height="docs"></h1>
    <div onclick="alert();" data-source="docs"></div>
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"info","code":"disallowed-html","message":"HTML tag 'H2' isn't allowed. Disallowed HTML poses a security risk and must be replaced with approved Docs Markdown syntax.","file":"a.md","line":1,"column":2}
    {"message_severity":"info","code":"disallowed-html","message":"HTML tag 'BUTTON' isn't allowed. Disallowed HTML poses a security risk and must be replaced with approved Docs Markdown syntax.","file":"a.md","line":2,"column":2}
    {"message_severity":"info","code":"disallowed-html","message":"HTML tag 'h1' isn't allowed. Disallowed HTML poses a security risk and must be replaced with approved Docs Markdown syntax.","file":"a.md","line":4,"column":2}
    {"message_severity":"info","code":"disallowed-html","message":"HTML attribute 'onclick' on tag 'div' isn't allowed. Disallowed HTML poses a security risk and must be replaced with approved Docs Markdown syntax.","file":"a.md","line":5,"column":6}
---
# Content Validation - Setex Headings
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude: b.md
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "SetexHeadings",
            "message": "Bad {0} format. Use hashes to create H1(#) or H2(##)",
            "code": "headings-with-underline",
            "severity": "SUGGESTION",
            "exclusions": [
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # Title 1 With Hashe
    ## Title 2 With Hashes

    Title 1
    =======

    Title 2
    -------

    Multiple Title2 Line 1
    Multiple Title2 Line 2
    -------

    # Title With Hash and underline
    ======

        Not A title 1
    ======

    Not A Title 2
        ------

    [!include[](b.md)]
  b.md: |
    Title 2
    ------
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"headings-with-underline","message":"Bad h1 'Title 1' format. Use hashes to create H1(#) or H2(##)","file":"a.md","line":5,"end_line":5,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"headings-with-underline","message":"Bad h2 'Title 2' format. Use hashes to create H1(#) or H2(##)","file":"a.md","line":8,"end_line":8,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"headings-with-underline","message":"Bad h2 'Multiple Title2 Line 1\nMultiple Title2 Line 2' format. Use hashes to create H1(#) or H2(##)","file":"a.md","line":12,"end_line":12,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"headings-with-underline","message":"Bad h2 'Title 2'(b.md(2,1)) format. Use hashes to create H1(#) or H2(##)","file":"a.md","line":23,"end_line":23,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"headings-with-underline","message":"Bad h2 'Title 2' format. Use hashes to create H1(#) or H2(##)","file":"b.md","line":2,"end_line":2,"column":1,"end_column":1}
---
# Content Validation - Skip Level
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude:
      - b.md
      - c.md
      - d.md
      - e.md
      - f.md
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "SkipLevel",
            "message": "Skipped heading: {0} followed by heading: {1}. Headings must increment with no skipped levels",
            "code": "heading-skipped",
            "severity": "SUGGESTION",
            "exclusions": [
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # Title 1-1
    ### Title 3

    # Title 1-2
    [!include[](b.md)]

    [!include[](b.md)]
    ##### Title 5

    [!include[](b.md)]
    [!include[](c.md)]

    [!include[](d.md)]

    [!include[](e.md)]

    [!include[](f.md)]
    ## Title 2
  normal-1.md: |
    # Title 1-3
    ## Title 2
    ### Title 3
    # Title 1-4
  normal-2.md: |
    ### Title 3
    # Title 1-4
  b.md: |
    ### Title 3-b
  c.md: |
    ##### Title 5-c
  d.md: |
    ### Title 3-d
    ##### Title 5-d
  e.md: |
    [!include[](b.md)]
    [!include[](c.md)]

    [!include[](d.md)]
  f.md:
outputs:
  a.json:
  normal-1.json:
  normal-2.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h1 'Title 1-1' followed by heading: h3 'Title 3'. Headings must increment with no skipped levels","file":"a.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h1 'Title 1-2' followed by heading: h3 'Title 3-b'(b.md). Headings must increment with no skipped levels","file":"a.md","line":5,"end_line":5,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h3 'Title 3-b'(b.md) followed by heading: h5 'Title 5'. Headings must increment with no skipped levels","file":"a.md","line":8,"end_line":8,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h3 'Title 3-b'(b.md) followed by heading: h5 'Title 5-c'(c.md). Headings must increment with no skipped levels","file":"a.md","line":11,"end_line":11,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h3 'Title 3-d'(d.md) followed by heading: h5 'Title 5-d'(d.md(2,1)). Headings must increment with no skipped levels","file":"a.md","line":13,"end_line":13,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h3 'Title 3-b'(b.md) followed by heading: h5 'Title 5-c'(c.md). Headings must increment with no skipped levels","file":"a.md","line":15,"end_line":15,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h3 'Title 3-d'(d.md) followed by heading: h5 'Title 5-d'(d.md(2,1)). Headings must increment with no skipped levels","file":"a.md","line":15,"end_line":15,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h3 'Title 3-d' followed by heading: h5 'Title 5-d'. Headings must increment with no skipped levels","file":"d.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h3 'Title 3-b'(b.md) followed by heading: h5 'Title 5-c'(c.md). Headings must increment with no skipped levels","file":"e.md","line":2,"end_line":2,"column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: h3 'Title 3-d'(d.md) followed by heading: h5 'Title 5-d'(d.md(2,1)). Headings must increment with no skipped levels","file":"e.md","line":4,"end_line":4,"column":1,"end_column":1}
---
# Content validation - h1 in inclusion
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude:
      - b.md
      - c.md
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "InclusionH1",
            "message": "H1 headings aren't allowed in included files. Every parent file should have an H1.",
            "code": "h1-in-include",
            "severity": "SUGGESTION",
            "exclusions": [
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # H1 -a
    [!include[](b.md)]
  b.md: |
    # H1 -b
    [!include[](c.md)]
  c.md: |
    # H1 -c
    ------
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-include","message":"H1 headings aren't allowed in included files. Every parent file should have an H1.","file":"b.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-include","message":"H1 headings aren't allowed in included files. Every parent file should have an H1.","file":"b.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-include","message":"H1 headings aren't allowed in included files. Every parent file should have an H1.","file":"c.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# Content Validation - EmptyHeadings
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude: b.md
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "HeadingEmpty",
            "message": "Empty h{0}. Headings must have content.",
            "code": "heading-empty",
            "severity": "SUGGESTION",
            "exclusions": [
              "landingpage",
              "hubpage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    Empty headings
    ## 
    ###
    #### <div></div>
    #####            
    ###### &nbsp;
    ###### &#160;
    ###### <a href="image.png"></a>
    ###### <a href="image.png"> &nbsp; </a>
    ###### <div><a href="image.png"> &nbsp; </a><div>
    ###### <img src="image.png" alt="xxx"/>
    Ignore empty h1
    # 
    Headings below are not empty.
    ###### <span>abc</span>
    ###### <a href="image.png">abc</a>
    [!include[](b.md)]
  b.md: |
    ## 
  image.png:
outputs:
  a.json:
  image.png:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h2. Headings must have content.","file":"a.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h3. Headings must have content.","file":"a.md","line":3,"end_line":3,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h4. Headings must have content.","file":"a.md","line":4,"end_line":4,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h5. Headings must have content.","file":"a.md","line":5,"end_line":5,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h6. Headings must have content.","file":"a.md","line":6,"end_line":6,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h6. Headings must have content.","file":"a.md","line":7,"end_line":7,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h6. Headings must have content.","file":"a.md","line":8,"end_line":8,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h6. Headings must have content.","file":"a.md","line":9,"end_line":9,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h6. Headings must have content.","file":"a.md","line":10,"end_line":10,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h6. Headings must have content.","file":"a.md","line":11,"end_line":11,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h2. Headings must have content.","file":"a.md","line":17,"end_line":17,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty h2. Headings must have content.","file":"b.md","line":1,"end_line":1,"column":1,"end_column":1}
