---
# note token text can be replaced by template
repos:
  https://docs.com/markdown-note:
  - files:
      docfx.yml: |
        template: https://docs.com/template/token
      docs/a.md: |
        >[!NOTE]
        >note
  https://docs.com/template/token:
  - files:
      ContentTemplate/token.json: |
        { "note": "<p>my note</p>" }
outputs:
  docs/a.json: |
    { "conceptual": "<div class=\"NOTE\"><p>my note</p><p>note</p></div>" }
---
# Run data-transform if provided, by default return {"content": "serialized json"}
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestData
    prop: value
  _themes/ContentTemplate/TestData.json.js: |
    exports.transform = function (model) {
      return {
        content: JSON.stringify({result: model.prop + " has run js data transform"})
      }
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: "{}"
outputs:
  a.json: |
    {"result": "value has run js data transform"}
---
# Run data-transform if provided in legacy mode, by default return {"content": "serialized json"}
legacy: true
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestData
    prop: value
  _themes/ContentTemplate/TestData.json.js: |
    exports.transform = function (model) {
      return {
        content: JSON.stringify({result: model.prop + " has run js data transform"})
      }
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: "{}"
outputs:
  a.json: |
    {"result": "value has run js data transform"}
---
# Run data-transform if provided, and return raw object if content property is not serialized json object
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestData
    prop: value
  _themes/ContentTemplate/TestData.json.js: |
    exports.transform = function (model) {
      return {
        result: model.prop + " has run js data transform",
        content: "raw string"
      }
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: "{}"
outputs:
  a.json: |
    {
      "result": "value has run js data transform",
      "content": "raw string"
    }
---
# Don't run data-transform if corresponding js not provided
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestData
    prop: value
  _themes/ContentTemplate/schemas/TestData.schema.json: "{}"
outputs:
  a.json: |
    {"prop": "value"}
---
# SDP page in none-legacy mode
# don't run any js transform or mustache, only produce .json output
inputs:
  docfx.yml:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "contentType": "markdown"
        }
      }
    }
  a.yml: |
    ### YamlMime: TestPage
    metadata:
      key: value
    content: |
      **marked-up**
    title: this is title
outputs:
  a.json: |
    {
      "metadata": {
        "key": "value"
      },
      "content": "<p><strong>marked-up</strong></p>",
      "title": "this is title"
    }
---
# html post process for `markdown` properties
inputs:
  docfx.yml:
  a.yml: |
    #YamlMime:TestData
    markdown: |
      # h1
      <script>alert(0);</script>
      <link rel="stylesheet" href="https://a.com/b.css" />
      <div style="display:hidden"></div>
      <style>h1 {color:red;}</style>
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "markdown": {"contentType": "markdown"}
      }
    }
  _themes/ContentTemplate/TestData.html.primary.js: |
    exports.transform = function (model) {
      return model.prop;
    }
outputs:
  a.json: |
    {"markdown":"<h1 id=\"h1\">h1</h1><div></div>"}
---
# Loc build uses localized template with naming convention
locale: zh-cn
repos:
  https://docs.com/loc-template-test:
    - files:
        docfx.yml: |
          template: https://docs.com/loc-template
  https://docs.com/loc-template-test.zh-cn:
    - files:
        docfx.yml: |
          template: https://docs.com/loc-template.zh-cn
        a.yml: '#YamlMime:TestLocTemplate'
  https://docs.com/loc-template.zh-cn:
    - files:
        ContentTemplate/schemas/TestLocTemplate.schema.json: "{}"
outputs:
  a.json:
---
# Support <xref> tag in mustache template
legacy: true
inputs:
  docfx.yml: |
    xref: xrefmap.yml
  xrefmap.yml: |
    references:
      - uid: uid1
        name: uid1-name
        href: https://docs.com/uid1
      - uid: uid2
        name: uid2-name
        href: https://docfx.com/uid2
      - uid: uid-non-href
        name: uid-non-href-name
    
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "contentType": "xref"
        },
        "uid": {
          "type": "string",
          "contentType": "xref"
        },
        "uidPartial": {
          "type": "string",
          "contentType": "xref"
        },
        "uids": {
          "type": "array",
          "items": {
            "type": "string",
            "contentType": "xref"
          }
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string",
            "contentType": "xref"
          }
        }
      }
    }
  _themes/ContentTemplate/xref-partial-template.tmpl.partial: |
    <a href="{{href}}" class="partial"> {{name}} </a>
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <p>
      <xref uid="{{uid}}" />
      <xref uid="{{namespace}}" template="xref-partial-template.tmpl.partial" />
      {{#uids}}
        <xref uid="{{.}}" />
      {{/uids}}
      {{#namespaces}}
        <xref uid="{{.}}" template="xref-partial-template.tmpl.partial"/>
      {{/namespaces}}
      {{>partials/uid-partial}}
    </p>
  # normal partial include syntax, with <xref /> in partial template
  _themes/ContentTemplate/partials/uid-partial.tmpl.partial: |
    <xref uid="{{uidPartial}}"/>
  uid-resolve.yml: |
    ### YamlMime: TestPage
    uid: uid1
  uid-unresolve.yml: |
    ### YamlMime: TestPage
    uid: unresolve
  uid-non-href.yml: |
    ### YamlMime: TestPage
    uid: uid-non-href
  uid-partial.yml: |
    ### YamlMime: TestPage
    uidPartial: uid1
  uid-partial-template-resolve.yml: |
    ### YamlMime: TestPage
    namespace: uid1
  uid-partial-template-unresolve.yml: |
    ### YamlMime: TestPage
    namespace: unresolve
  uid-list.yml: |
    ### YamlMime: TestPage
    uids:
      - uid1
      - unresolve
      - uid2
  uid-list-partial.yml: |
    ### YamlMime: TestPage
    namespaces:
      - uid1
      - unresolve
      - uid2
outputs:
  uid-resolve.mta.json:
  uid-resolve.raw.page.json: |
    {"content": "<p> <a href=\"/en-us/uid1\" data-linktype=\"absolute-path\"> uid1-name </a> </p> "}
  uid-unresolve.mta.json:
  uid-unresolve.raw.page.json: |
    {"content": "<p> <span> unresolve </span> </p>"}
  uid-non-href.mta.json:
  uid-non-href.raw.page.json: |
    {"content": "<p> <span> uid-non-href-name </span> </p> "}
  uid-partial.mta.json:
  uid-partial.raw.page.json: |
    {"content": "<p> <a href=\"/en-us/uid1\" data-linktype=\"absolute-path\"> uid1-name </a> </p> "}
  uid-partial-template-resolve.mta.json:
  uid-partial-template-resolve.raw.page.json: |
    {"content": "<p> <a href=\"/en-us/uid1\" class=\"partial\" data-linktype=\"absolute-path\"> uid1-name </a> </p>"}
  uid-partial-template-unresolve.mta.json:
  uid-partial-template-unresolve.raw.page.json: |
    {"content": "<p> <span> unresolve </span> </p>"}
  uid-list.mta.json:
  uid-list.raw.page.json: |
    {"content": "<p> <a href=\"/en-us/uid1\" data-linktype=\"absolute-path\"> uid1-name </a> <span> unresolve </span> <a href=\"https://docfx.com/uid2\" data-linktype=\"external\"> uid2-name </a> </p> "}
  uid-list-partial.mta.json:
  uid-list-partial.raw.page.json: |
    {"content": "<p> <a href=\"/en-us/uid1\" class=\"partial\" data-linktype=\"absolute-path\"> uid1-name </a> <span> unresolve </span> <a href=\"https://docfx.com/uid2\" class=\"partial\" data-linktype=\"external\"> uid2-name </a> </p> "}
  .errors.log: |
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'unresolve'.","file":"uid-list.yml","line":4,"end_line":4,"column":5,"end_column":14}
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'unresolve'.","file":"uid-list-partial.yml","line":4,"end_line":4,"column":5,"end_column":14}
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'unresolve'.","file":"uid-partial-template-unresolve.yml","line":2,"end_line":2,"column":12,"end_column":21}
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'unresolve'.","file":"uid-unresolve.yml","line":2,"end_line":2,"column":6,"end_column":15}
---
# Leave xref-properties empty if not explicitly defined by author,
# to avoid unintentional inheritance from parent context
legacy: true
inputs:
  docfx.yml:
  _themes/ContentTemplate/schemas/XrefDeclaration.schema.json: |
    {
      "type": "object",
      "properties": {
        "uid": {"contentType": "uid"},
        "summary": {"type": "string"},
        "description": {"type": "string"}
      },
      "xrefProperties": ["summary", "description"]
    }
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "type": "object",
      "properties": {
        "uid": {"contentType": "xref"},
        "summary": {"type": "string"},
        "description": {"type": "string"}
      }
    }
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <p>
      parent summary: {{summary}}
      <xref uid="{{ uid }}" template="partials/xref-partial.tmpl" />
    </p>
  _themes/ContentTemplate/partials/xref-partial.tmpl: |
    {{#description}} uid description: {{description}} {{/description}}
    {{^description}} uid has no {{/description}}
    {{#summary}} uid summary: {{summary}} {{/summary}}
    {{^summary}} uid has no summary {{/summary}}

  uid-declaration.yml: |
    ### YamlMime: XrefDeclaration
    uid: uid
    description: uid description
  uid-reference.yml: |
    ### YamlMime: TestPage
    uid: uid
    summary: parent summary
outputs:
  uid-declaration.json:
  uid-reference.mta.json:
  uid-reference.raw.page.json: |
    {
      "content": "
        <p>
          parent summary: parent summary
          uid description: uid description
          uid has no summary
        </p>"
    }
---
# Uid self reference 
legacy: true
inputs:
  docfx.yml:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "properties": {
        "uid": {"contentType": "uid"},
        "uids": {
          "items": {
            "properties": {
              "uid": {"contentType": "uid"}
            },
            "xrefProperties": ["name"]
          }
        }
      },
      "xrefProperties": ["name", "uid"]
    }
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <p>
      <xref uid="{{ uid }}" />
      {{#uids}}
        <xref uid="{{uid}}" />
      {{/uids}}
    </p>

  # normal partial include syntax, with <xref /> in partial template
 
  self-uid.yml: |
    ### YamlMime: TestPage
    uid: uid
    name: root name
    uids:
      - uid: child-1
        name: child-1 name
      - uid: child-2
        name: child-2 name

outputs:
  self-uid.mta.json:
  self-uid.raw.page.json: |
    {
      "content": "
        <p>
            <a href=\"self-uid\" data-linktype=\"relative-path\"> root name </a>
            <a href=\"self-uid#child_1\" data-linktype=\"relative-path\"> child-1 name </a>
            <a href=\"self-uid#child_2\" data-linktype=\"relative-path\"> child-2 name </a>
        </p>"
    }
---
# Known variables in <xref> tag does not fallback to parent scope.
legacy: true
inputs:
  docfx.yml:
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "properties": {
        "uid": {"contentType": "uid"},
        "xrefs": {
          "items": {
            "properties": {
              "uid": {"contentType": "xref"}
            }
          }
        }
      },
      "xrefProperties": ["name"]
    }
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <p>
      <xref uid="{{ uid }}" />
      {{#xrefs}}
        <xref uid="{{uid}}" />
      {{/xrefs}}
    </p>
 
  a.yml: |
    ### YamlMime: TestPage
    uid: uid
    name: root name
    xrefs:
      - uid: unresolved1
        name: unresolved1 name
      - uid: unresolved2

outputs:
  a.mta.json:
  a.raw.page.json: |
    {
      "content": "
        <p>
            <a href=\"a\" data-linktype=\"relative-path\"> root name </a>
            <span> unresolved1 </span>
            <span> unresolved2 </span>
        </p>"
    }
  .errors.log: |
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'unresolved1'.","file":"a.yml","line":5,"end_line":5,"column":10,"end_column":21}
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'unresolved2'.","file":"a.yml","line":7,"end_line":7,"column":10,"end_column":21}
---
# Known variables in <xref> tag for external xref spec does not fallback to parent scope.
legacy: true
inputs:
  docfx.yml: |
    xref: xref.yml
  xref.yml: |
    references:
    - uid: Edm.Int32
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "properties": {
        "xref": { "contentType": "xref" }
      }
    }
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <xref uid="{{ xref }}" />
    <xref uid="{{ type }}" />
  a.yml: |
    ### YamlMime: TestPage
    xref: Edm.Int32
    type: Missing
    name: name
outputs:
  a.mta.json:
  a.raw.page.json: |
    { "content": "<span>Edm.Int32</span><span>Missing</span>" }
