---
# Normal file reference
inputs:
  docfx.yml:
  index.md:
  docs/TOC.md: |
    # [Index Reference](index.md)
    ## Existing File Reference
    ### [Reference Normal File 1](n1.md)
    ### [Reference Normal File 2](../index.md)
    ### [Reference Normal File 3](f1/n1.md?branch=master)
    ### [Reference Normal File 4](~/docs/n1.md)
    ### [@Reference Normal File 5](n1.md)
    ### [Title with escape '\]'](n1.md)
  docs/index.md:
  docs/n1.md:
  docs/f1/n1.md:
outputs:
  index.json:
  docs/index.json:
  docs/n1.json:
  docs/f1/n1.json:
  docs/toc.json: |
    {
      "items":[{
        "name":"Index Reference",
        "href":"./",
        "items":[{
          "name":"Existing File Reference",
          "items":[
            { "name":"Reference Normal File 1", "href":"n1" },
            { "name":"Reference Normal File 2", "href":"../" },
            { "name":"Reference Normal File 3", "href":"f1/n1?branch=master" },
            { "name":"Reference Normal File 4", "href":"n1" },
            { "name":"@Reference Normal File 5", "href":"n1" },
            { "name": "Title with escape ']'", "href": "n1" }
          ]
        }]
      }]
    }
---
# TOC can be a json file
inputs:
  docfx.yml:
  docs/TOC.json: |
    [{ "name": "title" }]
outputs:
  docs/toc.json: |
    {
      "items":[{ "name":"title" }]
    }
---
# TOC json file is invalid
inputs:
  docfx.yml:
  docs/TOC.json: |
    [{ "name": "title" ]
outputs:
  .errors.log: |
    ["error","json-syntax-error","JsonToken EndArray is not valid for closing JsonType Object.","docs/TOC.json",1,20]
---
# Probe TOC in JSON format
inputs:
  docfx.yml:
  docs/TOC.json: |
    [{ "name": "a", "href": "a/?query" }]
  docs/a/TOC.json: |
    [{ "name": "b", "href": "b.md" }]
  docs/a/b.md:
outputs:
  docs/toc.json: |
    {
      "items": [{ "name": "a", "href": "a/b" }]
    }
  docs/a/toc.json: |
    {
      "items": [{ "name": "b", "href": "b" }]
    }
  docs/a/b.json:
---
# TOC.md can contain xml comments
inputs:
  docfx.yml:
  TOC.md: |
    <!-- this is an xml comment -->
outputs:
  toc.json:
---
# No-existing file reference
inputs:
  docfx.yml:
  docs/index.md:
  docs/TOC.md: |
    # [Index Reference](index.md)
    ## No Existing File Reference
    ### [Reference No-Existing File 1](no-existing.md)
    ### [Reference No-Existing File 2](no-existing.system.md)
    ### [Reference No-Existing File 3](../no-existing.md)
    ### [Reference No-Existing File 4](~/docs/no-existing.md)
outputs:
  docs/index.json:
  docs/toc.json: |
    {
      "items":[{
        "items":[{
          "items":[
            { "name":"Reference No-Existing File 1", "href":"no-existing.md" },
            { "name":"Reference No-Existing File 2", "href":"no-existing.system.md" },
            { "name":"Reference No-Existing File 3", "href":"../no-existing.md" },
            { "name":"Reference No-Existing File 4", "href":"~/docs/no-existing.md" }
          ]
        }]
      }]
    }
  .errors.log: |
    ["warning","file-not-found","Invalid file link: 'no-existing.md'.","docs/TOC.md",3,5]
    ["warning","file-not-found","Invalid file link: 'no-existing.system.md'.","docs/TOC.md",4,5]
    ["warning","file-not-found","Invalid file link: '../no-existing.md'.","docs/TOC.md",5,5]
    ["warning","file-not-found","Invalid file link: '~/docs/no-existing.md'.","docs/TOC.md",6,5]
---
# Invalid markdown TOC metadata
inputs:
  docfx.yml:
  docs/TOC.md: |
    ---
    pdf_absolute_path: []
    ---
outputs:
  .errors.log: |
    ["error","violate-schema","Expected type String, please input String or type compatible with String.","docs/TOC.md",2,20]
---
# Absolute file reference
inputs:
  docfx.yml:
  docs/index.md:
  docs/TOC.md: |
    # [Index Reference](index.md)
    ## Absolute File Reference
    ### [Reference Absolute path 1](https://worldready.cloudapp.net/Styleguide/Read?id=2700&topicid=26906)
    ### [Reference Absolute Path 2](/help/style/style-how-to-accessibility?toc=/help/contribute/TOC.json&bc=toc=%2Fazure%2Fapi-management%2Ftoc.json)
outputs:
  docs/index.json:
  docs/toc.json: |
    {
      "items":[{
        "items":[{
          "items":[
            { "name":"Reference Absolute path 1", "href":"https://worldready.cloudapp.net/Styleguide/Read?id=2700&topicid=26906" },
            { "name":"Reference Absolute Path 2", "href":"/help/style/style-how-to-accessibility?toc=/help/contribute/TOC.json&bc=toc=%2Fazure%2Fapi-management%2Ftoc.json" }
          ]
        }]
      }]
    }
---
# Nested TOC reference 1
# reference toc
inputs:
  docfx.yml:
  docs/TOC.md: |
    # [Reference TOC File 1](f1/TOC.md)
    # [Reference TOC File 2](../docs/f1/TOC.md)
    # [Reference TOC File 3](~/docs/f1/TOC.md)
  docs/f1/TOC.md: |
    # [Index Reference](index.md)
  docs/f1/index.md:
outputs:
  docs/f1/index.json:
  docs/toc.json: |
    {
       "items":[
         { "items":[{ "name":"Index Reference", "href":"f1/" }] },
         { "items":[{ "name":"Index Reference", "href":"f1/" }] },
         { "items":[{ "name":"Index Reference", "href":"f1/" }] }
       ]
    }
---
# Nested TOC reference 2
# multiple level
# docs/TOC.md -> docs/f1/TOC.md  -> docs/f2/TOC.md
#             -> docs/f2/TOC.md --> docs/f1/f11/TOC.md
inputs:
  docfx.yml:
  docs/TOC.md: |
    # [Reference TOC File 1](f1/TOC.md)
    # [Reference TOC File 2](~/docs/f2/TOC.yml)
  docs/f1/TOC.md: |
    # [Reference TOC Folder](../f2/)
  docs/f2/TOC.yml: |
    - name: Toc Reference
      href: ../f1/f11/TOC.md
  docs/f1/f11/TOC.md: |
    # [Index Reference](index.md)
    # [A File reference](a.md)
  docs/f1/f11/index.md:
  docs/f1/f11/a.md:
outputs:
  docs/f1/f11/index.json:
  docs/f1/f11/a.json:
  docs/toc.json: |
    {
      "items": [
        { "items": [{ "name": "Reference TOC Folder", "href": "f1/f11/" }] },
        {
          "items": [{
            "items": [
              { "name": "Index Reference", "href": "f1/f11/" },
              { "name": "A File reference", "href": "f1/f11/a" }
            ]
          }]
        }
      ]
    }
  .dependencymap.json: |
    {
      "dependencies": {
        "docs/f1/f11/TOC.md": [
            { "source": "docs/f1/f11/a.md", "type": "link" },
            { "source": "docs/f1/f11/index.md", "type": "link" }
        ],
        "docs/f1/TOC.md": [
            { "source": "docs/f1/f11/index.md", "type": "link" },
            { "source": "docs/f2/TOC.yml", "type": "tocInclusion" }
        ],
        "docs/f2/TOC.yml": [
            { "source": "docs/f1/f11/TOC.md", "type": "tocInclusion" }
        ],
        "docs/TOC.md": [
            { "source": "docs/f1/TOC.md", "type": "tocInclusion" },
            { "source": "docs/f2/TOC.yml", "type": "tocInclusion" },
        ]
      }
    }
---
# Title with # or End with #
inputs:
  docfx.yml:
  docs/TOC.md: |
    # [Topic1](index.md) #
    ## Topic1.1 Language C#
    ### [Topic1.1.1](/href1.1.1) ##
    ## [Topic1.2 Language Java]() ##
    ### [Topic1.2.1](/href1.2.1) ##
    # [Topic2](https://github.com/docfx) #
  docs/index.md:
outputs:
  docs/index.json:
  docs/toc.json: |
    {
      "items":[
        {
          "name": "Topic1",
          "items": [
            {
              "items":[{ "name":"Topic1.1.1", "href":"/href1.1.1" }],
              "name":"Topic1.1 Language C#"
            },
            {
              "items":[{ "name":"Topic1.2.1", "href":"/href1.2.1" }],
              "name":"Topic1.2 Language Java",
            }
          ]
        },
        { "name":"Topic2", "href":"https://github.com/docfx" }
      ]
    }
---
# Circle toc referencing 1
inputs:
  docfx.yml: |
    files: docs/TOC.md
  docs/TOC.md: |
    # [Topic1](index.md) #
    ## Reference toc
    ### [Reference TOC 1.1](f1/TOC.md)
    ### [Reference TOC 1.2](f1/TOC.md)
    ### [Reference TOC 2.1](f2/TOC.md)
  docs/f1/TOC.md: |
    # [Topic1](../index.md)
    ## [Reference TOC 1.1.1](../f2/TOC.md)
  docs/f2/TOC.md: |
    # [Topic1](../index.md)
    ## [Reference TOC back](../TOC.md)
  docs/index.md:
outputs:
  .errors.log: |
    ["error","circular-reference","Build has identified file(s) referencing each other: 'docs/TOC.md' --> 'docs/f1/TOC.md' --> 'docs/f2/TOC.md' --> 'docs/TOC.md'","docs/TOC.md",1,1]
---
# Circle toc referencing 2
inputs:
  docfx.yml: |
    files: docs/TOC.md
  docs/TOC.md: |
    # [Topic1](index.md) #
    ## [Reference itself](TOC.md)
  docs/index.md:
outputs:
  .errors.log: |
    ["error","circular-reference","Build has identified file(s) referencing each other: 'docs/TOC.md' --> 'docs/TOC.md'","docs/TOC.md",1,1]
---
# Reference to a folder, basic usages
# Reference to a folder behavior is not same with reference to a toc file
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: Toc Reference
      href: f1/TOC.md
    - name: Folder Reference1
      href: f1/
    - name: Folder Reference2
      href: f1/
      topicHref: f1/a.md
  docs/f1/TOC.md: |
    # [Index Reference](index.md)
  docs/f1/index.md:
  docs/f1/a.md:
outputs:
  docs/f1/a.json:
  docs/f1/index.json:
  docs/toc.json: |
    {
      "items":[
        {
          "name":"Toc Reference",
          "items":[{ "name":"Index Reference", "href":"f1/" }]
        },
        { "name":"Folder Reference1", "href":"f1/" },
        { "name":"Folder Reference2", "href":"f1/a" }
      ]
    }
---
# Reference to a folder, nested toc
# Folder referenced toc doesn't belong to nested toc
inputs:
  docfx.yml:
  docs/TOC.md: |
    # [Folder Reference](f1/)
  docs/f1/TOC.md: |
    # [Index Reference](index.md)
  docs/f1/index.md:
outputs:
  docs/f1/index.json:
  docs/toc.json: |
    {  
      "items": [{ "name":"Folder Reference", "href": "f1/" }]
    }
  docs/f1/toc.json:
---
# Reference to a folder, first child
# The href should be the first child with href in referenced toc
# Horizontal traversal first
inputs:
  docfx.yml:
  docs/TOC.md: |
    # [Folder Reference1](f1/)
    # [Folder Reference2](f2/)
  docs/f1/TOC.md: |
    # Title
    # [File Reference](b.md)
  docs/f2/TOC.md: |
    # Title1
    ## Child Title1
    ## [File Reference](b.md)
    # [File Reference](a.md)
  docs/f1/b.md:
  docs/f2/a.md:
  docs/f2/b.md:
outputs:
  docs/f2/a.json:
  docs/f2/b.json:
  docs/f1/b.json:
  docs/toc.json: |
    {  
      "items":[  
        { "name":"Folder Reference1", "href":"f1/b" },
        { "name":"Folder Reference2", "href":"f2/a" }
      ]
    }
  docs/f1/toc.json:
  docs/f2/toc.json:
  .dependencymap.json: |
    {
      "dependencies": {
        "docs/f1/TOC.md": [
          { "source": "docs/f1/b.md", "type": "link" }
        ],
        "docs/f2/TOC.md": [
          { "source": "docs/f2/a.md", "type": "link" },
          { "source": "docs/f2/b.md", "type": "link" }
        ],
        "docs/TOC.md": [
          { "source": "docs/f1/TOC.md", "type": "tocInclusion" },
          { "source": "docs/f1/b.md", "type": "link" },
          { "source": "docs/f2/TOC.md", "type": "tocInclusion" },
          { "source": "docs/f2/a.md", "type": "link" }
        ]
      }
    }
---
# Topic href can replace href
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: File Reference
      topicHref: f1/a.md
  docs/f1/a.md:
outputs:
  docs/f1/a.json:
  docs/toc.json: |
    {
      "items":[{ "name":"File Reference", "href":"f1/a", "homepage": "f1/a" }]
    }
---
# Homepage only shows when topic href is set and href is not 
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: name1
      href: /f1/a
    - name: name2
      href: /f2/a
      topicHref: /f2/b
outputs:
  docs/toc.json: |
    {
      "items":[
         { "name":"name1", "href":"/f1/a", "homepage": undefined },
         { "name":"name2", "href":"/f2/b", "homepage": undefined }
      ]
    }
---
# Toc href takes precedence over topic href
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: Azure
      tocHref: /azure/
      topicHref: /azure/index
outputs:
  docs/toc.json: |
    {
      "items": [
        { "name": "Azure", "href": "/azure/", "tocHref": "/azure/", "topicHref": "/azure/index", "homepage": "/azure/index" }
      ]
    }
---
# Combine toc href, topic href => href + items
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: href + items
      topicHref: f1/a.md
      tocHref: f1/TOC.md
  docs/f1/a.md:
  docs/f1/TOC.md: |
    # [Reference a](a.md)
outputs:
  docs/f1/a.json:
  docs/toc.json: |
    {
      "items":[
         {
            "name": "href + items",
            "href": "f1/a",
            "items": [{ "name": "Reference a", "href": "f1/a" }]
         }
      ]
    }
---
# Combine toc href, href => href + items
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: href + items
      href: f1/a.md
      tocHref: f1/TOC.md
  docs/f1/a.md:
  docs/f1/TOC.md: |
    # [Reference a](a.md)
outputs:
  docs/f1/a.json:
  docs/toc.json: |
    {
      "items":[
        {  
          "name": "href + items",
          "href": "f1/a",
          "items": [{ "name": "Reference a", "href": "f1/a" }]
        }
      ]
    }
---
# Combine toc href, href(toc) => toc href > href + items
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: toc href > href + items
      href: f1/TOC.md
      tocHref: f2/TOC.md
  docs/f1/TOC.md:
  docs/f2/a.md:
  docs/f2/TOC.md: |
    # [Reference a](a.md)
outputs:
  docs/f2/a.json:
  docs/f1/toc.json:
  docs/toc.json: |
    {
      "items":[
        {
          "name": "toc href > href + items",
          "href": undefined,
          "items": [{ "name": "Reference a", "href": "f2/a" }]
        }
      ]
    }
---
# Combine topic href and href => topic href has higher priority
inputs:
  docfx.yml: |
    files: docs/f1/TOC.yml
  docs/f1/n1.md:
  docs/f1/n2.md:
  docs/f1/TOC.yml: |
    - name: topic href has higher priority
      href: ~/docs/f1/n1.md
      topicHref: ~/docs/f1/n2.md
outputs:
  docs/f1/toc.json: |
    {
      "items": [{ "name":"topic href has higher priority", "href":"~/docs/f1/n2.md" }]
    }
  .errors.log: |
    ["warning","link-out-of-scope","File 'docs/f1/n2.md' referenced by link '~/docs/f1/n2.md' will not be built because it is not included in build scope","docs/f1/TOC.yml",3,14]
---
# Combine topic href and href(toc) => href + items
# replace href finally
inputs:
  docfx.yml: |
    files: docs/f1/TOC.yml
  docs/f1/TOC.yml: |
    - name: Toc Reference 1
      href: f11/TOC.md
      topicHref: f11/n1.md
    - name: Toc Reference 2
      href: f11/
  docs/f1/f11/TOC.md: |
    # [Index Reference](n1.md)
  docs/f1/f11/n1.md:
outputs:
  docs/f1/toc.json: |
    {  
      "items":[
         {  
            "items":[{ "name":"Index Reference", "href":"n1.md" }],
            "name":"Toc Reference 1",
            "href":"f11/n1.md"
         },
         {
            "href":"n1.md",
            "name":"Toc Reference 2"
         }
      ]
    }
  .errors.log: |
    ["warning","link-out-of-scope","File 'docs/f1/f11/n1.md' referenced by link 'f11/n1.md' will not be built because it is not included in build scope","docs/f1/TOC.yml",3,14]
    ["warning","link-out-of-scope","File 'docs/f1/f11/n1.md' referenced by link 'n1.md' will not be built because it is not included in build scope","docs/f1/f11/TOC.md",1,3]
---
# Combine topic href and toc href(folder) -> topic href > toc href(folder)
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: topic href has higher priority
      topicHref: f1/a.md
      tocHref: f1/
  docs/f1/a.md:
  docs/f1/TOC.md:
outputs:
  docs/f1/a.json:
  docs/f1/toc.json:
  docs/toc.json: |
    {  
      "items": [{ "name":"topic href has higher priority", "href":"f1/a" }]
    }
---
# Combine toc href(folder), href => href > toc href(folder)
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: href has higher priority than toc href
      href: f1/a.md
      tocHref: f1/
  docs/f1/a.md:
  docs/f1/b.md:
  docs/f1/TOC.md: |
    # [Reference b](b.md)
outputs:
  docs/f1/a.json:
  docs/f1/b.json:
  docs/f1/toc.json:
  docs/toc.json: |
    {
      "items": [{ "name":"href has higher priority than toc href", "href":"f1/a" }]
    }
---
# Combine toc href(folder), topic href and href => href
# topic href has higher priority than href
# topic href has higher priority than toc href
# href has higher priority than toc href(folder)
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: topic href has highest priority
      topicHref: f1/a.md
      tocHref: f1/
      href: f1/b.md
  docs/f1/a.md:
  docs/f1/b.md:
  docs/f1/TOC.md:
outputs:
  docs/f1/a.json:
  docs/f1/b.json:
  docs/f1/toc.json:
  docs/toc.json: |
    {
      "items": [{ "name":"topic href has highest priority", "href":"f1/a" }]
    }
---
# Topic href cannot reference a local TOC file or folder
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: Invalid Topic Reference1
      topicHref: f1/
    - name: Invalid Topic Reference2
      topicHref: f1/TOC.md
    - name: Invalid Topic Reference3
      topicHref: f1/TOC.md
      href: /abc/def
  docs/f1/TOC.md:
outputs:
  docs/f1/toc.json:
  .errors.log: |
    ["error","invalid-topic-href","The topic href 'f1/' can only reference to a local file or absolute path","docs/TOC.yml",2,14]
    ["error","invalid-topic-href","The topic href 'f1/TOC.md' can only reference to a local file or absolute path","docs/TOC.yml",4,14]
    ["error","invalid-topic-href","The topic href 'f1/TOC.md' can only reference to a local file or absolute path","docs/TOC.yml",6,14]
---
# Toc href cannot reference a local file
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: Invalid Toc Reference1
      tocHref: f1/a.md
    - name: Invalid Toc Reference2
      tocHref: f1/a.md
      href: /abc/def
  docs/f1/TOC.md:
  docs/f1/a.md:
outputs:
  docs/f1/toc.json:
  docs/f1/a.json:
  .errors.log: |
    ["error","invalid-toc-href","The toc href 'f1/a.md' can only reference to a local TOC file, folder or absolute path","docs/TOC.yml",2,12]
    ["error","invalid-toc-href","The toc href 'f1/a.md' can only reference to a local TOC file, folder or absolute path","docs/TOC.yml",4,12]
---
# Toc syntax error with duplicated keys
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: Duplicated keys
      topicHref: f1/a.md
      topicHref: f1/b.md
      tocHref: f1/
      href: f1/b.md
  docs/f1/a.md:
  docs/f1/b.md:
outputs:
  docs/f1/a.json:
  docs/f1/b.json:
  docs/toc.json: |
    {"items":[{"name":"Duplicated keys","href":"f1/b"}]}
  .errors.log: |
    ["suggestion","yaml-duplicate-key","Key 'topicHref' is already defined, remove the duplicate key. NOTE: This Suggestion will become a Warning on 06/30/2020.","docs/TOC.yml",3,3]
---
# The included TOC's errors/warning should be assigned to itself, not its parent
inputs:
  docfx.yml: |
    files: docs/TOC.md
  docs/TOC.md: |
    # [Reference TOC File](f1/TOC.yml)
  docs/f1/TOC.yml: |
    - name: Invalid Index Reference
      href: index.md
    - name: Invalid TocHref Reference
      tocHref: index.md
outputs:
  docs/toc.json:
  .errors.log: |
    ["warning","file-not-found","Invalid file link: 'index.md'.","docs/f1/TOC.yml",2,9]
    ["error","invalid-toc-href","The toc href 'index.md' can only reference to a local TOC file, folder or absolute path","docs/f1/TOC.yml",4,12]
---
# TOC includes same href at different levels
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: level 1
      tocHref: index.md
      href: index.md
      items:
        - name: level 2
          tocHref: index.md
          href: index.md
          items:
            - name: level 3
              tocHref: index.md
              href: index.md
outputs:
  .errors.log: |
    ["warning","file-not-found","Invalid file link: 'index.md'.","docs/TOC.yml",3,9]
    ["warning","file-not-found","Invalid file link: 'index.md'.","docs/TOC.yml",7,13]
    ["warning","file-not-found","Invalid file link: 'index.md'.","docs/TOC.yml",11,17]
    ["error","invalid-toc-href","The toc href 'index.md' can only reference to a local TOC file, folder or absolute path","docs/TOC.yml",2,12]
    ["error","invalid-toc-href","The toc href 'index.md' can only reference to a local TOC file, folder or absolute path","docs/TOC.yml",6,16]
    ["error","invalid-toc-href","The toc href 'index.md' can only reference to a local TOC file, folder or absolute path","docs/TOC.yml",10,20]
---
# Individual experimental TOC should be built
inputs:
  docfx.yml:
  docs/f1/TOC.experimental.md: |
    # [Index Reference](../index.md)
  docs/f2/TOC.experimental.yml: |
    - name: Index Reference
      href: ../index.md
  docs/f3/TOC.experimental.json: |
    [{"name": "Index Reference", "href": "../index.md"}]
  docs/index.md:
outputs:
  docs/index.json:
  docs/f1/toc.experimental.json: |
    { "items": [{ "name":"Index Reference","href":"../" }] }
  docs/f2/toc.experimental.json: |
    { "items": [{ "name":"Index Reference","href":"../" }] }
  docs/f3/toc.experimental.json: |
    { "items": [{ "name":"Index Reference","href":"../" }] }
---
# Paired experimental TOC should be built 
inputs:
  docfx.yml:
  docs/f1/TOC.experimental.md: |
    # [Index Reference](../index.md)
  docs/f1/TOC.md:
  docs/index.md:
outputs:
  docs/index.json:
  docs/f1/toc.json:
  docs/f1/toc.experimental.json: |
    {
      "items": [{ "name":"Index Reference","href":"../" }]
    }
---
# Paired experimental markdown TOCs' metadata
inputs:
  docfx.yml:
  docs/f1/TOC.experimental.md: |
    ---
    experimental: false
    experiment_id: "d1c17cc0-2ae0-4b"
    ---
    # [Index Reference](../index.md)
  docs/f1/TOC.md: |
    ---
    experimental: true
    experiment_id: "d1c17cc0-2ae0-4b"
    ---
  docs/index.md:
outputs:
  docs/index.json:
  docs/f1/toc.json: |
    {
      "metadata": { "experimental": true, "experiment_id": "d1c17cc0-2ae0-4b" }
    }
  docs/f1/toc.experimental.json: |
    {
      "items":[{ "name":"Index Reference","href":"../" }],
      "metadata": { "experimental": false, "experiment_id": "d1c17cc0-2ae0-4b" }
    }
---
# Paired experimental yml TOCs' metadata
inputs:
  docfx.yml:
  docs/f1/TOC.experimental.yml: |
    metadata:
      experimental: false
      experiment_id: "d1c17cc0-2ae0-4b"
    items:
      - name: title
  docs/f1/TOC.yml: |
    metadata:
      experimental: true
      experiment_id: "d1c17cc0-2ae0-4b"
outputs:
  docs/f1/toc.json: |
    {
      "metadata": {"experimental": true, "experiment_id": "d1c17cc0-2ae0-4b"}
    }
  docs/f1/toc.experimental.json: |
    {
      "items": [{"name":"title"}],
      "metadata": {"experimental": false, "experiment_id": "d1c17cc0-2ae0-4b"}
    }
---
# Experimental TOC should be removed from toc map
inputs:
  docfx.yml:
  docs/f1/TOC.experimental.md: |
    # [Index Reference](../index.md)
    # [File Reference](../a.md)
  docs/f1/TOC.md: |
    # [Index Reference](../index.md)
  docs/index.md:
  docs/a.md:
outputs:
  docs/index.json: |
    {"_tocRel": "f1/toc.json"}
  docs/a.json: |
    {"_tocRel": undefined}
  docs/f1/toc.json:
  docs/f1/toc.experimental.json:
---
# Experimental TOC should be included using toc ref
inputs:
  docfx.yml:
  docs/f1/TOC.experimental.md: |
    # [Index Reference](../index.md)
  docs/f1/TOC.md: |
    # [TOC Reference](TOC.experimental.md)
  docs/index.md:
outputs:
  docs/index.json:
  docs/f1/toc.json: |
    {
      "items":[{
        "name":"TOC Reference",
        "items":[{"name": "Index Reference", "href": "../"}]
      }]
    }
---
# Experimental TOC should be excluded using folder ref
inputs:
  docfx.yml:
  docs/f2/TOC.experimental.md: |
    # [Index Reference](../index.md)
  docs/f1/TOC.md: |
    # [TOC Reference](../f2/)
  docs/index.md:
outputs:
  docs/index.json:
  docs/f2/toc.experimental.json:
  docs/f1/toc.json: |
    { "items":[{"name":"TOC Reference"}] }
---
# Toc with null value
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - name: Null value
      topicHref: f1/a.md
      tocHref: 
      href: f1/b.md
  docs/f1/a.md:
  docs/f1/b.md:
outputs:
  docs/f1/a.json:
  docs/f1/b.json:
  docs/toc.json: |
    { "items":[{ "tocHref": undefined }] }
---
# Toc with violation
inputs:
  docfx.yml:
  docs/f1/TOC.md: |
    #
  docs/TOC.yml: |
    - topicHref: f1/a.md
      tocHref: 
      href: f1/b.md
      additionalProperty: a
      name:
      items: []
    - href: f1/b.md
  docs/f1/a.md:
  docs/f1/b.md:
outputs:
  docs/f1/a.json:
  docs/f1/b.json:
  docs/toc.json:
  docs/f1/toc.json:
  .errors.log: |
    ["warning","missing-toc-name","The name(for .yml files name property of each node) or toc title(for .md files) is missing","docs/TOC.yml",5,8]
    ["warning","missing-toc-name","The name(for .yml files name property of each node) or toc title(for .md files) is missing","docs/TOC.yml",7,3]
    ["warning","missing-toc-name","The name(for .yml files name property of each node) or toc title(for .md files) is missing","docs/f1/TOC.md",1,1]
---
# Orphan file(not explicitly referenced in toc file)'s toc, only look up parent folder toc files
inputs:
  docfx.yml: 
  docs/dir1/TOC.md:
  docs/file-with-no-toc.md:
  docs/dir1/dir2/file-with-toc.md:
outputs:
  docs/dir1/toc.json:
  docs/file-with-no-toc.json: |
    { "_tocRel": undefined }
  docs/dir1/dir2/file-with-toc.json: |
    { "_tocRel": "../toc.json" }
---
# File referenced by multiple toc, _tocRel uses relative file path first
inputs:
  docfx.yml: |
    routes:
      dir2/path/: .
  dir1/TOC.md: |
    # [link](../a.md)
  dir2/path/TOC.md: |
    # [link](../../a.md)
  a.md:
outputs:
  toc.json:
  dir1/toc.json:
  a.json: |
    {"_tocRel": "dir1/toc.json"}
  .dependencymap.json: |
    {}
---
# Parent toc including child toc by relative path won't participate in child toc calculation
inputs:
  docfx.yml:
  dir1/a.md:
  dir1/TOC.yml: |
    - name: Include dir2 toc
      href: dir2/
  dir1/dir2/TOC.yml: |
    - name: reference a.md
      href: ../a.md
outputs:
  dir1/a.json: |
    { "_tocRel": "dir2/toc.json" }
  dir1/toc.json:
  dir1/dir2/toc.json:
---
# File referenced by multiple toc with same relative file path, use order alphabetical. For other tests, reference build/TocTest.
inputs:
  docfx.yml: 
  docs/dir1/a/TOC.yml: |
    - name: TOC Ref
      href: ../c/file1.md
  docs/dir1/b/TOC.yml: |
    - name: TOC Ref
      href: ../c/file1.md
  docs/dir1/aa/TOC.yml: |
    - name: TOC Ref
      href: ../c/file1.md
  docs/dir1/c/file1.md:
outputs:
  docs/dir1/a/toc.json:
  docs/dir1/b/toc.json:
  docs/dir1/aa/toc.json:
  docs/dir1/c/file1.json: |
    { "_tocRel": "../a/toc.json" }
---
# Bad Toc markdown
inputs:
  docfx.yml:
  docs/TOC.md: |
    # [good](test.md)
    # [good with trailing space](test.md)  
    [bad1]()
    #[bad2](test.md)
    >_<
    #bad4
  docs/test.md:
outputs:
  docs/test.json:
  .errors.log: |
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",3,1]
---
# Skip-level Toc markdown
inputs:
  docfx.yml:
  docs/TOC.md: |
    # level 1
    ### level 3
outputs:
  .errors.log: |
    ["error","invalid-toc-level","The toc level can't be skipped from 1 to 3","docs/TOC.md",2,1]
---
# Markdown TOC root can start from any level, but must be aligned
inputs:
  docfx.yml:
  TOC.md: |
    ## level 2
    # level 1
outputs:
  .errors.log: |
    ["error","invalid-toc-level","The toc level can't be skipped from 0 to 1","TOC.md",2,1]
---
# Missing TOC heading name
inputs:
  docfx.yml:
  docs/TOC.md: |
    # Title
    ##
outputs:
  docs/toc.json:
  .errors.log: |
    ["warning","missing-toc-name","The name(for .yml files name property of each node) or toc title(for .md files) is missing","docs/TOC.md",2,1]
---
# Multiple leaf inlines in toc title
inputs:
  docfx.yml:
  docs/TOC.md: |
    # [Test <X> Y](a.md)
    # [Test <X> Y]
    # [Test **Title2** Title3](a.md)
    # [Test **Title2** Title3]
  docs/a.md:
outputs:
  docs/a.json:
  docs/toc.json: |
    {
      "items": [
        {"name":"Test <X> Y","href":"a"},
        {"name":"[Test <X> Y]"},
        {"name":"Test **Title2** Title3","href":"a"},
        {"name":"[Test **Title2** Title3]"}
      ]
    }
---
# Expanded, MaintainContext and DisplayName
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - href: https://github.com/docfx
      maintainContext: true
      expanded: true
      name: "test"
      displayName: "display name"
outputs:
  docs/toc.json: |
    { "items": [{ "maintainContext": true, "expanded": true, "displayName": "display name" }] }
---
# conflicted toc files will be removed from toc map
inputs:
  docfx.yml:
  docs/TOC.yml: |
    - href: a.md
      name: yml reference a
  docs/TOC.md: |
    # [md reference a](a.md)
  docs/a.md:
outputs:
  docs/a.json: |
    {"_tocRel": "toc.json"}
  docs/toc.json:
  .errors.log: |
    ["warning","output-path-conflict","Two or more files output to the same path 'docs/toc.json': 'docs/TOC.md', 'docs/TOC.yml'"]
---
# validate bookmarks in toc
inputs:
  docfx.yml:
  docs/a.md: |
    # title 1
  docs/TOC.md: |
    # [link to title 1](a.md#title-1)
    # [link to title 2](a.md#title-2)
outputs:
  docs/a.json:
  docs/toc.json: |
    {
      "items": [
        { "name": "link to title 1", "href": "a#title-1", "monikers": undefined },
        { "name": "link to title 2", "href": "a#title-2", "monikers": undefined }
      ]
    }
  .errors.log: |
    ["warning","bookmark-not-found","Cannot find bookmark '#title-2' in 'docs/a.md', did you mean '#title-1'?","docs/TOC.md",2,3]
---
# reference uid within link
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
  docs/TOC.md: |
    # [Title](xref:a#bookmark)
outputs:
  docs/a.json:
  docs/toc.json: |
    {
      "items": [
        { "name":"Title","href":"a#bookmark", "monikers": undefined }
      ]
    }
---
# uid reference in yaml toc
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
  docs/TOC.yml: |
    - name: Uid Ref
      uid: a
outputs:
  docs/a.json:
  docs/toc.json: |
    {
      "items": [
        { "name":"Uid Ref","href":"a","monikers": undefined }
      ]
    }
---
# uid reference first in yaml toc
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
  docs/b.md:
  docs/TOC.yml: |
    - name: Uid Ref
      uid: a
      href: b.md
    - name: Uid Not Found
      uid: c
      href: b.md
outputs:
  docs/a.json:
  docs/b.json:
  docs/toc.json: |
    {
      "items": [
        { "name":"Uid Ref","href":"a","monikers": undefined },
        { "name":"Uid Not Found","href":"b","monikers": undefined }
      ]
    }
  .errors.log: |
    ["warning","xref-not-found","Cross reference not found: 'c'","docs/TOC.yml",5,8]
---
# uid reference with monikers in yaml toc
inputs:
  docfx.yml: |
    monikerRange:
      'docs/**': '>= netcore-1.1'
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.2", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.3", "product_name": ".NET Core" },
      ]
    }
  docs/a.md: |
    ---
    monikerRange: netcore-1.1 || netcore-1.2
    uid: a
    ---
  docs/TOC.yml: |
    - name: Uid Ref
      uid: a
outputs:
  e300a7df/docs/a.json:
  8169d1ea/docs/toc.json: |
    {
      "items": [
        { "name":"Uid Ref","href":"a","monikers": ["netcore-1.1", "netcore-1.2"] }
      ]
    }
---
# uid reference in markdown toc
inputs:
  docfx.yml:
  docs/TOC.md: |
    # @b
  docs/a.md: |
    ---
    title: Title A
    uid: b
    ---
outputs:
  docs/toc.json: |
    {
      "items": [
        { "name":"Title A","href":"a","monikers": undefined }
      ]
    }
  docs/a.json:
---
# uid reference with monikers in markdown toc
inputs:
  docfx.yml: |
    monikerRange:
      'docs/**': '>= netcore-1.1'
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.2", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.3", "product_name": ".NET Core" },
      ]
    }
  docs/a.md: |
    ---
    title: Title A
    monikerRange: netcore-1.1 || netcore-1.2
    uid: b
    ---
  docs/TOC.md: |
    # @b
outputs:
  e300a7df/docs/a.json:
  8169d1ea/docs/toc.json: |
    {
      "items": [
        { "name":"Title A","href":"a","monikers": ["netcore-1.1", "netcore-1.2"] }
      ]
    }
---
# uid reference in toc inclusion
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
  docs/TOC.yml: |
    - name: TOC Ref
      tocHref: a/TOC.yml
  docs/a/TOC.yml: |
    - name: Uid Ref
      uid: a
outputs:
  docs/a.json:
  docs/toc.json: |
    {
      "items":[{
        "name":"TOC Ref",
        "items":[{"name":"Uid Ref","href":"a","monikers": undefined}],
        "monikers": undefined
      }]
    }
---
# markdown toc using bad syntax(multiple inlines for one heading block)
inputs:
  docfx.yml:
  docs/TOC.md: |
    # @b abc
    # @b @a
    # [Title X](a.md) bcd
    # [Title X](a.md) [Title Y](b.md)
    # @b [Title X](a.md)
    # [Title X](a.md) @b
    # [Title X](xref: a) @b
    # Title1 Title2 [Title3](a.md)
  docs/a.md: |
    ---
    title: Title A
    uid: b
    ---
  docs/b.md: |
    ---
    title: Title B
    uid: a
    ---
outputs:
  docs/a.json:
  docs/b.json:
  .errors.log: |
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",1,1]
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",2,1]
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",3,1]
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",4,1]
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",5,1]
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",6,1]
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",7,1]
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",8,1]
---
# more than 6 leading count of `#`
inputs:
  docfx.yml:
  docs/TOC.md: |
    ################### [19 leading count](a.md)
    #################### [20 leading count](a.md)
  docs/a.md:
outputs:
  docs/toc.json: |
    {"items":[{"name":"19 leading count","href":"a","items":[{"name":"20 leading count","href":"a","monikers": undefined}]}]}
  docs/a.json:
---
# toc with some unknown fields
inputs:
  docfx.yml:
  docs/TOC.yml: |
    items:
      - name: test
        href: a.md
    ms.contentlocale: ja-jp
    ms.translationtype: HT
  docs/a.md:
outputs:
  docs/toc.json: |
    {"items":[{"name":"test","href":"a"}],"ms.contentlocale": undefined,"ms.translationtype": undefined }
  docs/a.json:
---
# respects user input _tocRel
inputs:
  docfx.yml:
  docs/f1/TOC.md: |
    # [File Reference](../index.md)
  docs/f2/TOC.md: |
    # Nothing here
  docs/index.md: |
    ---
    _tocRel: f2/toc.json
    ---
outputs:
  docs/index.json: |
    {"_tocRel": "f2/toc.json"}
  docs/f1/toc.json:
  docs/f2/toc.json:
---
# turn skip-level toc error to warning
inputs:
  docfx.yml: |
    customErrors:
      invalid-toc-level: warning
  docs/TOC.md: |
    # level 1
    ### level 3
    #### level 4
    ## level 2
outputs:
  .errors.log: |
    ["warning","invalid-toc-level","The toc level can't be skipped from 1 to 3","docs/TOC.md",2,1]
  docs/toc.json: |
    {
      "items": [{
        "name": "level 1",
        "items": [{ "name": "level 2" }]
      }]
    }
---
# don't respect monikers of input toc model
inputs:
  docfx.yml: |
    monikerRange:
      'docs/**/*.md': '>= 5.0'
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "1.0", "product_name": ".NET Core" },
        { "moniker_name": "2.0", "product_name": ".NET Core" },
        { "moniker_name": "3.0", "product_name": ".NET Core" },
        { "moniker_name": "4.0", "product_name": ".NET Core" },
        { "moniker_name": "5.0", "product_name": ".NET Core" },
      ]
    }
  docs/b.md:
  docs/TOC.yml: |
    - name: item with children
      href: /a
      items:
        - name: item with monikers
          href: /b
          monikers:
            - "1.0"
            - "2.0"
    - name: item with monikers references a file with monikers
      href: b.md
      monikers:
        - "3.0"
        - "4.0"
outputs:
  336669db/docs/b.json:
  docs/toc.json: |
    {
      "items": [
        {
          "name": "item with children",
          "href": "/a",
          "monikers": undefined,
          "items": [{ "name": "item with monikers", "href": "/b", "monikers": undefined }]
        },
        {
          "name": "item with monikers references a file with monikers",
          "href": "b",
          "monikers": ["5.0"]
        }
      ]
    }
