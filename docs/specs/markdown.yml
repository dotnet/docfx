---
# Hello World
inputs:
  docfx.yml:
  docs/a.md: Hello `docfx`!
outputs:
  docs/a.json: |
    { "conceptual": "<p>Hello <code>docfx</code>!</p>", "wordCount": 2, "_op_canonicalUrlPrefix": "https://docs.com/en-us/", "_path": "docs/a.json"}
---
# Basic markdown syntax
inputs:
  docfx.yml:
  docs/a.md: _this_ *is* an ***inline*** `markdown` **test**
outputs:
  docs/a.json: |
    { "conceptual": "<p><em>this</em> <em>is</em> an <em><strong>inline</strong></em> <code>markdown</code> <strong>test</strong></p>" }
---
# title metadata overrides h1
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: title from yaml header
    ---
    # Title from H1
    hello
outputs:
  docs/a.json: |
    {
      "conceptual": "<p>hello</p>\n",
      "rawTitle": "<h1 id=\"title-from-h1\">Title from H1</h1>",
      "title": "title from yaml header"
    }
---
# extract rawTitle from h1 to h3
inputs:
  docfx.yml:
  h1.md: |
    # h1 title
  h2.md: |
    ## h2 title
  h3.md: |
    ### h3 title
  h4.md: |
    #### h4 title
outputs:
  h1.json: |
    {
      "title": "h1 title",
      "rawTitle": "<h1 id=\"h1-title\">h1 title</h1>"
    }
  h2.json: |
    {
      "title": "h2 title",
      "rawTitle": "<h2 id=\"h2-title\">h2 title</h2>"
    }
  h3.json: |
    {
      "title": "h3 title",
      "rawTitle": "<h3 id=\"h3-title\">h3 title</h3>"
    }
  h4.json: |
    {
      "title": undefined,
      "rawTitle": "",
      "conceptual": "<h4 id=\"h4-title\">h4 title</h4>",
    }
---
# remove title from html
inputs:
  docfx.yml:
  h1ToRemove.md: |
    # h1 title
  h1ToKeep.md: |
    welcome to docfx
    # h1 title
outputs:
  h1toremove.json: |
    {
      "conceptual": "\n",
      "rawTitle": "<h1 id=\"h1-title\">h1 title</h1>"
    }
  h1tokeep.json: |
    {
      "conceptual":"<p>welcome to docfx</p>\n<h1 id=\"h1-title\">h1 title</h1>\n",
      "rawTitle": ""
    }
---
# No H1
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header
    ---

    hello
outputs:
  docs/a.json: |
    { "title": "Title from yaml header" }
---
# Empty H1 and title
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title:
    ---

    #  
outputs:
  docs/a.json: |
    { "title": null }
---
# Non-comments block between yaml-header and H1
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header
    ---

    hello

    # Heading
outputs:
  docs/a.json:
---
# Include block before h1
inputs:
  docfx.yml:
  docs/a.md: |
    [!include[]()]
    # Heading
outputs:
  .errors.log: |
    ["error","circular-reference","Build has identified file(s) referencing each other: 'docs/a.md' --> 'docs/a.md'","docs/a.md",1,1]
---
# Comments between yaml header and H1
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header
    ---

    <!-- This is comment -->

    # Title from H1
    hello
outputs:
  docs/a.json: |
    {
      "rawTitle": "<h1 id=\"title-from-h1\">Title from H1</h1>",
    }
---
# Markdown block between yaml header and H1
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header
    ---

    hello

    # Title from H1
    hello
outputs:
  docs/a.json: |
    { "rawTitle": "", "title": "Title from yaml header" }
---
# include another file
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b
outputs:
  docs/a.json: |
    { "conceptual": "<p>a b</p>" }
  docs/b.json: |
    { "conceptual": "<p>b</p>" }
---
# heading in included file
inputs:
  docfx.yml: |
    files: docs/a.md
  docs/a.md: |
    [!INCLUDE[B](b.md)]
    [!INCLUDE[C](c.md)]
  docs/b.md: |
    [!INCLUDE[D](d.md)]
  docs/c.md: |
    # Heading from C
  docs/d.md: |
    # Heading from D
outputs:
  docs/a.json: |
    {
      "conceptual": "<h1 id=\"heading-from-c\">Heading from C</h1>",
      "rawTitle": "<h1 id=\"heading-from-d\">Heading from D</h1>"
    }
---
# No heading in include file
inputs:
  docfx.yml: |
    files: docs/a.md
  docs/a.md: |
    [!INCLUDE[B](b.md)]
    [!INCLUDE[C](c.md)]
  docs/b.md: |
    Hello
  docs/c.md: |
    # Heading from C
outputs:
  docs/a.json: |
    {
      "conceptual": "<p>Hello</p><h1 id=\"heading-from-c\">Heading from C</h1>",
      "rawTitle": "",
      "title": "Heading from C"
    }
---
# Include in h1
inputs:
  docfx.yml:
  docs/a.md: |
    # [!INCLUDE[](b.md)] Overview
    content
  docs/b.md: |
    Product Name
outputs:
  docs/a.json: |
    {
      "conceptual": "<p>content</p>",
      "rawTitle": "<h1 id=\"-overview\">Product Name Overview</h1>"
    }
  docs/b.json:
---
# title
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    metaKey: metaValue
    ---
    # This is *a* title &
    
    body
outputs:
  docs/a.json: |
    {
      "conceptual": "<p>body</p>",
      "title": "This is a title &",
      "rawTitle": "<h1 id=\"this-is-a-title-\">This is <em>a</em> title &amp;</h1>",
      "metaKey": "metaValue"
    }
---
# title from yaml header is null
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title:
    ---
    # Title has value
outputs:
  docs/a.json: |
    {
      "title": "Title has value",
      "rawTitle": "<h1 id=\"title-has-value\">Title has value</h1>",
    }
---
# Errors from one file does not affect another file
inputs:
  docfx.yml:
  docs/TOC.md: |
    #[bad](b.md)
  docs/b.md:
outputs:
  docs/b.json:
  .errors.log: |
    ["error","invalid-toc-syntax","The toc syntax is invalid, *","docs/TOC.md",1,1]
---
# do not allow custom js, styles and css
inputs:
  docfx.yml:
  docs/a.md: |
    <script>alert(0);</script>
    <link rel="stylesheet" href="https://a.com/b.css" />
    <div style="display:hidden"></div>
    <style>h1 {color:red;}</style>

    body
outputs:
  docs/a.json: |
    { "conceptual": "<div></div><p>body</p>" }
---
# markdown table with styles is allowed
inputs:
  docfx.yml:
  docs/a.md: |
    a     | b       | c 
    :-----|:-------:| ----: 
    0     | 1       | 2 
outputs:
  docs/a.json: |
    {
      "conceptual":"
        <table>
          <thead>
            <tr>
              <th style=\"text-align: left;\">a</th>
              <th style=\"text-align: center;\">b</th>
              <th style=\"text-align: right;\">c</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style=\"text-align: left;\">0</td>
              <td style=\"text-align: center;\">1</td>
              <td style=\"text-align: right;\">2</td>
            </tr>
          </tbody>
        </table>"
    }
---
# do not process auto links
inputs:
  docfx.yml:
  docs/a.md: |
    http://*.windowsupdate.microsoft.com
outputs:
  docs/a.json: |
    { "conceptual": "<p>http://*.windowsupdate.microsoft.com</p>" }
---
# validate internal/external bookmarks in markdown documents
inputs:
  docfx.yml: |
  docs/a.md: |
    # title 1
    [link to title 1](#title-1)
    [link to title 2](#title-2)
    [link to title 3](#title-3)
    [link to html title](#html-title)
    [link to yaml](c.yml#no-such-bookmark) does not warn, only validate against markdown files
    ## title 2
    <h2 id="html-title">title</h2>
    [!include[](d.md)]
    <a id="##special-chars"></a>### title with custom id
    <a id="with:colon">bookmark with colon</a>
  docs/b.md: |
    [link to title 2](a.md#title-2)
    [link to title 3](a.md#title-3)
    [link to title with custom id](a.md###special-chars)
    [link to bookmark with colon](a.md#with:colon)
  docs/c.yml: |
    #YamlMime:LandingData
    title: test
  docs/d.md: |
    [link to title 3](a.md#title-3)
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
  docs/d.json:
  .errors.log: |
    ["warning","bookmark-not-found","Cannot find bookmark '#title-3' in 'docs/a.md', did you mean '#title-1'?","docs/b.md",2,1]
    ["warning","bookmark-not-found","Cannot find bookmark '#title-3' in 'docs/a.md', did you mean '#title-1'?","docs/a.md",4,1]
    ["warning","bookmark-not-found","Cannot find bookmark '#title-3' in 'docs/a.md', did you mean '#title-1'?","docs/d.md",1,1]
---
# only validate bookmarks when the referenced file existed
inputs:
  docfx.yml:
  docs/a.md: |
    [link to bookmark in another non-existed file](c.md#title-2)
outputs:
  docs/a.json:
  .errors.log: |
    ["warning","file-not-found","Invalid file link: 'c.md'.","docs/a.md",1,1]
---
# do not output file if bookmark-not-found is treated as error
inputs:
  docfx.yml: |
    customErrors:
      bookmark-not-found: error
  docs/a.md: |
    [link to b](b.md#bookmark)
  docs/b.md:
outputs:
  docs/b.json:
  .errors.log: |
    ["error","bookmark-not-found","Cannot find bookmark '#bookmark' in 'docs/b.md'","docs/a.md",1,1]
---
# Bookmark suggestion and validation
inputs:
  docfx.yml:
  docs/a.md: |
    ## <a name="somehow"></a> Section 1 title
    ## <a name="this-is"></a> Section 2 title
    ## <a name="a-bookmark"></a> Section 3 title
  docs/b.md: |
    [Ref Doc a Bookmark](./a.md#some-bookmark)
  docs/c.md: |
    ## <a name="bookmark"></a> Section 1 title
    [Ref Doc b Bookmark](./b.md#b-has-no-bookmark)
  # default threshold is 5, if levenshtein distance is greater than 5, won't show suggestion bookmark
  docs/d.md: |
    [Ref Doc c Bookmark](./c.md#bookmark123456)
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
  docs/d.json:
  .errors.log: |
    ["warning","bookmark-not-found","Cannot find bookmark '#some-bookmark' in 'docs/a.md', did you mean '#a-bookmark'?","docs/b.md",1,1]
    ["warning","bookmark-not-found","Cannot find bookmark '#b-has-no-bookmark' in 'docs/b.md'","docs/c.md",2,1]
    ["warning","bookmark-not-found","Cannot find bookmark '#bookmark123456' in 'docs/c.md'","docs/d.md",1,1]
---
# Do not validate bookmark for tabbed contents
inputs:
  docfx.yml:
  docs/a.md: |
    # [a](#tab/a)
    a

    # [b](#tab/b)
    b
outputs:
  docs/a.json: |
    {
      "conceptual": "
        <div class='tabGroup' id='tabgroup_CeZOj-G++Q'>
          <ul role='tablist'>
            <li role='presentation'>
              <a href='#tabpanel_CeZOj-G++Q_a' role='tab' aria-controls='tabpanel_CeZOj-G++Q_a' data-tab='a' tabindex='0' aria-selected='true'>a</a>
            </li>
            <li role='presentation'>
              <a href='#tabpanel_CeZOj-G++Q_b' role='tab' aria-controls='tabpanel_CeZOj-G++Q_b' data-tab='b' tabindex='-1'>b</a>
            </li>
          </ul>
          <section id='tabpanel_CeZOj-G++Q_a' role='tabpanel' data-tab='a'>
            <p>a</p>
          </section>
          <section id='tabpanel_CeZOj-G++Q_b' role='tabpanel' data-tab='b' aria-hidden='true' hidden='hidden'>
            <p>b</p>
          </section>
        </div>"
    }
---
# experimental pairs
inputs:
  docfx.yml:
  docs/a.md:
  docs/a.experimental.md:
outputs:
  docs/a.json: |
    { "document_id": "fa697b4e-3e52-77f6-2219-39040f6070da", "document_version_independent_id": "7c88e748-ed5e-a29a-c057-6f89857c3591" }
  docs/a.experimental.json: |
    { "document_id": "f481558d-b8fa-5acb-facb-d3bee58fbf3e", "document_version_independent_id": "80168efe-9436-03b9-9e7c-eaf20a91d680" }
  .publish.json: |
    {
      "files":[
        { "url": "/docs/a.experimental", "path": "docs/a.experimental.json" },
        { "url": "/docs/a", "path": "docs/a.json" }
      ]
    }
---
# `", '` should be properly escaped when written in html directly
inputs:
  docfx.yml:
  docs/a.md: |
    <a href='javascript:window.open("https://shell.azure.com", "_blank", "toolbar=no,scrollbars=yes,resizable=yes,menubar=no,location=no,status=no")'>
  docs/b.md: |
    <a style="cursor:pointer" onclick="javascript:window.open('https://shell.azure.com', '_blank', 'toolbar=no,scrollbars=yes,resizable=yes,menubar=no,location=no,status=no')"><image src='https://shell.azure.com/images/launchcloudshell.png' /></a>
  docs/c.md: |
    <a style="cursor:pointer" onclick='javascript:window.open("https://shell.azure.com", "_blank", "toolbar=no,scrollbars=yes,resizable=yes,menubar=no,location=no,status=no")'><image src="https://shell.azure.com/images/launchcloudshell.png" /></a>
outputs:
  docs/a.json: |
    { "conceptual": "<a href='javascript:window.open(&quot;https://shell.azure.com&quot;, &quot;_blank&quot;, &quot;toolbar=no,scrollbars=yes,resizable=yes,menubar=no,location=no,status=no&quot;)'>"}
  docs/b.json: |
    { "conceptual": "<p><a onclick=\"javascript:window.open('https://shell.azure.com', '_blank', 'toolbar=no,scrollbars=yes,resizable=yes,menubar=no,location=no,status=no')\"><image src='https://shell.azure.com/images/launchcloudshell.png'></image></a></p>\n" }
  docs/c.json: |
    { "conceptual": "<p><a onclick='javascript:window.open(\"https://shell.azure.com\", \"_blank\", \"toolbar=no,scrollbars=yes,resizable=yes,menubar=no,location=no,status=no\")'><image src=\"https://shell.azure.com/images/launchcloudshell.png\"></image></a></p>\n" }
---
# yaml header shouldn't be array
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    - arr element1
    - arr element2
    ---
    # Title title
outputs:
  docs/a.json:
  .errors.log: |
    ["warning","yaml-header-not-object","Expect yaml header to be an object, but got an array","docs/a.md",2,1]
---
# yaml header shouldn't be scalar
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    12306
    ---
    # Title title
outputs:
  docs/a.json:
  .errors.log: |
    ["warning","yaml-header-not-object","Expect yaml header to be an object, but got a scalar","docs/a.md",2,1]
---
# Handling malformed HTML tags using HtmlAgilityPack 1.4.9
inputs:
  docfx.yml:
  docs/a.md: |
    1.  a
        <UL><LI><LI></UL>
    2.  b
        <UL><LI>
    ## c
outputs:
  docs/a.json: |
    {
      "conceptual": "
        <ol>
          <li>a
            <ul><li><li></li></li></ul>
          <li>b
            <ul><li></li></ul></li>
          </li>
        </ol>
        <h2 id='c'>c</h2>"
    }
---
# Empty YAML header
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    # some text
    ---
    a
  docs/b.md: |
    ---
    ---
    b
outputs:
  docs/a.json:
  docs/b.json:
---
# resolve link in html block
inputs:
  docfx.yml:
  docs/a.md: |
    some text
    <div>
      <p>Link to <a href="#bookmark">text</a></p>
      <p>Link to <a href="#bookmark">some other text</a></p>
    </div>
outputs:
  docs/a.json:
  .errors.log: |
    ["warning","bookmark-not-found","Cannot find bookmark '#bookmark' in 'docs/a.md'","docs/a.md",2,1]
    ["warning","bookmark-not-found","Cannot find bookmark '#bookmark' in 'docs/a.md'","docs/a.md",2,2]
---
# Report warning for custom 404 page
inputs:
  docfx.yml:
  docs/404.md:
outputs:
  docs/404.json: |
    {
      "robots": "NOINDEX, NOFOLLOW"
    }
  .errors.log: |
    ["warning","custom-404-page","Custom 404 page will be deprecated in future. Please remove the 404.md file to resolve this warning","docs/404.md"]
---
# bookmark as HTML predefined url
inputs:
  docfx.yml:
  docs/a.md: |
    [some text](#top)
    [some text](#)
outputs:
  docs/a.json: |
    {
      "conceptual": "<p>
                         <a href=\"#top\" data-linktype=\"self-bookmark\">some text</a>
                         <a href=\"#\" data-linktype=\"self-bookmark\">some text</a>
                     </p>"
    }
---
# link with empty query and empty fragment
inputs:
  docfx.yml:
  docs/a.md: |
    # title 2
    ## title 3
  docs/b.md: |
    [a](a.md?#title-2)
    [a1](a.md#)
outputs:
  docs/a.json:
  docs/b.json: |
    {
      "conceptual": "<p>
                          <a href=\"a?#title-2\" data-linktype=\"relative-path\">a</a>
                          <a href=\"a#\" data-linktype=\"relative-path\">a1</a>
                     </p>"
    }
---
# Triple colon markdown extension
inputs:
  docfx.yml:
  docs/a.png:
  docs/b.png:
  docs/a.md: |
    :::image type="content" source="a.png" alt-text="Image":::
    :::image type="content" source="~/docs/b.png" alt-text="Image":::
outputs:
  docs/a.png:
  docs/b.png:
  docs/a.json: |
    { 
      "conceptual": "<div class=\"mx-imgBorder\"><p><img src=\"a.png\" alt=\"Image\" data-linktype=\"relative-path\"></p></div><div class=\"mx-imgBorder\"><p><img src=\"b.png\" alt=\"Image\" data-linktype=\"relative-path\"></p></div>"
    }
---
# Liquid template file missing should not crash
inputs: 
  docfx.yml: |
    outputJson: false
  docs/a.md: Hello `docfx`! 
outputs: 
  docs/a/index.html:
---
# Source file name ending with spaces should not crash
inputs:
  docfx.yml: |
    outputJson: false
  docs/a b.. ..md:
outputs:
  docs/a b/index.html:
---
# Invalid Link
inputs: 
  docfx.yml:
  docs/a.md: |
    [A](b.md/)
  docs/b.md:
outputs:
  docs/a.json:
  docs/b.json:
  .errors.log: |
    ["warning","file-not-found","Invalid file link: 'b.md/'.","docs/a.md",1,1]
---
# resource inclusion with relative path outside docset
inputs:
  docsets.yml: |
    docsets: new-hope/new-hope/*
  new-hope/new-hope/docfx.yml: |
    copyResources: false
  new-hope/new-hope/specs/unify-version/unify-version.md: |
    ![ready-for-review](../../../new-hope/specs/gauntlet/media/ready-for-review.png)
  new-hope/new-hope/specs/international-content/docs-vscode-validation.md: |
    ![ready-for-review](../gauntlet/media/ready-for-review.png)
  new-hope/new-hope/specs/gauntlet/media/ready-for-review.png:
outputs:
  new-hope/new-hope/specs/unify-version/unify-version.json:
  new-hope/new-hope/specs/international-content/docs-vscode-validation.json:
---
# Link to a file within docset using relative path outside docset
inputs:
  docsets.yml: |
    docsets: docs/docs/*
  docs/docs/docfx.yml:
  docs/docs/a.md: |
    [b](../docs/b.md)
  docs/docs/b.md:
outputs:
  docs/docs/a.json:
  docs/docs/b.json:
