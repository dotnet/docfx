---
# Hello World
inputs:
  docfx.yml:
  docs/a.md: Hello `docfx`!
outputs:
  docs/a.json: |
    { "content": "<p>Hello <code>docfx</code>!</p>" }
  build.manifest:
---
# Basic markdown syntax
inputs:
  docfx.yml:
  docs/a.md: _this_ *is* an ***inline*** `markdown` **test**
outputs:
  docs/a.json: |
    { "content": "<p><em>this</em> <em>is</em> an <em><strong>inline</strong></em> <code>markdown</code> <strong>test</strong></p>" }
  build.manifest:
---
# Report warning when Yaml header has null value
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title:
    ---
    hello
outputs:
  docs/a.json:
  build.manifest:
  build.log: |
    ["info","null-value","(Line: 1, Character: 1) 'title' contains null value","docs/a.md",1,1]
---
# Yaml header
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: me
    ---
    hello
outputs:
  docs/a.json: |
    {
      "content": "<p>hello</p>",
      "metadata": { "title": "me" }
    }
  build.manifest:
---
# Yaml header title in lower-case
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: title from yaml header
    ---
    # Title from H1
    hello
outputs:
  docs/a.json: |
    {
      "content": "<p>hello</p>\n",
      "htmlTitle": "<h1 id=\"title-from-h1\">Title from H1</h1>",
      "title": "title from yaml header",
      "metadata": { "title": "title from yaml header" }
    }
  build.manifest:
---
# Yaml header title in upper-case
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    Title: Title from yaml header
    ---
    # Title from H1
    hello
outputs:
  docs/a.json: |
    {
      "content": "<p>hello</p>",
      "htmlTitle": "<h1 id=\"title-from-h1\">Title from H1</h1>",
      "title": "Title from H1",
      "metadata":
      {
          "Title": "Title from yaml header"
      }
    }
  build.manifest:
---
# Comments between yaml header and H1
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    Title: Title from yaml header
    ---

    <!-- This is comment -->

    # Title from H1
    hello
outputs:
  docs/a.json: |
    {
      "htmlTitle": "<h1 id=\"title-from-h1\">Title from H1</h1>",
    }
  build.manifest:
---
# Markdown block between yaml header and H1
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    Title: Title from yaml header
    ---

    hello

    # Title from H1
    hello
outputs:
  docs/a.json: |
    {
      "htmlTitle": "",
    }
  build.manifest:
---
# include another file
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b
outputs:
  docs/a.json: |
    { "content": "<p>a b</p>" }
  docs/b.json: |
    { "content": "<p>b</p>" }
  build.manifest:
---
# note
inputs:
  docfx.yml:
  docs/a.md: |
    >[!NOTE]
    >note
outputs:
  docs/a.json: |
    { "content": "<div class=\"NOTE\"><p>Note</p><p>note</p></div>" }
  build.manifest:
---
# title
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    metaKey: metaValue
    ---
    # This is *a* title
    
    body
outputs:
  docs/a.json: |
    {
      "content": "<p>body</p>",
      "title": "This is a title",
      "htmlTitle": "<h1 id=\"this-is-a-title\">This is <em>a</em> title</h1>",
      "metadata": { "metaKey": "metaValue" }
    }
  build.manifest:
---
# Errors from one file does not affect another file
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    a:
    a:
    ---
  docs/b.md:
outputs:
  docs/b.json:
  build.manifest:
  build.log: |
    ["error","yaml-duplicate-key","(Line: 2, Character: 1) - (Line: 2, Character: 2): Key 'a' is already defined, remove the duplicate key.","docs/a.md"]
---
# do not allow custom js, styles and css
inputs:
  docfx.yml:
  docs/a.md: |
    <script>alert(0);</script>
    <link rel="stylesheet" href="https://a.com/b.css" />
    <div style="display:hidden"></div>
    <style>h1 {color:red;}</style>

    body
outputs:
  docs/a.json: |
    { "content": "<div></div><p>body</p>" }
  build.manifest:
---
# do not process auto links
inputs:
  docfx.yml:
  docs/a.md: |
    http://*.windowsupdate.microsoft.com
outputs:
  docs/a.json: |
    { "content": "<p><a href=\"http://*.windowsupdate.microsoft.com\">http://*.windowsupdate.microsoft.com</a></p>" }
  build.manifest:
---
# validate bookmarks in markdown documents
inputs:
  docfx.yml:
  docs/a.md: |
    # title 1
    [link to title 1](#title-1)
    [link to title 2](#title-2)
    [link to title 3](#title-3)
    [link to html title](#html-title)
    [link to yaml](c.yml#no-such-bookmark) does not warn
    ## title 2
    <h2 id="html-title">title</h2>
    [!include[](d.md)]
  docs/b.md: |
    [link to title 2](a.md#title-2)
    [link to title 3](a.md#title-3)
  docs/c.yml: |
    #YamlMime:LandingData
    title: test
  docs/d.md: |
    [link to title 3](a.md#title-3)
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
  docs/d.json:
  build.log: |
    ["warning","bookmark-not-found","Cannot find bookmark '#title-3' in 'docs/a.md'","docs/b.md"]
    ["warning","bookmark-not-found","Cannot find bookmark '#title-3' in 'docs/a.md'","docs/a.md"]
    ["warning","bookmark-not-found","Cannot find bookmark '#title-3' in 'docs/a.md'","docs/d.md"]
  build.manifest:
---
# do not output file if bookmark-not-found is treated as error
inputs:
  docfx.yml: |
    rules:
      bookmark-not-found: error
  docs/a.md: |
    [link to b](b.md#bookmark)
  docs/b.md:
outputs:
  docs/b.json:
  build.log: |
    ["error","bookmark-not-found","Cannot find bookmark '#bookmark' in 'docs/b.md'","docs/a.md"]
  build.manifest:
---
# experimental pairs
inputs:
  docfx.yml:
  docs/a.md:
  docs/a.experimental.md:
outputs:
  docs/a.json: |
    {"id":"fa697b4e-3e52-77f6-2219-39040f6070da","versionIndependentId":"7c88e748-ed5e-a29a-c057-6f89857c3591"}
  docs/a.experimental.json: |
    {"id":"f481558d-b8fa-5acb-facb-d3bee58fbf3e","versionIndependentId":"80168efe-9436-03b9-9e7c-eaf20a91d680"}
  build.manifest: |
    {"files":[{"siteUrl":"/docs/a.experimental","outputPath":"docs/a.experimental.json","sourcePath":"docs/a.experimental.md"},{"siteUrl":"/docs/a","outputPath":"docs/a.json","sourcePath":"docs/a.md"}],"dependencies":{}}
