---
# Unknown xrefs are output as is with a warning
inputs:
  docfx.yml:
  docs/a.md: Link to <xref:a>
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to &lt;xref:a&gt;</p>" }
  .errors.log: |
    ["warning","xref-not-found","Cross reference not found: 'a'","docs/a.md",1,9]
---
# Unknown xrefs using @ syntax are not included in error log
inputs:
  docfx.yml:
  docs/a.md: Link to @a
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to @a</p>" }
---
# Restore xref map from configured url and use the map for resolving
# hostname should be removed if docset sharing the same one
inputs:
  docfx.yml: |
    baseUrl: https://docs.microsoft.com
    xref: 
      - 1.xrefmap.json
      - 2.xrefmap.json
  docs/a.md: Link to @System.String
  1.xrefmap.json: |
    {
      "references":[{
          "uid": "System.String",
          "name": "String",
          "fullName": "System.String",
          "href": "https://docs.microsoft.com/en-us/dotnet/api/system.string",
          "nameWithType": "System.String"
      }]
    }
  2.xrefmap.json: |
    { "references":[{"uid": "a", "name": "a", "fullName": "a", "href": "https://docs.microsoft.com/en-us/a", "nameWithType": "a"}]}
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\">String</a></p>\n"}
---
# Restore xref map from configured url and use the YAML file for resolving
inputs:
  docfx.yml: |
    xref: 
      - xrefmap.yml
  docs/a.md: Link to @System.String
  xrefmap.yml: |
    references:
      - uid: System.String
        name: String
        fullName: System.String
        href: https://docs.microsoft.com/en-us/dotnet/api/system.string
        nameWithType: System.String
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\">String</a></p>\n"}
---
# Define uid in conceptual, resolve it
repos:
  https://docs.com/test-uid-conceptual#live:
    - files:
        docfx.yml:
        docs/a.md: |
          ---
          title: Title from yaml header a
          uid: a
          ---
        docs/b.md: |
          ---
          title: Title from yaml header b
          uid: b
          ---
        docs/c.md: Link to @a
outputs:
  docs/c.json: | 
    {"conceptual":"<p>Link to <a href=\"a\">Title from yaml header a</a></p>\n"}
  docs/a.json:
  docs/b.json:
  xrefmap.json: | 
    {
      "references":[
        {
          "uid": "a",
          "href": "https://docs.com/docs/a",
          "name": "Title from yaml header a"
        },
        {
          "uid": "b",
          "href": "https://docs.com/docs/b",
          "name": "Title from yaml header b"
        }
      ]
    }
  .dependencymap.json: |
    {
      "dependencies": {
          "docs/c.md": [
              {
                  "source": "docs/a.md",
                  "type": "uidInclusion"
              }
          ]
      }
    }
---
# The same uid in internal and external
# should resolve it from the internal one
inputs:
  docfx.yml: |
    xref: xrefmap.json
  docs/a.md: |
    ---
    title: Title from internal a
    uid: a
    ---
  docs/b.md: |
    Link to @a
  xrefmap.json: | 
    {
      "references":[
        {
          "uid": "a",
          "href": "https://docs.com/docs/a",
          "name": "Title from external a"
        }
      ]
    }
outputs:
  docs/a.json:
  docs/b.json: |
    {"conceptual":"<p>Link to <a href=\"a\" data-linktype=\"relative-path\">Title from internal a</a></p>\n"}
---
# Define uid in SDP
# Resolve xref with display property in conceptual document
# Resolve xref with non-existing display property, display name
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "test",
      "fullName": "test.test",
      "description": "a.description"
    }
  docs/c.md: |
    Link to <xref:a?displayProperty=fullName>
    Link to <xref:a??displayProperty=fullName>
    Link to @a?displayProperty=fullName
    Link to @a??displayProperty=fullName
    Link to <xref:a?displayProperty=notExisting>
outputs:
  docs/c.json: | 
    {
      "conceptual":"<p>
                        Link to <a href=\"a.json\">test.test</a>
                        Link to <a href=\"a.json\">test</a>
                        Link to <a href=\"a.json\">test.test</a>
                        Link to <a href=\"a.json\">test</a>??displayProperty=fullName
                        Link to <a href=\"a.json\">test</a></p>"
    }
  docs/a.json:
  xrefmap.json: | 
    {"references":[{"uid":"a"}]}
  .dependencymap.json: |
    {
      "dependencies": {
          "docs/c.md": [
              {
                  "source": "docs/a.json",
                  "type": "uidInclusion"
              }
          ]
      }
    }
---
# Define duplicate uid in conceptual and SDP 
# should output error and uid cannot be resolved
repos:
  https://docs.com/define-duplciate-uid#master:
    - files:
        docfx.yml: |
          template: {APP_BASE_PATH}data/template
        docs/a.yml: |
          #YamlMime:TestData
          uid: a
        docs/b.json: |
          {
            "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
            "uid": "a"
          }
        docs/c.md: Link to @a
outputs:
  docs/a.json:
  docs/b.json: 
  docs/c.json: |
    {"conceptual": "<p>Link to <a href=\"a.json\" data-linktype=\"relative-path\">a</a></p>\n"}
  .errors.log: |
    ["warning","uid-conflict","UID 'a' is defined in more than one file: 'docs/a.yml', 'docs/b.json'"]
  xrefmap.json: | 
    {"references":[{"uid":"a","href":"https://docs.com/docs/a.json?branch=master"}]}
---
# Resolve xref in SDP
repos:
  https://docs.com/test-xref-sdp#live:
    - files:
        docfx.yml: |
          template: {APP_BASE_PATH}data/template
        docs/a.json: |
          {
            "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
            "uid": "a",
            "name": "test",
            "fullName": "test.test",
            "description": "a.description"
          }
        docs/b.json: | 
          {
            "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
            "xref": "a"
          }
outputs:
  docs/a.json:
  docs/b.json: | 
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "xref": {
          "href": "a.json",
          "uid": "a",
          "name": "test",
          "fullName": "test.test",
          "description": "a.description"
      }
    }
  xrefmap.json: | 
    {"references":[{"uid":"a","href":"https://docs.com/docs/a.json"}]}
  .dependencymap.json: |
    {
      "dependencies": {
          "docs/b.json": [
              {
                  "source": "docs/a.json",
                  "type": "uidInclusion"
              }
          ]
      }
    }
---
# Define uid with error
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "test",
      "fullName": "test.test",
      "description":
    }
  docs/b.json: | 
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "xref": "a"
    }
outputs:
  docs/b.json: | 
    {"xref": null}
  .errors.log: |
    ["error","json-syntax-error","Unexpected character encountered while parsing value: }.","docs/a.json",7]
    ["warning","xref-not-found","Cross reference not found: 'a'","docs/b.json",3,13]
  xrefmap.json: | 
    {"!references":null}
---
# support multiple uids in the same array in one SDP
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.yml: |
    #YamlMime:TestData
    uid: a
    description: description for a
    data:
      uid: a.data
      description: description for a.data
    array:
      - uid: a.b
        description: description for a.b
        array:
          - uid: a.b.d
            description: description for a.b.d
          - uid: a.b.e
            description: description for a.b.e
      - uid: a.c
        description: description for a.c
  docs/b.md: Link to @a.b
outputs:
  docs/a.json:
  docs/b.json: |
    {"conceptual": "<p>Link to <a href=\"a.json#a_b\">a.b</a></p>\n"}
  xrefmap.json: |
    {
      "references": [{
        "uid": "a",
        "description": "description for a"
      }, 
      {
        "uid": "a.b",
        "description": "description for a.b"
      },
      {
        "uid": "a.b.d",
        "description": "description for a.b.d"
      },
      {
        "uid": "a.b.e",
        "description": "description for a.b.e"
      }, 
      {
        "uid": "a.c",
        "description": "description for a.c"
      },
      {
        "uid": "a.data",
        "description": "description for a.data"
      }]
    }
---
# uid conflict in one SDP
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "data": 
      {
        "uid": "a"
      }
    }
  docs/b.json: | 
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "xref": "a"
    }
outputs:
  docs/a.json:
  docs/b.json: |
    {"xref":{"uid":"a","href":"a.json"}}
  .errors.log: |
    ["warning","uid-conflict","The same Uid 'a' has been defined multiple times in the same file","docs/a.json"]
---
# uid conflict in non-root level and another SDP
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "data": 
      { 
        "uid": "b"
      }
    }
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "b"
    }
outputs:
  docs/a.json:
  docs/b.json:
  .errors.log: |
    ["warning","uid-conflict","UID 'b' is defined in more than one file: 'docs/a.json', 'docs/b.json'"]
---
# Xref property field which supports markdown content
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "summary": "    Hello `docfx`!"
    }
outputs:
  docs/a.json:
  xrefmap.json: | 
    {"references":[{"uid":"a","summary":"<pre><code>Hello `docfx`!\n</code></pre>\n"}]}
---
# Xref property field which supports inline markdown content
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "inlineDescription": "    Hello `docfx`!"
    }
outputs:
  docs/a.json:
  xrefmap.json: | 
    {"references":[{"uid":"a","inlineDescription":"Hello <code>docfx</code>!"}]}
---
# Xref property field with dependecy
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "inlineDescription": "[!INCLUDE[B](b.md)]"
    }
  docs/b.md: |
    Hello `docfx`!
outputs:
  docs/a.json:
  docs/b.json:
  xrefmap.json: | 
    {"references":[{"uid":"a","inlineDescription":"Hello <code>docfx</code>!"}]}
---
# Refer to uid with hashtag
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
  docs/b.md: | 
    Link to <xref:a#bookmark>
    Link to @a#bookmark
outputs:
  docs/a.json:
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"a#bookmark\">Title from yaml header a</a>\nLink to <a href=\"a#bookmark\">Title from yaml header a</a></p>" }
---
# Refer to uid with encoded content, it should be decoded and then resolved
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a*
    ---
  docs/b.md: | 
    Link to <xref:a%2A>
    Link to @a%2A
    Link to @a*
    Link to @"a*"
    Link to @"a%2A"
outputs:
  docs/a.json:
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"a\">Title from yaml header a</a>\nLink to <a href=\"a\">Title from yaml header a</a>\nLink to <a href=\"a\">Title from yaml header a</a>\nLink to <a href=\"a\">Title from yaml header a</a>\nLink to <a href=\"a\">Title from yaml header a</a></p>" }
---
# Refer to uid within link
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    fullName: full name
    uid: a
    ---
  docs/b.md: | 
    Link to [title](xref:a?displayProperty=fullName#bookmark)
outputs:
  docs/a.json:
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"a#bookmark\">title</a></p>" }
---
# Refer to uid within link, uid not found
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
  docs/b.md: | 
    Link to [title](xref:c#bookmark)
outputs:
  docs/a.json:
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"xref:c#bookmark\">title</a></p>" }
  .errors.log: |
    ["warning","xref-not-found","Cross reference not found: 'c#bookmark'","docs/b.md",1,9]
---
# Markdown inclusion with xref reference
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](1/b.md)]
  docs/1/b.md: Link to @c
  docs/c.md: |
    ---
    title: Title from yaml header c
    uid: c
    ---
outputs:
  docs/a.json: |
    { "conceptual": "<p>a Link to <a href=\"c\">Title from yaml header c</a></p>" }
  docs/1/b.json: |
    { "conceptual": "<p>Link to <a href=\"../c\">Title from yaml header c</a></p>" }
  docs/c.json:
---
# Markdown inclusion with xref reference of link
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](1/b.md)]
  docs/1/b.md: |
    Link to [title](xref:c)
  docs/c.md: |
    ---
    title: Title from yaml header c
    uid: c
    ---
outputs:
  docs/a.json: |
    { "conceptual": "<p>a Link to <a href=\"c\">title</a></p>" }
  docs/1/b.json: |
    { "conceptual": "<p>Link to <a href=\"../c\">title</a></p>" }
  docs/c.json:
---
# Markdown and SDP non-cyclic xref reference
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
    Link to @b?displayProperty=summary
  docs/b.json: | 
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "b",
      "name": "name for b",
      "description": "description for b",
      "summary": "Link to @a?displayProperty=summary",
    }
outputs:
  docs/a.json:
  docs/b.json: |
    { "name":"name for b","description":"description for b" }
---
# SDP non-cyclic xref reference should be resolved
# whose display properties are plain text
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "name for a",
      "inlineDescription": "description for a",
      "summary": "Link to @b?displayProperty=inlineDescription",
    }
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "b",
      "name": "name for b",
      "inlineDescription": "description for b",
      "summary": "Link to @a",
    }
outputs:
  docs/a.json: |
    {
      "name": "name for a",
      "summary": "<p>Link to <a href=\"b.json\">description for b</a></p>\n",
      "inlineDescription": "description for a",
      "uid": "a"
    }
  docs/b.json: |
    {
      "name": "name for b",
      "summary": "<p>Link to <a href=\"a.json\">name for a</a></p>\n",
      "inlineDescription": "description for b",
      "uid": "b"
    }
---
# SDP cyclic xref reference whose display properties referring to another uid
# a.json -> b.json -> a.json && b.json -> a.json -> b.json
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "name for a",
      "inlineDescription": "description for a",
      "summary": "Link to @b?displayProperty=summary",
    }
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "b",
      "name": "name for b",
      "inlineDescription": "description for b",
      "summary": "Link to @a?displayProperty=summary",
    }
  docs/c.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "c",
      "name": "name for c",
      "inlineDescription": "description for c",
      "summary": "Link to @a",
    }
outputs:
  docs/c.json: |
    {"name":"name for c","summary":"<p>Link to <a href=\"a.json\">name for a</a></p>\n","inlineDescription":"description for c","uid":"c"}
  .errors.log: |
    ["error","circular-reference","Build has identified file(s) referencing each other: 'docs/a.json' --> 'docs/b.json' --> 'docs/a.json'","docs/a.json"]
    ["error","circular-reference","Build has identified file(s) referencing each other: 'docs/b.json' --> 'docs/a.json' --> 'docs/b.json'","docs/b.json"]
---
# SDP cyclic xref reference whose display properties referring to another uid
# b.json -> c.json -> b.json && b.json -> c.json -> b.json && c.json -> b.json -> c.json
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "name for a",
      "inlineDescription": "description for a",
      "summary": "Link to @b?displayProperty=summary",
    }
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "b",
      "name": "name for b",
      "inlineDescription": "description for b",
      "summary": "Link to @c?displayProperty=summary",
    }
  docs/c.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "c",
      "name": "name for c",
      "inlineDescription": "description for c",
      "summary": "Link to @b?displayProperty=summary",
    }
outputs:
  .errors.log: | 
    ["error","circular-reference","Build has identified file(s) referencing each other: 'docs/c.json' --> 'docs/b.json' --> 'docs/c.json'","docs/c.json"]
    ["error","circular-reference","Build has identified file(s) referencing each other: 'docs/b.json' --> 'docs/c.json' --> 'docs/b.json'","docs/b.json"]
    ["error","circular-reference","Build has identified file(s) referencing each other: 'docs/a.json' --> 'docs/b.json' --> 'docs/c.json' --> 'docs/b.json'","docs/a.json"]
---
# SDP cyclic xref reference to itself
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "name for a",
      "inlineDescription": "description for a",
      "summary": "Link to @a?displayProperty=summary",
    }
outputs:
  .errors.log: |
    ["error","circular-reference","Build has identified file(s) referencing each other: 'docs/a.json' --> 'docs/a.json'","docs/a.json"]
---
# SDP non-cyclic xref reference, whose property references can be resolved
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "name for a",
      "inlineDescription": "Link to @b?displayProperty=inlineDescription",
      "summary": "Link to @b?displayProperty=summary",
    }
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "b",
      "name": "name for b",
      "inlineDescription": "Link to @a?displayProperty=name",
      "summary": "Link to @a?displayProperty=inlineDescription",
    }
outputs:
  docs/a.json:
  docs/b.json:
---
# input yml file is not object
inputs:
  docfx.yml: |
    template: {APP_BASE_PATH}data/template
  docs/a.yml: |
    #YamlMime:TestData
    1
outputs:
  .errors.log: |
    ["error","unexpected-type","Expect type 'Object' but got 'Integer'","docs/a.yml",1,1]
---
# support <xref href="uid"></xref>
inputs:
  docfx.yml:
  docs/a.md: |
    str <xref href="c"></xref>
    str <xref href="d" data-raw-source="@mention"></xref>
    some text
    str <xref href="d" data-raw-html="@higher" data-raw-source="@mention"></xref>
    multiple xref <xref href="e" data-raw-source="@mentione"></xref> some text <xref href="f" data-raw-source="@mentionf"></xref>
    <p>
      <xref href="e" data-raw-source="@mentione" />
      some text
      <xref href="f" data-raw-source="mentionf" />
    </p>
  docs/c.md: |
    ---
    title: Title from yaml header c
    uid: c
    ---
outputs:
  docs/a.json: |
    {
      "conceptual" : "
        <p>str <a href='c'>Title from yaml header c</a>
        str @mention
        some text
        str @higher
        multiple xref @mentione some text @mentionf</p>
        <p>
          @mentione
          some text
          mentionf
        </p>"
    }
  docs/c.json:
  .errors.log: |
    ["warning","xref-not-found","Cross reference not found: 'f'","docs/a.md",6,2]
---
# support multiple uids with different xref properties
repos:
  https://docs.com/test-multiple-uid-different-xref-property#live:
    - files:
        docfx.yml: |
          template: {APP_BASE_PATH}data/template
        docs/a.yml: |
          #YamlMime:TestData
          uid: a
          description: description for a
          child:
            uid: child
            a: child aaaaa
            b: child bbbbb
            child.c: "child.c cccccc"
          children:
            - uid: children.a
              b: children.a bbbbb
            - uid: children.b
              a: children.b aaaaa
            - uid: children.c
              child.c: "children.c cccccc"
        docs/b.md: |
          Link to @a?displayProperty=description
          Link to @a?displayProperty=fullName
          Link to @a?displayProperty=non-exist-property
          Link to @child?displayProperty=a
          Link to @child?displayProperty=b
          Link to @child?displayProperty=child.c
          Link to @child?displayProperty=non-exist-property
          Link to @children.a?displayProperty=a
          Link to @children.a?displayProperty=b
          Link to @children.a?displayProperty=non-exist-property
          Link to @children.b?displayProperty=a
          Link to @children.b?displayProperty=b
          Link to @children.b?displayProperty=non-exist-property
          Link to @children.c?displayProperty=child.c
outputs:
  docs/a.json:
  docs/b.json: |
    {
      "conceptual":
        "<p>
        Link to <a href=\"a.json\" data-linktype=\"relative-path\">description for a</a>
        Link to <a href=\"a.json\" data-linktype=\"relative-path\">a</a>
        Link to <a href=\"a.json\" data-linktype=\"relative-path\">a</a>
        Link to <a href=\"a.json#child\" data-linktype=\"relative-path\">child aaaaa</a>
        Link to <a href=\"a.json#child\" data-linktype=\"relative-path\">child</a>
        Link to <a href=\"a.json#child\" data-linktype=\"relative-path\">child.c cccccc</a>
        Link to <a href=\"a.json#child\" data-linktype=\"relative-path\">child</a>
        Link to <a href=\"a.json#children_a\" data-linktype=\"relative-path\">children.a</a>
        Link to <a href=\"a.json#children_a\" data-linktype=\"relative-path\">children.a</a>
        Link to <a href=\"a.json#children_a\" data-linktype=\"relative-path\">children.a</a>
        Link to <a href=\"a.json#children_b\" data-linktype=\"relative-path\">children.b aaaaa</a>
        Link to <a href=\"a.json#children_b\" data-linktype=\"relative-path\">children.b</a>
        Link to <a href=\"a.json#children_b\" data-linktype=\"relative-path\">children.b</a>
        Link to <a href=\"a.json#children_c\" data-linktype=\"relative-path\">children.c cccccc</a>
        </p>"
    }
  xrefmap.json: |
    {
        "references": [
            {
                "uid": "a",
                "href": "https://docs.com/docs/a.json",
                "description": "description for a"
            },
            {
                "uid": "child",
                "href": "https://docs.com/docs/a.json#child",
                "a": "child aaaaa",
                "child.c": "child.c cccccc"
            },
            {
                "uid": "children.a",
                "href": "https://docs.com/docs/a.json#children_a"
            },
            {
                "uid": "children.b",
                "href": "https://docs.com/docs/a.json#children_b",
                "a": "children.b aaaaa"
            },
            {
                "uid": "children.c",
                "href": "https://docs.com/docs/a.json#children_c",
                "child.c": "children.c cccccc"
            }
        ]
    }
---
# uid resolving should respect the order of xref settings
inputs:
  docfx.yml: |
    baseUrl: https://docs.microsoft.com
    xref: 
      - 1.xrefmap.json
      - 2.xrefmap.json
  docs/a.md: Link to @System.String
  1.xrefmap.json: |
    {
      "references":[{
          "uid": "System.String",
          "href": "https://docs.microsoft.com/en-us/dotnet/api/system.string"
      }]
    }
  2.xrefmap.json: |
    { "references":[{"uid": "System.String", "href": "https://2.docs.microsoft.com/en-us/system.string"}]}
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\">System.String</a></p>\n"}
---
# support non-leaf nodes for xref properties
repos:
  https://docs.com/test-non-leaf-xref#live:
    - files:
        docfx.yml: |
          template: {APP_BASE_PATH}data/template
        docs/a.yml: |
          #YamlMime:TestData
          uid: a
          list:
            - "1.0"
            - "2.0"
            - "3.0"
          child:
            uid: child
            list:
              - "2.0"
              - "3.0"
          children:
            - uid: children.a
              list:
                - "1.0"
            - uid: children.b
              list:
                - "2.0"
                - "3.0"
outputs:
  docs/a.json:
  xrefmap.json: |
    {
        "references": [
            {
                "uid": "a",
                "href": "https://docs.com/docs/a.json",
                "list": [
                    "1.0",
                    "2.0",
                    "3.0"
                ]
            },
            {
                "uid": "child",
                "href": "https://docs.com/docs/a.json#child",
                "list": [
                    "2.0",
                    "3.0"
                ]
            },
            {
                "uid": "children.a",
                "href": "https://docs.com/docs/a.json#children_a",
                "list": [
                    "1.0"
                ]
            },
            {
                "uid": "children.b",
                "href": "https://docs.com/docs/a.json#children_b",
                "list": [
                    "2.0",
                    "3.0"
                ]
            }
        ]
    }
---
# define UID in master branch
repos:
  https://docs.com/test#master:
    - files:
        docfx.yml:
        docs/a.md: |
          ---
          title: Title from yaml header a
          uid: a
          ---
outputs:
  docs/a.json:
  xrefmap.json: |
    {"references":[{"uid":"a", href: "https://docs.com/docs/a?branch=master"}]}
---
# define UID in live branch
repos:
  https://docs.com/test#live:
    - files:
        docfx.yml:
        docs/a.md: |
          ---
          title: Title from yaml header a
          uid: a
          ---
outputs:
  docs/a.json:
  xrefmap.json: |
    {"references":[{"uid":"a", href: "https://docs.com/docs/a"}]}
          

