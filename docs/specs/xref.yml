---
# Unknown xrefs are output as is with a warning
inputs:
  docfx.yml:
  docs/a.md: Link to <xref:a>
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to &lt;xref:a&gt;</p>" }
  .errors.log: |
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'a'.","file":"docs/a.md","line":1,"column":9}
---
# Unknown xrefs using @ syntax are not included in error log
inputs:
  docfx.yml:
  docs/a.md: Link to @a
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to @a</p>" }
---
# Restore xref map from configured url and use the map for resolving
# hostname should be removed if docset sharing the same one
# xref should be unironed from different sources
inputs:
  docfx.yml: |
    hostName: docs.microsoft.com
    xref:
    - 2.xrefmap.json
    extend: _shared/extend.json
  _shared/extend.json: |
    {"xref":["1.xrefmap.json"]}
  docs/a.md: Link to @System.String?displayProperty=fullName
  1.xrefmap.json: |
    {
      "references":[{
          "uid": "System.String",
          "name": "String",
          "fullName": "System.String",
          "href": "https://docs.microsoft.com/dotnet/api/system.string",
          "nameWithType": "System.String"
      }]
    }
  2.xrefmap.json: |
    { "references":[{"uid": "a", "name": "a", "fullName": "a", "href": "https://docs.microsoft.com/a", "nameWithType": "a"}]}
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"/en-us/dotnet/api/system.string\">System.String</a></p>\n"}
---
# original config should have higher priority than extend config
inputs:
  docfx.yml: |
    hostName: docs.microsoft.com
    xref:
    - high.xrefmap.json
    extend: _shared/extend.json
  _shared/extend.json: |
    {"xref":["1.xrefmap.json"]}
  docs/a.md: Link to @System.String?displayProperty=fullName
  high.xrefmap.json: |
    {
      "references":[{
          "uid": "System.String",
          "name": "String",
          "fullName": "System.String.Higher",
          "href": "https://docs.microsoft.com/dotnet/api/system.string",
          "nameWithType": "System.String"
      }]
    }
  1.xrefmap.json: |
    {
      "references":[{
          "uid": "System.String",
          "name": "String",
          "fullName": "System.String",
          "href": "https://docs.microsoft.com/dotnet/api/system.string",
          "nameWithType": "System.String"
      }]
    }
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"/en-us/dotnet/api/system.string\">System.String.Higher</a></p>\n"}
---
# Should not remove host name if not sharing with xref href
inputs:
  docfx.yml: |
    hostName: docs.microsoft.co
    xref: 
      - 1.xrefmap.json
  docs/a.md: Link to @System.String?displayProperty=fullName
  1.xrefmap.json: |
    {
      "references":[{
          "uid": "System.String",
          "name": "String",
          "fullName": "System.String",
          "href": "https://docs.microsoft.com/dotnet/api/system.string",
          "nameWithType": "System.String"
      }]
    }
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"https://docs.microsoft.com/dotnet/api/system.string\">System.String</a></p>\n"}
---
# Restore xref map from configured url and use the YAML file for resolving
inputs:
  docfx.yml: |
    xref: 
      - xrefmap.yml
  docs/a.md: Link to @System.String
  xrefmap.yml: |
    references:
      - uid: System.String
        name: String
        fullName: System.String
        href: https://docs.microsoft.com/en-us/dotnet/api/system.string
        nameWithType: System.String
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\">String</a></p>\n"}
---
# Restore xref map from configured url and use the zip file for resolving
inputs:
  docfx.yml: |
    xref: 
      - xrefmap.zip
  docs/a.md: Link to @System.String
  xrefmap.zip: |
    xrefmap.yml: |
      references:
        - uid: System.String
          name: String
          fullName: System.String
          href: https://docs.microsoft.com/en-us/dotnet/api/system.string
          nameWithType: System.String
    a.json: |
      { "references":[{"uid": "a", "name": "a", "fullName": "a", "href": "https://docs.microsoft.com/en-us/a", "nameWithType": "a"}]}
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\">String</a></p>\n"}
---
# Define uid in conceptual, resolve it
repos:
  https://docs.com/test-uid-conceptual#live:
    - files:
        docfx.yml: |
          hostName: docs.com
          basePath: /base_path
          xrefhostName: test.docs.com
        docs/a.md: |
          ---
          title: Title from yaml header a
          uid: a
          ---
        docs/b.md: |
          ---
          title: Title from yaml header b
          uid: b
          ---
        docs/c.md: Link to @a
outputs:
  base_path/docs/c.json: | 
    {"conceptual":"<p>Link to <a href=\"a\">Title from yaml header a</a></p>\n"}
  base_path/docs/a.json:
  base_path/docs/b.json:
  .xrefmap.json: | 
    {
      "references":[
        {
          "uid": "a",
          "href": "https://test.docs.com/base_path/docs/a",
          "name": "Title from yaml header a"
        },
        {
          "uid": "b",
          "href": "https://test.docs.com/base_path/docs/b",
          "name": "Title from yaml header b"
        }
      ]
    }
  .dependencymap.json: |
    {
      "dependencies": {
          "docs/c.md": [
              { "source": "docs/a.md", "type": "uid" }
          ]
      }
    }
---
# Remove host from review site
# This can be removed when xref related repo migrated to v3
repos:
  https://docs.com/test-uid-conceptual#live:
    - files:
        docfx.yml: |
          hostName: docs.microsoft.com
          basePath: /base_path
          xref: 
            - 1.xrefmap.json
        docs/a.md: Link to @System.String
        1.xrefmap.json: |
          {
            "references":[{
                "uid": "System.String",
                "name": "String",
                "fullName": "System.String",
                "href": "https://review.docs.microsoft.com/dotnet/api/system.string",
                "nameWithType": "System.String"
            }]
          }
outputs:
  base_path/docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"/en-us/dotnet/api/system.string\">String</a></p>\n"}
---
# The same uid in internal and external
# should resolve it from the internal one
inputs:
  docfx.yml: |
    xref: xrefmap.json
  docs/a.md: |
    ---
    title: Title from internal a
    uid: a
    ---
  docs/b.md: |
    Link to @a
  xrefmap.json: | 
    {
      "references":[
        {
          "uid": "a",
          "href": "https://docs.com/docs/a",
          "name": "Title from external a"
        }
      ]
    }
outputs:
  docs/a.json:
  docs/b.json: |
    {"conceptual":"<p>Link to <a href=\"a\" data-linktype=\"relative-path\">Title from internal a</a></p>\n"}
---
# resolve uid in `.fallback` folder for loc build
locale: zh-cn
repos:
  https://docs.com/xref-fallback#master:
    - files:
        docfx.yml:
  https://docs.com/xref-fallback.zh-cn#master:
    - files:
        docfx.yml:
        .fallback/b.md: |
          ---
          title: uid from fallback
          uid: fallback
          ---
        a.md: |
          @fallback
outputs:
  a.json: |
    { "conceptual":"<p><a href=\"b\" data-linktype=\"relative-path\">uid from fallback</a></p>\n"}
---
# uid in loc has higher priority than in fallback(path can be different)
# and report no error
locale: zh-cn
repos:
  https://docs.com/xref-fallback#master:
    - files:
        docfx.yml:
        dir/b.md: |
          ---
          title: uid in fallback
          uid: b
          ---
  https://docs.com/xref-fallback.zh-cn#master:
    - files:
        docfx.yml:
        b.md: |
          ---
          title: uid in loc
          uid: b
          ---
        a.md: |
          @b
outputs:
  a.json: |
    { "conceptual":"<p><a href=\"b\" data-linktype=\"relative-path\">uid in loc</a></p>\n"}
  b.json:
---
# Define uid in SDP
# Resolve xref with display property in conceptual document
# Resolve xref with non-existing display property, display name
inputs:
  docfx.yml: |
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "test",
      "fullName": "test.test",
      "description": "a.description"
    }
  docs/c.md: |
    Link to <xref:a?text=some%20text&displayProperty=fullName>
    Link to <xref:a?displayProperty=fullName>
    Link to <xref:a??displayProperty=fullName>
    Link to @a?displayProperty=fullName
    Link to @a??displayProperty=fullName
    Link to <xref:a?displayProperty=notExisting>
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "renderType": "component",
      "properties": {
        "uid": { "contentType": "uid" },
        "fullName": { "type": "string" },
        "name": { "type": "string" }
      },
      "xrefProperties": ["name", "fullName", "description"]
    }
outputs:
  docs/c.json: | 
    {
      "conceptual":"<p>
                        Link to <a href=\"a.json\">some text</a>
                        Link to <a href=\"a.json\">test.test</a>
                        Link to <a href=\"a.json??displayProperty=fullName\">test</a>
                        Link to <a href=\"a.json\">test.test</a>
                        Link to <a href=\"a.json\">test</a>??displayProperty=fullName
                        Link to <a href=\"a.json\">test</a></p>"
    }
  docs/a.json:
  .xrefmap.json: | 
    {"references":[{"uid":"a"}]}
  .dependencymap.json: |
    {
      "dependencies": {
          "docs/c.md": [
              {
                  "source": "docs/a.json",
                  "type": "uid"
              }
          ]
      }
    }
---
# Define duplicate uid in conceptual and SDP 
# should output error and uid cannot be resolved
repos:
  https://docs.com/define-duplciate-uid#master:
    - files:
        docfx.yml: |
          hostName: docs.com
          basePath: /base_path
        docs/a.yml: |
          #YamlMime:TestData
          uid: a
        docs/b.json: |
          {
            "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
            "uid": "a"
          }
        docs/c.md: Link to @a
        _themes/ContentTemplate/schemas/TestData.schema.json: |
          {
            "renderType": "component",
            "properties": {
              "uid": { "contentType": "uid" }
            }
          }
outputs:
  base_path/docs/a.json:
  base_path/docs/b.json: 
  base_path/docs/c.json: |
    {"conceptual": "<p>Link to <a href=\"a.json\" data-linktype=\"relative-path\">a</a></p>\n"}
  .errors.log: |
    {"message_severity":"warning","code":"duplicate-uid","message":"UID 'a' is duplicated in 'docs/a.yml(2,6)', 'docs/b.json(3,12)'.","file":"docs/a.yml","line":2,"column":6}
    {"message_severity":"warning","code":"duplicate-uid","message":"UID 'a' is duplicated in 'docs/a.yml(2,6)', 'docs/b.json(3,12)'.","file":"docs/b.json","line":3,"column":12}
  .xrefmap.json: | 
    {"references":[{"uid":"a","href":"https://docs.com/base_path/docs/a.json?branch=master"}]}
---
# Resolve xref in SDP
repos:
  https://docs.com/test-xref-sdp#live:
    - files:
        docfx.yml: |
        docs/a.json: |
          {
            "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
            "uid": "a",
            "name": "test",
            "fullName": "test.test",
            "description": "a.description"
          }
        docs/f1/f2/b.json: | 
          {
            "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
            "xref": "a"
          }
        _themes/ContentTemplate/schemas/TestData.schema.json: |
          {
            "renderType": "component",
            "properties": {
              "uid": { "contentType": "uid" },
              "xref": { "contentType": "Xref" },
              "name": { "type": "string" },
              "fullName": { "type": "string" },
              "description": { "type": "string" }
            },
            "xrefProperties": ["name", "fullName", "description"]
          }
outputs:
  docs/a.json:
  docs/f1/f2/b.json: | 
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "xref": "a"
    }
  .xrefmap.json: | 
    {"references":[{"uid":"a","href":"https://docs.com/docs/a.json"}]}
  .dependencymap.json: |
    {
      "dependencies": {
          "docs/f1/f2/b.json": [
              {
                  "source": "docs/a.json",
                  "type": "uid"
              }
          ]
      }
    }
---
# Define uid with error
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "test",
      "fullName": "test.test",
      "description":
    }
  docs/b.json: | 
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "xref": "a"
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "uid": { "contentType": "uid" },
        "xref": { "contentType": "Xref" }
      },
      "xrefProperties": ["name", "fullName", "description"]
    }
outputs:
  docs/b.json: | 
    { "xref": "a" }
  .errors.log: |
    {"message_severity":"error","code":"json-syntax-error","message":"Unexpected character encountered while parsing value: }.","file":"docs/a.json","line":7}
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'a'.","file":"docs/b.json","line":3,"column":13}
  .xrefmap.json: | 
    { "references": undefined }
---
# support multiple uids in the same array in one SDP
inputs:
  docfx.yml: |
  docs/a.yml: |
    #YamlMime:TestData
    uid: a
    description: description for a
    data:
      uid: a.data
      description: description for a.data
    array:
      - uid: a.b
        description: description for a.b
        array:
          - uid: a.b.d
            description: description for a.b.d
          - uid: a.b.e
            description: description for a.b.e
      - uid: a.c
        description: description for a.c
  docs/b.md: Link to @a.b
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "renderType": "component",
      "properties": {
        "uid": { "contentType": "uid" },
        "description": { "type": "string" },
        "data": { "$ref": "#" },
        "array": {
          "items": { "$ref": "#" }
        }
      },
      "xrefProperties":["description"]
    }
outputs:
  docs/a.json:
  docs/b.json: |
    {"conceptual": "<p>Link to <a href=\"a.json#a_b\">a.b</a></p>\n"}
  .xrefmap.json: |
    {
      "references": [{
        "uid": "a",
        "description": "description for a"
      }, 
      {
        "uid": "a.b",
        "description": "description for a.b"
      },
      {
        "uid": "a.b.d",
        "description": "description for a.b.d"
      },
      {
        "uid": "a.b.e",
        "description": "description for a.b.e"
      }, 
      {
        "uid": "a.c",
        "description": "description for a.c"
      },
      {
        "uid": "a.data",
        "description": "description for a.data"
      }]
    }
---
# uid conflict in one SDP
inputs:
  docfx.yml: |
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "data": 
      {
        "uid": "a"
      }
    }
  docs/b.json: | 
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "xref": "a"
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "data": { "$ref": "#" },
        "uid": { "contentType": "uid" },
        "xref": { "contentType": "Xref" }
      }
    }
outputs:
  docs/a.json:
  docs/b.json: |
    { "xref": "a" }
  .errors.log: |
    {"message_severity":"warning","code":"duplicate-uid","message":"UID 'a' is duplicated in 'docs/a.json(3,12)', 'docs/a.json(6,14)'.","file":"docs/a.json","line":3,"column":12}
    {"message_severity":"warning","code":"duplicate-uid","message":"UID 'a' is duplicated in 'docs/a.json(3,12)', 'docs/a.json(6,14)'.","file":"docs/a.json","line":6,"column":14}
---
# uid conflict in non-root level and another SDP
inputs:
  docfx.yml: |
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "data": 
      { 
        "uid": "b"
      }
    }
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "b"
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "data": { "$ref": "#" },
        "uid": { "contentType": "uid" }
      }
    }
outputs:
  docs/a.json:
  docs/b.json:
  .errors.log: |
    {"message_severity":"warning","code":"duplicate-uid","message":"UID 'b' is duplicated in 'docs/a.json(6,14)', 'docs/b.json(3,12)'.","file":"docs/a.json","line":6,"column":14}
    {"message_severity":"warning","code":"duplicate-uid","message":"UID 'b' is duplicated in 'docs/a.json(6,14)', 'docs/b.json(3,12)'.","file":"docs/b.json","line":3,"column":12}
---
# uid conflict globally
inputs:
  docfx.yml: |
    xref:
    - 1.xrefmap.json
  1.xrefmap.json: |
    {
      "repository_url": "a_repo",
      "references":[{
          "uid": "a"
      }]
    }
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a"
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "uid": { "contentType": "uid", "uidGlobalUnique": true }
      }
    }
outputs:
  docs/a.json:
  .errors.log: |
    {"message_severity":"warning","code":"duplicate-uid-global","message":"UID 'a' is duplicated globally in repository 'a_repo'.","file":"docs/a.json","line":3,"column":12}
---
# Xref property field which supports markdown content
inputs:
  docfx.yml: |
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "summary": "    Hello `docfx`!"
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "summary": { "contentType": "Markdown" },
        "uid": { "contentType": "uid" }
      },
      "xrefProperties": ["summary"]
    }
outputs:
  docs/a.json:
  .xrefmap.json: | 
    {"references":[{"uid":"a","summary":"<pre><code>Hello `docfx`!\n</code></pre>\n"}]}
---
# Xref property field which supports inline markdown content
inputs:
  docfx.yml: |
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "inlineDescription": "    Hello `docfx`!"
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "inlineDescription": { "contentType": "InlineMarkdown" },
        "uid": { "contentType": "uid" }
      },
      "xrefProperties": [ "inlineDescription" ]
    }
outputs:
  docs/a.json:
  .xrefmap.json: | 
    {"references":[{"uid":"a","inlineDescription":"Hello <code>docfx</code>!"}]}
---
# Xref property field with dependency
inputs:
  docfx.yml: |
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "inlineDescription": "[!INCLUDE[B](b.md)]"
    }
  docs/b.md: |
    Hello `docfx`!
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "inlineDescription": { "contentType": "InlineMarkdown" },
        "uid": { "contentType": "uid" }
      },
      "xrefProperties": ["inlineDescription"]
    }
outputs:
  docs/a.json:
  docs/b.json:
  .xrefmap.json: | 
    {"references":[{"uid":"a","inlineDescription":"Hello <code>docfx</code>!"}]}
---
# Refer to uid with hashtag
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
  docs/b.md: | 
    Link to <xref:a#bookmark>
    Link to @a#bookmark
outputs:
  docs/a.json:
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"a#bookmark\">Title from yaml header a</a>\nLink to <a href=\"a#bookmark\">Title from yaml header a</a></p>" }
---
# Refer to uid with encoded content, it should be decoded and then resolved
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a*
    ---
  docs/b.md: | 
    Link to <xref:a%2A>
    Link to @a%2A
    Link to @a*
    Link to @"a*"
    Link to @"a%2A"
outputs:
  docs/a.json:
  docs/b.json: |
    { "conceptual": "<p>
          Link to <a href=\"a\">Title from yaml header a</a>
          Link to <a href=\"a\">Title from yaml header a</a>
          Link to <a href=\"a\">Title from yaml header a</a>
          Link to <a href=\"a\">Title from yaml header a</a>
          Link to <a href=\"a\">Title from yaml header a</a></p>" }
---
# Refer to uid within link
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    fullName: full name
    uid: a
    ---
  docs/b.md: | 
    Link to [title](xref:a?displayProperty=fullName#bookmark)
outputs:
  docs/a.json:
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"a#bookmark\">title</a></p>" }
---
# Refer to uid within link, uid not found
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
  docs/b.md: | 
    Link to [title](xref:c#bookmark)
outputs:
  docs/a.json:
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"xref:c#bookmark\">title</a></p>" }
  .errors.log: |
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'c'.","file":"docs/b.md","line":1,"column":9}
---
# Markdown inclusion with xref reference
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](1/b.md)]
  docs/1/b.md: Link to @c
  docs/c.md: |
    ---
    title: Title from yaml header c
    uid: c
    ---
outputs:
  docs/a.json: |
    { "conceptual": "<p>a Link to <a href=\"c\">Title from yaml header c</a></p>" }
  docs/1/b.json: |
    { "conceptual": "<p>Link to <a href=\"../c\">Title from yaml header c</a></p>" }
  docs/c.json:
---
# Markdown inclusion with xref reference of link
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](1/b.md)]
  docs/1/b.md: |
    Link to [title](xref:c)
  docs/c.md: |
    ---
    title: Title from yaml header c
    uid: c
    ---
outputs:
  docs/a.json: |
    { "conceptual": "<p>a Link to <a href=\"c\">title</a></p>" }
  docs/1/b.json: |
    { "conceptual": "<p>Link to <a href=\"../c\">title</a></p>" }
  docs/c.json:
  .dependencymap.json: |
    {
      "dependencies": {
        "docs/1/b.md": [
          { "source": "docs/c.md", "type": "uid" }
        ],
        "docs/a.md": [
          { "source": "docs/1/b.md", "type": "include" },
          { "source": "docs/c.md", "type": "uid" }
        ]
      }
    }
---
# circular reference within SDP UID definition a -> a
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestData
    uid: a
    xref: a
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
          "uid": { "contentType": "uid" },
          "xref": { "contentType": "Xref" }
      },
      "xrefProperties": ["xref"]
    }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"circular-reference","message":"Build has identified file(s) referencing each other: 'a (docs/a.yml(2,6))' --> 'a (docs/a.yml(2,6))'.","file":"docs/a.yml","line":2,"column":6}
---
# circular reference within SDP UID definition a -> b -> c -> a
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestData
    uid: a
    xref: b
  docs/b.yml: |
    #YamlMime:TestData
    uid: b
    xref: c
  docs/c.yml: |
    #YamlMime:TestData
    uid: c
    xref: a
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "renderType": "component",
      "properties": {
          "uid": { "contentType": "uid" },
          "xref": { "contentType": "Xref" }
      },
      "xrefProperties": ["xref"]
    }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"circular-reference","message":"Build has identified file(s) referencing each other: 'a (docs/a.yml(2,6))' --> 'b (docs/b.yml(2,6))' --> 'c (docs/c.yml(2,6))' --> 'a (docs/a.yml(2,6))'.","file":"docs/a.yml","line":2,"column":6}
    {"message_severity":"error","code":"circular-reference","message":"Build has identified file(s) referencing each other: 'b (docs/b.yml(2,6))' --> 'c (docs/c.yml(2,6))' --> 'a (docs/a.yml(2,6))' --> 'b (docs/b.yml(2,6))'.","file":"docs/b.yml","line":2,"column":6}
    {"message_severity":"error","code":"circular-reference","message":"Build has identified file(s) referencing each other: 'c (docs/c.yml(2,6))' --> 'a (docs/a.yml(2,6))' --> 'b (docs/b.yml(2,6))' --> 'c (docs/c.yml(2,6))'.","file":"docs/c.yml","line":2,"column":6}
---
# [skip] circular reference within SDP UID definition a -> b -> a -> c
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestData
    uid: a
    xref: b
    anotherXref: c
  docs/b.yml: |
    #YamlMime:TestData
    uid: b
    xref: a
  docs/c.yml: |
    #YamlMime:TestData
    uid: c
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
          "uid": { "contentType": "uid" },
          "xref": { "contentType": "Xref" },
          "anotherXref": { "contentType": "Xref" }
      },
      "xrefProperties": ["xref"]
    }
outputs:
  docs/c.json:
  .errors.log: |
    {"message_severity":"error","code":"circular-reference","message":"Build has identified file(s) referencing each other: 'a (docs/a.yml(2,6))' --> 'b (docs/b.yml(2,6))' --> 'a (docs/a.yml(2,6))'.","file":"docs/a.yml","line":2,"column":6}
    {"message_severity":"error","code":"circular-reference","message":"Build has identified file(s) referencing each other: 'b (docs/b.yml(2,6))' --> 'a (docs/a.yml(2,6))' --> 'b (docs/b.yml(2,6))'.","file":"docs/b.yml","line":2,"column":6}
---
# display property of non-plain text content type will be ignored
inputs:
  docfx.yml: |
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "name for a",
      "inlineDescription": "Link to @b?displayProperty=inlineDescription",
      "summary": "Link to @b?displayProperty=summary",
    } 
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "name": "name for b",
      "uid": "b",
      "inlineDescription": "description for _b_",
      "summary": "Link to @a",
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "renderType": "component",
      "properties": {
        "summary": { "contentType": "Markdown" },
        "inlineDescription": { "contentType": "InlineMarkdown" },
        "uid": { "contentType": "uid" },
        "name": { "type": "string" }
      },
      "xrefProperties": ["name", "summary", "inlineDescription"]
    }
outputs:
  docs/a.json: |
    {
      "uid": "a",
      "name": "name for a",
      "inlineDescription": "Link to <a href=\"b.json\">description for &lt;em&gt;b&lt;/em&gt;</a>",
      "summary": "
          <p>
            Link to <a href=\"b.json\">&lt;p&gt;Link to &lt;a href=&quot;a.json&quot;&gt;name for a&lt;/a&gt;&lt;/p&gt;</a>
          </p>"
    }
  docs/b.json: |
    {
      "name": "name for b",
      "uid": "b",
      "inlineDescription": "description for <em>b</em>",
      "summary": "
          <p>
            Link to <a href=\"a.json\">name for a</a>
          </p>"
    }
---
# input yml file is not object
inputs:
  docfx.yml: |
  docs/a.yml: |
    #YamlMime:TestData
    1
  _themes/ContentTemplate/schemas/TestData.schema.json: "{}"
outputs:
  .errors.log: |
    {"message_severity":"error","code":"unexpected-type","message":"Expected type 'Object' but got 'Integer'.","file":"docs/a.yml","line":1,"column":1}
---
# support <xref href="uid"></xref>
inputs:
  docfx.yml:
  docs/a.md: |
    str <xref href="c"></xref>
    str <xref href="d?alt=altText&action=xxx"></xref>
    str <xref href="d?action=xxx"></xref>
    str <xref href="d" data-raw-source="@mention"></xref>
    some text
    str <xref href="d" data-raw-html="@higher" data-raw-source="@mention"></xref>
    multiple xref <xref href="e" data-raw-source="@mentione"></xref> some text <xref href="f" data-raw-source="@mentionf"></xref>
    <p>
      <xref href="e" data-raw-source="@mentione" />
      some text
      <xref href="f" data-raw-source="mentionf" />
    </p>
  docs/c.md: |
    ---
    title: Title from yaml header c
    uid: c
    ---
outputs:
  docs/a.json: |
    {
      "conceptual" : "
        <p>str <a href='c'>Title from yaml header c</a>
        str <span class=\"xref\">altText</span>
        str <span class=\"xref\">d</span>
        str @mention
        some text
        str @higher
        multiple xref @mentione some text @mentionf</p>
        <p>
          @mentione
          some text
          mentionf
        </p>"
    }
  docs/c.json:
  .errors.log: |
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'd'.","file":"docs/a.md","line":2,"column":5}
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'd'.","file":"docs/a.md","line":3,"column":5}
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'f'.","file":"docs/a.md","line":11,"column":3}
---
# Transform xref in HTML block should not auto close the parent tag
inputs:
  docfx.yml:
  docs/a.md: |
    <table>
    <tr>A=<xref href="Me" data-raw-source="@Me"></xref></tr>

    <tr>A</tr>
    </table>
outputs:
  docs/a.json: |
    { "conceptual": "<table><tr>A=@Me</tr><tr>A</tr></table>"}
---
# Support data-throw-if-not-resolved attribute user written <xref> (not in mustache)
inputs:
  docfx.yml:
  a.md: |
    1. <xref href="xref-error" data-throw-if-not-resolved="True" data-raw-source="xref-error"></xref>
    2. <xref href="xref-suppress" data-throw-if-not-resolved="False" data-raw-source="xref-suppress"></xref>
outputs:
  a.json: |
    { "conceptual": "<ol><li>xref-error</li> <li>xref-suppress</li></ol>"}
  .errors.log: |
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'xref-error'.","file":"a.md","line":1,"column":4}

---
# support <xref uid="uid"></xref>
inputs:
  docfx.yml:
  docs/a.md: |
    str <xref uid="b"></xref>
    query unsupported <xref uid="b?displayProperty=a"></xref>
    bookmark unsupported <xref uid="b#bookmark"></xref>
    use raw name 'html' no warning <xref uid="unexist" data-raw-html="@higher" data-raw-source="@mention"></xref>
    use raw name 'source' no warning <xref uid="unexist" data-raw-source="@mention"></xref>
    href higher priority <xref href="b" uid="unexist"></xref>
    href higher priority even unexist <xref href="unexist" uid="b"></xref>
  docs/b.md: |
    ---
    title: b title
    uid: b
    ---
outputs:
  docs/a.json: |
    {
      "conceptual" : "
        <p>str <a href='b'>b title</a>
        query unsupported <span class='xref'>b?displayProperty=a</span>
        bookmark unsupported <span class='xref'>b#bookmark</span>
        use raw name 'html' no warning  @higher
        use raw name 'source' no warning  @mention
        href higher priority <a href='b'>b title</a>
        href higher priority even unexist <span class='xref'>unexist</span>
        "
    }
  docs/b.json:
  .errors.log: |
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'b?displayProperty=a'.","file":"docs/a.md","line":2,"column":19}
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'b#bookmark'.","file":"docs/a.md","line":3,"column":22}
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'unexist'.","file":"docs/a.md","line":7,"column":35}
---
# Support <xref> tag with neither uid nor href
inputs:
  docfx.yml:
  docs/a.md: |
    <xref data-raw-source="@Me"></xref>
outputs:
  docs/a.json: |
    { "conceptual": "<p>@Me</p>"}
---
# support multiple uids with different xref properties
repos:
  https://docs.com/test-multiple-uid-different-xref-property#live:
    - files:
        docfx.yml: |
        docs/a.yml: |
          #YamlMime:TestData
          uid: a
          description: description for a
          child:
            uid: child
            a: child aaaaa
            b: child bbbbb
            child.c: "child.c cccccc"
          children:
            - uid: children.a
              b: children.a bbbbb
            - uid: children.b
              a: children.b aaaaa
            - uid: children.c
              child.c: "children.c cccccc"
        docs/b.md: |
          Link to @a?displayProperty=description
          Link to @a?displayProperty=fullName
          Link to @a?displayProperty=non-exist-property
          Link to @child?displayProperty=a
          Link to @child?displayProperty=b
          Link to @child?displayProperty=child.c
          Link to @child?displayProperty=non-exist-property
          Link to @children.a?displayProperty=a
          Link to @children.a?displayProperty=b
          Link to @children.a?displayProperty=non-exist-property
          Link to @children.b?displayProperty=a
          Link to @children.b?displayProperty=b
          Link to @children.b?displayProperty=non-exist-property
          Link to @children.c?displayProperty=child.c
        _themes/ContentTemplate/schemas/TestData.schema.json: |
          {
            "renderType": "component",
            "definitions": {
              "testChild": {
                "properties": {
                  "a": { "type": "string" },
                  "child.c": { "type": "string" },
                  "uid": { "contentType": "uid" }
                },
                "xrefProperties":["a", "child.c"]
              }
            },
            "properties": {
              "description": { "type": "string" },
              "uid": { "contentType": "uid" },
              "child": { "$ref": "#/definitions/testChild" },
              "children": {
                "items": { "$ref": "#/definitions/testChild" }
              }
            },
            "xrefProperties":["description"]
          }
outputs:
  docs/a.json:
  docs/b.json: |
    {
      "conceptual":
        "<p>
        Link to <a href=\"a.json\" data-linktype=\"relative-path\">description for a</a>
        Link to <a href=\"a.json\" data-linktype=\"relative-path\">a</a>
        Link to <a href=\"a.json\" data-linktype=\"relative-path\">a</a>
        Link to <a href=\"a.json#child\" data-linktype=\"relative-path\">child aaaaa</a>
        Link to <a href=\"a.json#child\" data-linktype=\"relative-path\">child</a>
        Link to <a href=\"a.json#child\" data-linktype=\"relative-path\">child.c cccccc</a>
        Link to <a href=\"a.json#child\" data-linktype=\"relative-path\">child</a>
        Link to <a href=\"a.json#children_a\" data-linktype=\"relative-path\">children.a</a>
        Link to <a href=\"a.json#children_a\" data-linktype=\"relative-path\">children.a</a>
        Link to <a href=\"a.json#children_a\" data-linktype=\"relative-path\">children.a</a>
        Link to <a href=\"a.json#children_b\" data-linktype=\"relative-path\">children.b aaaaa</a>
        Link to <a href=\"a.json#children_b\" data-linktype=\"relative-path\">children.b</a>
        Link to <a href=\"a.json#children_b\" data-linktype=\"relative-path\">children.b</a>
        Link to <a href=\"a.json#children_c\" data-linktype=\"relative-path\">children.c cccccc</a>
        </p>"
    }
  .xrefmap.json: |
    {
        "references": [
            {
                "uid": "a",
                "href": "https://docs.com/docs/a.json",
                "description": "description for a"
            },
            {
                "uid": "child",
                "href": "https://docs.com/docs/a.json#child",
                "a": "child aaaaa",
                "child.c": "child.c cccccc"
            },
            {
                "uid": "children.a",
                "href": "https://docs.com/docs/a.json#children_a"
            },
            {
                "uid": "children.b",
                "href": "https://docs.com/docs/a.json#children_b",
                "a": "children.b aaaaa"
            },
            {
                "uid": "children.c",
                "href": "https://docs.com/docs/a.json#children_c",
                "child.c": "children.c cccccc"
            }
        ]
    }
---
# uid resolving should respect the order of xref settings
inputs:
  docfx.yml: |
    hostName: docs.microsoft.com
    xref: 
      - 1.xrefmap.json
      - 2.xrefmap.json
  docs/a.md: Link to @System.String
  1.xrefmap.json: |
    {
      "references":[{
          "uid": "System.String",
          "href": "https://docs.microsoft.com/en-us/dotnet/api/system.string"
      }]
    }
  2.xrefmap.json: |
    { "references":[{"uid": "System.String", "href": "https://2.docs.microsoft.com/en-us/system.string"}]}
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"/en-us/dotnet/api/system.string\">System.String</a></p>\n"}
---
# support non-leaf nodes for xref properties
repos:
  https://docs.com/test-non-leaf-xref#live:
    - files:
        docfx.yml: |
        docs/a.yml: |
          #YamlMime:TestData
          uid: a
          list:
            - "1.0"
            - "2.0"
            - "3.0"
          child:
            uid: child
            list:
              - "2.0"
              - "3.0"
          children:
            - uid: children.a
              list:
                - "1.0"
            - uid: children.b
              list:
                - "2.0"
                - "3.0"
        _themes/ContentTemplate/schemas/TestData.schema.json: |
          {
            "renderType": "component",
            "definitions": {
              "testChild": {
                "properties": {
                  "uid": { "contentType": "uid" },
                  "list": { "items": { "type": "string" }
                  }
                },
                "xrefProperties": ["list"]
              }
            },
            "properties": {
              "uid": { "contentType": "uid" },
              "child": { "$ref": "#/definitions/testChild" },
              "children": { 
                "items": { "$ref": "#/definitions/testChild" }
              },
              "list": { "items": { "type": "string" }
              }
            },
            "xrefProperties":["list"]
          }
outputs:
  docs/a.json:
  .xrefmap.json: |
    {
        "references": [
            {
                "uid": "a",
                "href": "https://docs.com/docs/a.json",
                "list": [
                    "1.0",
                    "2.0",
                    "3.0"
                ]
            },
            {
                "uid": "child",
                "href": "https://docs.com/docs/a.json#child",
                "list": [
                    "2.0",
                    "3.0"
                ]
            },
            {
                "uid": "children.a",
                "href": "https://docs.com/docs/a.json#children_a",
                "list": [
                    "1.0"
                ]
            },
            {
                "uid": "children.b",
                "href": "https://docs.com/docs/a.json#children_b",
                "list": [
                    "2.0",
                    "3.0"
                ]
            }
        ]
    }
---
# Append branch query string to xrefmap for non-live branch when url type is docs
repos:
  https://docs.com/test#test:
    - files:
        docfx.yml:
        docs/a.md: |
          ---
          uid: a
          ---
outputs:
  docs/a.json:
  .xrefmap.json: |
    {"references":[{"uid":"a", href: "https://docs.com/docs/a?branch=test"}],"properties": {"tags": ["/","internal"]}}
---
# No branch query string in xrefmap for live branch when url type is docs
repos:
  https://docs.com/test#live:
    - files:
        docfx.yml: |
          hostName: docs.com
          basePath: /base_path
        docs/a.md: |
          ---
          uid: a
          ---
outputs:
  base_path/docs/a.json:
  .xrefmap.json: |
    {"references":[{"uid":"a", href: "https://docs.com/base_path/docs/a"}],"properties": {"tags": ["/base_path","public"]}}
---
# No branch query string in xrefmap for non-live branch when url type is not docs
repos:
  https://docs.com/test#test:
    - files:
        docfx.yml: |
          urlType: ugly
        docs/a.md: |
          ---
          uid: a
          ---
outputs:
  docs/a.json:
  .xrefmap.json: |
    {"references":[{"uid":"a", href: "https://docs.com/docs/a.html"}],"properties": undefined }
---
# resolve UID with unknown query
repos:
  https://docs.com/unkown-query#live:
    - files:
        docfx.yml:
        docs/a.md: |
          ---
          title: Title from yaml header a
          uid: a
          ---
        docs/b.md: |
          Link to @a?displayname=xxx
outputs:
  docs/a.json:
  docs/b.json: |
    { "conceptual": "<p>Link to <a href='a?displayname=xxx' data-linktype='relative-path'>Title from yaml header a</a></p>" }
---
# resolve UID with fragment
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: a frag
    uid: a#frag
    ---
  docs/a-no-frag.md: |
    ---
    title: a
    uid: a
    ---
  docs/b.md: |
    Link to @a
    Link to @a#frag
outputs:
  docs/a.json:
  docs/a-no-frag.json:
  docs/b.json: |
    { "conceptual": "<p>Link to <a href='a-no-frag' data-linktype='relative-path'>a</a>Link to <a href='a-no-frag#frag' data-linktype='relative-path'>a</a></p>" }
---
# respects content type when loading xref specs
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestData
    uid: a
    children:
      - uid: child1
        xref: a
      - uid: child2
        xref: child1
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {
        "children": {
          "items":{
            "properties": {
              "uid": { "contentType": "uid" },
              "xref": { "contentType": "xref" }
            } 
          }
        }
      }
    }
outputs:
  docs/a.json: |
    {
       "uid":"a",
       "children":[
          {
             "uid":"child1",
             "xref": "a"
          },
          {
             "uid":"child2",
             "xref": "child1"
          }
       ]
    }
  .errors.log: |
    {"message_severity":"warning","code":"xref-not-found","message":"Cross reference not found: 'a'.","file":"docs/a.yml","line":5,"column":11}
  .xrefmap.json: |
    {
       "references":[
          { "uid":"child1" },
          { "uid":"child2" }
       ]
    }
---
# xrefmap fallback
repos:
  https://docs.com/xrefmapfallback.zh-cn#master:
    - files:
        docfx.yml: |
          xref:
          - 1.xrefmap.json
          - xrefmap.yml
        docs/a.md: |
          Link to @System.String?displayProperty=fullName
          Link to @System.String.1?displayProperty=fullName
  https://docs.com/xrefmapfallback#master:
    - files:
        docfx.yml: |
          xref:
          - 1.xrefmap.json
          - xrefmap.yml
        1.xrefmap.json: |
          {
            "references":[{
                "uid": "System.String",
                "name": "String",
                "fullName": "System.String",
                "href": "https://docs.microsoft.com/dotnet/api/system.string",
                "nameWithType": "System.String"
            }]
          }
        xrefmap.yml: |
          references:
            - uid: System.String.1
              name: String.1
              fullName: System.String.1
              href: https://docs.microsoft.com/dotnet/api/system.string.1
              nameWithType: System.String.1
outputs:
  docs/a.json: |
    { 
      "conceptual": 
      "<p>
          Link to <a href=\"https://docs.microsoft.com/dotnet/api/system.string\">System.String</a>
          Link to <a href=\"https://docs.microsoft.com/dotnet/api/system.string.1\">System.String.1</a>
      </p>"
    }
---
# xrefmap not found with fallback docset
repos:
  https://docs.com/xrefmapnotfound.zh-cn#master:
    - files:
        docfx.yml: |
          xref: 1.xrefmap.json
        docs/a.md: Link to @System.String?displayProperty=fullName
  https://docs.com/xrefmapnotfound#master:
    - files:
        docfx.yml: |
          xref: 1.xrefmap.json
outputs:
  .errors.log: |
    {"message_severity":"error","code":"file-not-found","message":"Invalid file link: '1.xrefmap.json'.","file":"docfx.yml","line":1,"column":7}
---
# xrefmap not found without fallback docset
inputs:
  docfx.yml: |
    xref: 1.xrefmap.json
  docs/a.md: Link to @System.String?displayProperty=fullName
outputs:
  .errors.log: |
    {"message_severity":"error","code":"file-not-found","message":"Invalid file link: '1.xrefmap.json'.","file":"docfx.yml","line":1,"column":7}
---
# Export all xrefProperties regardless of jschema properties
inputs:
  docfx.yml: |
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "test"
    }
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "xrefProperties": ["name"],
      "properties": { "uid": { "contentType": "uid" } }
    }
outputs:
  docs/a.json:
  .xrefmap.json: | 
    { "references": [{ "uid": "a", "name": "test" }] }
---
# SDP with non-root uid, which is the only one
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestData
    members:
    - uid: a
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "properties": {"members": {"items": {"properties": {"uid": {"contentType": "uid"}}}}}
    }
outputs:
  docs/a.json:
  .xrefmap.json: |
    { "references": [{ "uid": "a"}] }
---
# SDP with multiple-versioning uid of xref property conflicts
inputs:
  docfx.yml: |
    monikerRange:
      'docs/v1/**': '< netcore-2.0'
      'docs/v2/**': '>= netcore-2.0'
    routes:
      docs/v1/: docs/
      docs/v2/: docs/
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.1", "product_name": ".NET Core" }
      ]
    }
  docs/v1/a.yml: |
    ### YamlMime:TestData
    metadata:
      monikers: 
      - netcore-1.0
    uid: a
    name: name 1
    description: test 1
  docs/v1/b.yml: |
    ### YamlMime:TestData
    metadata:
      monikers: 
      - netcore-1.0
    uid: b
    name: name b
    description: test b
  docs/v2/a.yml: |
    ### YamlMime:TestData
    metadata:
      monikers:
      - netcore-2.0
    uid: a
    name: name 2
    description: test 2 <xref:b>
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "renderType": "component",
      "xrefProperties": ["name", "description"],
      "properties": { 
        "metadata": {
          "properties": {
            "monikers": { "type": "array" }
          }
        },
        "uid": { "contentType": "uid" },
        "description": { "contentType": "Markdown" }
      }
    }
outputs:
  136a42ac/docs/a.json:
  136a42ac/docs/b.json:
  4667fedf/docs/a.json:
  .errors.log: |
    {"message_severity":"info","code":"xref-property-conflict","message":"UID 'a' is defined with different names: 'name 1', 'name 2'."}
    {"message_severity":"info","code":"xref-property-conflict","message":"UID 'a' is defined with different descriptions: '<p>test 1</p>\n', '<p>test 2 <a href=\"b.json\">name b</a></p>\n'."}
---
# referencing multiple version, using uid with intersection for toc & SDP
inputs:
  docfx.yml: |
    outputType: pageJson
    monikerRange:
      'docs/v1/**': 'netcore-1.0'
      'docs/v2/**': 'netcore-2.0'
    routes:
      docs/v1/: docs/
      docs/v2/: docs/
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" }
      ]
    }
  docs/v1/a.yml: |
    ### YamlMime:TestData
    uid: a
    name: name 1.0
  docs/v1/TOC.yml: |
    items:
      - name: node
        uid: a
  docs/v1/b.yml: |
    ### YamlMime:TestPage
      xref: a
  docs/v2/a.yml: |
  docs/v2/a.yml: |
    ### YamlMime:TestData
    uid: a
    name: name 2.0
  docs/v2/TOC.yml: |
    items:
      - name: node
        uid: a
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "renderType": "component",
      "xrefProperties": ["name"],
      "properties": { 
        "metadata": {
          "properties": {
            "monikers": { "type": "array" }
          }
        },
        "uid": { "contentType": "uid" }
      }
    }
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "properties": { 
        "xref": { "contentType": "xref" }
      }
    }
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <xref uid="xref"/>

outputs:
  136a42ac/docs/a.json:
  136a42ac/docs/b.raw.page.json: |
    {"content": "<a href=\"a.json\" data-linktype=\"relative-path\"> name 1.0 </a>"}
  136a42ac/docs/b.mta.json:
  136a42ac/docs/toc.json: |
    {"items":[{"name":"node","href":"a.json","uid":"a","monikers":["netcore-1.0"]}]}
  4667fedf/docs/a.json:
  4667fedf/docs/toc.json: |
    {"items":[{"name":"node","href":"a.json","uid":"a","monikers":["netcore-2.0"]}]}
  .errors.log: |
    {"message_severity":"info","code":"xref-property-conflict","message":"UID 'a' is defined with different names: 'name 1.0', 'name 2.0'."}
---
# can cross version referencing single-version uid
inputs:
  docfx.yml: |
    outputType: pageJson
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" }
      ]
    }
  v1/a.yml: |
    ### YamlMime:TestData
    metadata:
      monikers: netcore-1.0
    uid: a
    name: name 1.0
  v2/b.yml: |
    ### YamlMime:TestPage
    metadata:
      monikers: netcore-2.0
    xref: a
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "renderType": "component",
      "xrefProperties": ["name"],
      "properties": { "uid": { "contentType": "uid" }}
    }
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "properties": { 
        "xref": { "contentType": "xref" }
      }
    }
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <xref uid="xref"/>

outputs:
  136a42ac/v1/a.json:
  4667fedf/v2/b.raw.page.json: |
    {"content": "<a href=\"../v1/a.json\" data-linktype=\"relative-path\"> name 1.0 </a>"}
  4667fedf/v2/b.mta.json:
---
# can cross version reference, using highest version
inputs:
  docfx.yml: |
    outputType: pageJson
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-3.0", "product_name": ".NET Core" }
      ]
    }
  v1/a.yml: |
    ### YamlMime:TestData
    metadata:
      monikers: netcore-1.0
    uid: a
    name: name 1.0
  v2/a.yml: |
    ### YamlMime:TestData
    metadata:
      monikers: netcore-2.0
    uid: a
    name: name 2.0
  v3/b.yml: |
    ### YamlMime:TestPage
    metadata:
      monikers: netcore-3.0
    xref: a
  _themes/ContentTemplate/schemas/TestData.schema.json: |
    {
      "renderType": "component",
      "xrefProperties": ["name"],
      "properties": { "uid": { "contentType": "uid" }}
    }
  _themes/ContentTemplate/schemas/TestPage.schema.json: |
    {
      "properties": { 
        "xref": { "contentType": "xref" }
      }
    }
  _themes/ContentTemplate/TestPage.html.primary.tmpl: |
    <xref uid="xref"/>

outputs:
  136a42ac/v1/a.json:
  4667fedf/v2/a.json:
  439a76d0/v3/b.raw.page.json: |
    {"content": "<a href=\"../v2/a.json\" data-linktype=\"relative-path\"> name 2.0 </a>"}
  439a76d0/v3/b.mta.json:
  .errors.log: |
    {"message_severity":"info","code":"xref-property-conflict","message":"UID 'a' is defined with different names: 'name 1.0', 'name 2.0'."}
---
# When href doesn't exist, should display the alt but not the text.
inputs:
  docfx.yml: |
    xref:
    - xrefmap.json
  xrefmap.json: |
    {
      "references":[{
          "uid": "SlackAPI.Block",
          "name": "Block",
          "fullName": "SlackAPI.Block"
      }]
    }
  docs/a.md: |
    str <xref href="SlackAPI.Block?alt=SlackAPI.Block&text=Block" data-throw-if-not-resolved="True"></xref>
outputs:
  docs/a.json: |
    {
      "conceptual": "<p>str <span class=\"xref\">SlackAPI.Block</span></p>"
    }
---
# support uid reference count validation 1
inputs:
  docfx.yml:
  docs/a.yml: |
    ### YamlMime:TestData1
    uid: a
  docs/b.yml: |
    ### YamlMime:TestData2
    ref_other: a
  docs/c.yml: |
    ### YamlMime:TestData2
    ref_other: a
  _themes/ContentTemplate/schemas/TestData1.schema.json: |
    {
      "properties": {
        "uid": { "contentType": "uid", "minReferenceCount": 1, "maxReferenceCount" : 3}
      }
    }
  _themes/ContentTemplate/schemas/TestData2.schema.json: |
    {
      "properties": {
        "ref_other": { "contentType": "xref"}
      }
    }
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
---
# support uid reference count validation 2
inputs:
  docfx.yml:
  docs/a.yml: |
    ### YamlMime:TestData1
    uid: a
  docs/b.yml: |
    ### YamlMime:TestData2
    ref_other: a
  docs/c.yml: |
    ### YamlMime:TestData2
    ref_other: a
  _themes/ContentTemplate/schemas/TestData1.schema.json: |
    {
      "properties": {
        "uid": { "contentType": "uid", "minReferenceCount": 3, "maxReferenceCount" : 1}
      }
    }
  _themes/ContentTemplate/schemas/TestData2.schema.json: |
    {
      "properties": {
        "ref_other": { "contentType": "xref"}
      }
    }
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
  .errors.log: |
    {"message_severity":"warning","code":"max-reference-count-invalid","message":"UID 'a' reference count should not be more than 1, but now is 2 ('docs/b.yml(2,12)', 'docs/c.yml(2,12)').","file":"docs/a.yml","line":2}
    {"message_severity":"warning","code":"min-reference-count-invalid","message":"UID 'a' reference count should be leaset 3, but now is 2 ('docs/b.yml(2,12)', 'docs/c.yml(2,12)').","file":"docs/a.yml","line":2}
---
# support SDP validation validateExternalXrefs
repos:
  https://docs.com/test-valdiate-external-xref:
    - files:
        docfx.yml: |
          name: docset_a
          xref:
          - 1.xrefmap.json
        1.xrefmap.json: |
          {
            "repository_url": "b_repository_url",
            "docset_name": "docset_b",
            "references":[
              {"uid": "c", "schemaType": "c-type"},
              {"uid": "d", "schemaType": "d-type"}
            ],
            "external_xrefs":[
              {"uid": "nofound",
                "docsetName": "docset_a",
                "schemaType": "a-type",
                "count": 1}
            ]
          }
        docs/a.yml: |
          ### YamlMime:TestData1
          uid: a
          ref_other: ["b", "c", "d"]
        docs/b.yml: |
          ### YamlMime:TestData1
          uid: b
          ref_other: ["c"]
        _themes/ContentTemplate/schemas/TestData1.schema.json: |
          {
            "properties": {
              "uid": { "contentType": "uid"},
              "ref_other": { "type": "array", "items": {"contentType": "xref", "validateExternalXrefs": true}}
            }
          }
outputs:
  docs/a.json:
  docs/b.json:
  .xrefmap.json: |
    {
      "docset_name": "docset_a",
      "repository_url": "https://docs.com/test-valdiate-external-xref",
      "external_xrefs":[
        {"uid": "c", 
          "docsetName": "docset_b",
          "schemaType": "c-type",
          "count": 2},
        {"uid": "d", 
          "docsetName": "docset_b",
          "schemaType": "d-type",
          "count": 1}
      ]
    }
  .errors.log: |
    {"message_severity":"warning","code":"uid-not-found","message":"UID 'nofound' with type 'a-type' not found, which is referenced by repository 'b_repository_url'.","line":0,"column":0}
---
# support SDP validation validateExternalXrefs, locale build
locale: zh-cn
repos:
  https://docs.com/test-valdiate-external-xref.zh-cn:
    - files:
        docfx.yml: |
          name: docset_a
          xref:
          - 1.xrefmap.json
        1.xrefmap.json: |
          {
            "repository_url": "b_repository_url",
            "docset_name": "docset_b",
            "references":[
              {"uid": "c", "schemaType": "c-type"},
              {"uid": "d", "schemaType": "d-type"}
            ],
            "external_xrefs":[
              {"uid": "nofound",
                "docsetName": "docset_a",
                "schemaType": "a-type",
                "count": 1}
            ]
          }
        docs/a.yml: |
          ### YamlMime:TestData1
          uid: a
          ref_other: ["b", "c", "d"]
        docs/b.yml: |
          ### YamlMime:TestData1
          uid: b
          ref_other: ["c"]
        _themes/ContentTemplate/schemas/TestData1.schema.json: |
          {
            "properties": {
              "uid": { "contentType": "uid"},
              "ref_other": { "type": "array", "items": {"contentType": "xref", "validateExternalXrefs": true}}
            }
          }
outputs:
  docs/a.json:
  docs/b.json:
  .xrefmap.json: |
    {
      "docset_name": "docset_a",
      "repository_url": "https://docs.com/test-valdiate-external-xref.zh-cn",
      "external_xrefs":[
        {"uid": "c", 
          "docsetName": "docset_b",
          "schemaType": "c-type",
          "count": 2},
        {"uid": "d", 
          "docsetName": "docset_b",
          "schemaType": "d-type",
          "count": 1}
      ]
    }
  .errors.log: |
    {"message_severity":"warning","code":"uid-not-found","message":"UID 'nofound' with type 'a-type' not found, which is referenced by repository 'b_repository_url'.","line":0,"column":0}
---
# multiple duplicated uids with the same MonkerList
inputs:
  docfx.json: |
    {"build": {"content": [{"files": ["**/*.yml"], "version": "latest"}], "monikerDefinition": "monikerDefinition.json"}}
  _themes/ContentTemplate/schemas/test.schema.json: |
    {
      "type": "object",
      "required": ["members", "uid"],
      "properties": {
        "uid": {"contentType": "uid","type": "string"},
        "members": {"items":{"properties": {"uid": {"contentType": "uid","type": "string"}}}}
      }
    }
  monikerDefinition.json: |
    {"monikers": [{ "moniker_name": "latest" }]}
  test.yml: |
    ### YamlMime:test
    uid: "a"
    members:
    - uid: "a"
outputs: 
  71ccb7a3/test.json:
  .errors.log: |
    {"message_severity":"warning","code":"duplicate-uid","message":"UID 'a' is duplicated in 'test.yml(2,6)', 'test.yml(4,8)'.","file":"test.yml","line":4,"column":8}
    {"message_severity":"warning","code":"duplicate-uid","message":"UID 'a' is duplicated in 'test.yml(2,6)', 'test.yml(4,8)'.","file":"test.yml","line":2,"column":6}
