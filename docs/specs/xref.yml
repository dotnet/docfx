---
# Unknown xrefs are output as is with a warning
inputs:
  docfx.yml:
  docs/a.md: Link to <xref:a>
outputs:
  docs/a.json: |
    { "content": "<p>Link to &lt;xref:a&gt;</p>" }
  build.log: |
    ["warning","uid-not-found","Cannot find uid 'a' using xref '<xref:a>'","docs/a.md"]
---
# Unknown xrefs using @ syntax are output as is with a informational message
inputs:
  docfx.yml:
  docs/a.md: Link to @a
outputs:
  docs/a.json: |
    { "content": "<p>Link to @a</p>" }
  build.log: |
    ["info","at-uid-not-found","Cannot find uid 'a' using xref '@a'","docs/a.md"]
---
# Restore xref map from configured url and use the map for resolving
inputs:
  docfx.yml: |
    xref: 
      - xrefmap.json
  docs/a.md: Link to @System.String
  xrefmap.json: |
    { 
      "references":[{
          "uid": "System.String",
          "name": "String",
          "fullName": "System.String",
          "href": "https://docs.microsoft.com/en-us/dotnet/api/system.string",
          "nameWithType": "System.String"
      }]
    }
outputs:
  docs/a.json: |
    { "content": "<p>Link to <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\">String</a></p>\n"}
---
# Define uid in conceptual, resolve it
inputs:
  docfx.yml:
  docs/a.md: |
    ---
    title: Title from yaml header a
    uid: a
    ---
  docs/b.md: |
    ---
    title: Title from yaml header b
    uid: b
    ---
  docs/c.md: Link to @a
outputs:
  docs/c.json: | 
    {"content":"<p>Link to <a href=\"/docs/a\">Title from yaml header a</a></p>\n"}
  docs/a.json:
  docs/b.json:
  xrefmap.json: | 
    {
      "references":[
        {
          "uid": "a",
          "href": "/docs/a",
          "name": "Title from yaml header a"
        },
        {
          "uid": "b",
          "href": "/docs/b",
          "name": "Title from yaml header b"
        }
      ]
    }
  build.manifest: |
    {
      "dependencies": {
          "docs/c.md": [
              {
                  "source": "docs/a.md",
                  "type": "uidInclusion"
              }
          ]
      }
    }
---
# Define uid in SDP
# Resolve xref with display property in conceptual document
# Resolve xref with non-existing display property, display name
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "test",
      "fullName": "test.test",
      "description": "a.description"
    }
  docs/c.md: |
    Link to <xref:a?displayProperty=fullName>
    Link to @a
    Link to <xref:a?displayProperty=notExisting>
outputs:
  docs/c.json: | 
    {"content":"<p>Link to <a href=\"/docs/a.json\">test.test</a>\nLink to <a href=\"/docs/a.json\">test</a>\nLink to <a href=\"/docs/a.json\">test</a></p>\n"}
  docs/a.json:
  xrefmap.json: | 
    {"references":[{"uid":"a","href":"/docs/a.json"}]}
  build.manifest: |
    {
      "dependencies": {
          "docs/c.md": [
              {
                  "source": "docs/a.json",
                  "type": "uidInclusion"
              }
          ]
      }
    }
---
# Define duplicate uid in conceptual and SDP 
# should output error and uid cannot be resolved
inputs:
  docfx.yml:
  docs/a.yml: |
    #YamlMime:TestData
    uid: a
  docs/b.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a"
    }
  docs/c.md: Link to @a
outputs:
  docs/a.json:
  docs/b.json: 
  docs/c.json: |
    {"content":"<p>Link to @a</p>\n"}
  build.log: |
    ["error","uid-conflict","Two or more documents have defined the same Uid 'a': /docs/a.json,/docs/b.json"]
    ["info","at-uid-not-found","Cannot find uid 'a' using xref '@a'","docs/c.md"]
  xrefmap.json: | 
    {"references":[]}
---
# Resolve xref in SDP
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "test",
      "fullName": "test.test",
      "description": "a.description"
    }
  docs/b.json: | 
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "xref": "a"
    }
outputs:
  docs/a.json:
  docs/b.json: | 
    {
      "content": {"xref": "/docs/a.json"}
    }
  xrefmap.json: | 
    {"references":[{"uid":"a","href":"/docs/a.json"}]}
  build.manifest: |
    {
      "dependencies": {
          "docs/b.json": [
              {
                  "source": "docs/a.json",
                  "type": "uidInclusion"
              }
          ]
      }
    }
---
# Define uid with error
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "name": "test",
      "fullName": "test.test",
      "description":
    }
  docs/b.json: | 
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "xref": "a"
    }
outputs:
  docs/b.json: | 
    { "content": {"!xref": null}}
  build.log: |
    ["error","json-syntax-error","Unexpected character encountered while parsing value: }.","docs/a.json","description",7]
  xrefmap.json: | 
    {"references":[]}
---
# Define uid in non-root object level, it will be ignored
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "data": 
      { 
        "uid": "b"
      }
    }
  docs/b.md: Link to @b
outputs:
  docs/a.json:
  docs/b.json:
  build.log: |
    ["info","at-uid-not-found","Cannot find uid 'b' using xref '@b'","docs/b.md"]
  xrefmap.json: | 
    {"references":[{"uid":"a","href":"/docs/a.json"}]}
---
# Xref property field which supports markdown content
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "summary": "    Hello `docfx`!"
    }
outputs:
  docs/a.json:
  xrefmap.json: | 
    {"references":[{"uid":"a","href":"/docs/a.json","summary":"<pre><code>Hello `docfx`!\n</code></pre>\n"}]}
---
# Xref property field which supports inline markdown content
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "inlineDescription": "    Hello `docfx`!"
    }
outputs:
  docs/a.json:
  xrefmap.json: | 
    {"references":[{"uid":"a","href":"/docs/a.json","inlineDescription":"Hello <code>docfx</code>!"}]}
---
# Xref property field with dependecy
inputs:
  docfx.yml:
  docs/a.json: |
    {
      "$schema": "https://raw.githubusercontent.com/dotnet/docfx/v3/schemas/TestData.json",
      "uid": "a",
      "inlineDescription": "[!INCLUDE[B](b.md)]"
    }
  docs/b.md: |
    Hello `docfx`!
outputs:
  docs/a.json:
  docs/b.json:
  xrefmap.json: | 
    {"references":[{"uid":"a","href":"/docs/a.json","inlineDescription":"Hello <code>docfx</code>!"}]}
