---
# Support building a subset of files
buildFiles:
- a.md
inputs:
  docfx.yml:
  a.md: https://a.com
  b.md: https://b.com
outputs:
  a.json: |
    { "conceptual": "<p><a href='https://a.com'>https://a.com</a></p>" }
  .publish.json: |
    { "files": [{ "source_path": "a.md" }] }
  .links.json: |
    { "links": [{ "target_url": "https://a.com" }] }
---
# Support building a subset of files for multiple docsets
buildFiles:
- a/a.md
- b/b.md
inputs:
  docsets.yml:
  a/docfx.yml:
  a/a.md:
  a/b.md:
  b/docfx.yml:
  b/a.md:
  b/b.md:
outputs:
  a/a.json:
  b/b.json:
  a/.publish.json: |
    { "files": [{ "source_path": "a.md" }] }
  b/.publish.json: |
    { "files": [{ "source_path": "b.md" }] }
---
# Ignore include files and invalid files
buildFiles:
- a.md
- c/b.md
inputs:
  docfx.yml: |
    files: c/**
  a.md:
  c/a.md:
outputs:
  .publish.json: |
    { "files": undefined }
---
# Building a simple markdown file in dry run mode does not touch xrefmap or tocmap
dryRunOnly: true
buildFiles:
- a.md
inputs:
  docfx.yml: |
    xref: xref.json
  a.md: simple markdown
  b.md: |
    ---
    uid: b
    ---
    this [!include[](b.md)] should cause circular reference
  xref.json: |
    { apparently a syntax error
  TOC.md: |
    # [circular reference](TOC.md)
outputs:
---
# Get canonical version for document without versioning does not touch url map
dryRunOnly: true
buildFiles:
- a.md
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "title": {
        "rules": [
          {
            "type": "TitleUnique",
            "code": "duplicate-titles",
            "severity": "SUGGESTION",
            "canonicalVersionOnly" : true,
            "exclusions": []
          }
        ]
      }
    }
  a.md: 'a'
  b.png.md:
  b.png:
outputs:
---
# Isolate bookmark validation state between builds
languageServer:
  - openFiles:
      docfx.yml:
      a.md: "[](b.md#anchor-missing)"
      b.md: "## anchor"
  - expectDiagnostics: 
      a.md: [{ "code": "bookmark-not-found" }]
  - editFiles:
      a.md: "[](b.md#anchor)"
  - expectDiagnostics: 
      a.md: []
  - editFiles:
      b.md: "## anchor-1"
  - expectDiagnostics: 
      a.md: [{ "code": "bookmark-not-found" }]
---
# Isolate metadata state between builds
languageServer:
  - openFiles:
      docfx.yml: |
        globalMetadata:
          title: {}
      a.md:
  - expectDiagnostics:
      docfx.yml: [{ "code": "violate-schema" }]
  - editFiles:
      docfx.yml:
      a.md: |
        ---
        title: {}
        ---
  - expectDiagnostics:
      a.md: [{ "code": "violate-schema" }]
---
