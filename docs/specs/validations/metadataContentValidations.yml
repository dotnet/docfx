---
# Check git merge conflict marker
inputs:
  docfx.yml:
  docs/a.md: |
    <<<<<<< HEAD
    foo
    =======
    bar
    >>>>>>> cb1abc6bd98cfc84317f8aa95a7662815417802d
outputs:
  docs/a.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"merge-conflict","message":"File contains merge conflict markers. NOTE: This Suggestion will become a Warning on 06/30/2020.","file":"docs/a.md","line":1,"column":1}
---
# Ignore git merge conflict marker inside code blocks
inputs:
  docfx.yml:
  docs/a.md: |
    a

    ```markdown
    <<<<<<< HEAD
    ...
    =======
    ...
    >>>>>>> 1d82c7efe18f86136247fb366df5030843199c19
    ```
outputs:
  docs/a.json:
---
# Remove object form metadata from publish.json
inputs:
  docfx.yml: |
    globalMetadata:
      key1: {}
    fileMetadata:
      key2:
        '**/*':
          - a: 1
  a.md:
outputs:
  a.json: |
    { "key1": {}, "key2": [{ "a": 1 }] }
  .publish.json: |
    {
      "files": [{ "url": "/a", "key1": undefined, "key2": undefined }]
    }
---
# Additional metadata validation from external JSON schema
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    globalMetadata:
      key1: []
    fileMetadata:
      key2:
        '**/*': XNAGameStudio
  schema.json: |
    {
      "properties":{
        "key1": { "type": "string" },
        "key2": { "type": "string", "enum": ["VS", "MSDN"] },
        "key3": { "type": "integer" }
      }
    }
  a.md: |
    ---
    key3: net462
    ---
outputs:
  a.json: |
    {
      "key1": [],
      "key2": "XNAGameStudio",
      "key3": "net462"
    }
  .errors.log: |
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'String' but got 'Array'.","file":"docfx.yml","line":3,"column":9}
    {"message_severity":"warning","code":"invalid-value","message":"Invalid value for 'key2': 'XNAGameStudio'.","file":"docfx.yml","line":6,"column":13}
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'Integer' but got 'String'.","file":"a.md","line":2,"column":7}
---
# Report missing-attribute at file level when yaml header missing
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    { "required": ["a"] }
  a.md:
  b.md: |
    ---
    ---
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'a'.","file":"a.md","line":1,"column":1}
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'a'.","file":"b.md","line":1,"column":1}
---
# Allow multiple metadata schema definitions
inputs:
  docfx.yml: |
    metadataSchema:
      - schema1.json
      - schema2.json
  schema1.json: |
    { "required": ["a"] }
  schema2.json: |
    { "properties": { "key": { "type": "string" } } }
  a.md: |
    ---
    key: []
    ---
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'a'.","file":"a.md","line":2,"column":1}
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'String' but got 'Array'.","file":"a.md","line":2,"column":6}
---
# Validate each metadata schema individually for multiple metadata schema definitions
inputs:
  docfx.yml: |
    metadataSchema:
      - schema1.json
      - schema2.json
  schema1.json: |
    { "required": ["a"], "properties": { "key": { "type": "string" } } }
  schema2.json: |
    { "required": ["b"], "properties": { "key": { "type": "array" } } }
  a.md: |
    ---
    key: 1
    ---
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'a'.","file":"a.md","line":2,"column":1}
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'String' but got 'Integer'.","file":"a.md","line":2,"column":6}
    {"message_severity":"warning","code":"missing-attribute","message":"Missing required attribute: 'b'.","file":"a.md","line":2,"column":1}
    {"message_severity":"warning","code":"unexpected-type","message":"Expected type 'Array' but got 'Integer'.","file":"a.md","line":2,"column":6}
---
# Json schema microsoft alias rule: Mute error, when no connection with Graph API
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: over123
    ---
outputs:
  a.json: |
    { "ms.author": "over123" }
---
# Json schema microsoft alias rule: The author is in the allow list
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":["amlstudiodocs", "over123"]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: over123
    ---
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json: |
    { "ms.author": "over123" }
---
# Json schema microsoft alias rule: The author is in the cache
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: over123
    ---
cache:
  msgraph-users.json: |
    { 
      "items": [{ "alias": "over123", "id": "1" }]
    }
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json: |
    { "ms.author": "over123" }
---
# Json schema microsoft alias rule: Missing author in the cache
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: over123
    ---
cache:
  msgraph-users.json: |
    { 
      "items": [{ "alias": "over123" }]
    }
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"ms-alias-invalid","message":"Invalid value for 'ms.author', 'over123' is not a valid Microsoft alias.","file":"a.md","line":2,"column":12}
---
# Json schema microsoft alias rule: The author is valid with graph call
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: yufeih
    ---
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json: |
    { "ms.author": "yufeih" }
---
# Json schema microsoft alias rule: The author is invalid with graph call
os: windows
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    microsoftGraphClientSecret: {MICROSOFT_GRAPH_CLIENT_SECRET}
  schema.json: |
    { 
      "properties":
      { 
        "ms.author":
        { 
          "microsoftAlias": 
          {
            "allowedDLs":[]
          }
        }
      } 
    }
  a.md: |
    ---
    ms.author: abc1234cba
    ---
environments:
  - MICROSOFT_GRAPH_CLIENT_SECRET
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"ms-alias-invalid","message":"Invalid value for 'ms.author', 'abc1234cba' is not a valid Microsoft alias.","file":"a.md","line":2,"column":12}
---
# Content validation end to end scenario 
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Missing",
            "message": "H1 is required. Use a single hash (#) followed by a space to create your top-level heading.",
            "exclusions": [ "toc", "includes", "hubpage", "landingpage" ],
            "severity": "WARNING",
            "code": "h1-missing"
          }
        ]
      }
    }
  a.md: |
    This is test.
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"h1-missing","message":"H1 is required. Use a single hash (#) followed by a space to create your top-level heading.","file":"a.md","line":0}
---
# Validate included markdown files within Yaml file
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Missing",
            "message": "H1 is required. Use a single hash (#) followed by a space to create your top-level heading.",
            "exclusions": [],
            "severity": "WARNING",
            "code": "h1-missing"
          }
        ]
      }
    }
  docs/a.yml: |
    #YamlMime:YamlDocument
    documentType: LandingData
    title: my title
    content: |
      [!include[](b.md)]
  docs/b.md: |
    This is test.
outputs:
  docs/a.json: |
    {
      "title": "my title"
    }
  docs/b.json:
  .errors.log: |
    {"message_severity":"warning","code":"h1-missing","message":"H1 is required. Use a single hash (#) followed by a space to create your top-level heading.","file":"docs/b.md","line":0}
---
# Skip content validation for yaml files
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Missing",
            "message": "H1 is required. Use a single hash (#) followed by a space to create your top-level heading.",
            "exclusions": [],
            "severity": "WARNING",
            "code": "h1-missing"
          }
        ]
      }
    }
  docs/a.yml: |
    #YamlMime:YamlDocument
    documentType: LandingData
    title: my title
    abstract:
      description: this is test.
outputs:
  docs/a.json: |
    {
      "title": "my title"
    }
---
# Json schema docset unique: the attribute value must be unique within docset
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    {
      "docsetUnique": [ "title", "description"]
    }
  a.md: |
    ---
    title: title1
    description: description1
    ---
  b.md: |
    ---
    description: description1
    title: title2
    ---
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"duplicate-attribute","message":"Attribute 'description' with value 'description1' is duplicated in 'a.md(3,14)', 'b.md(2,14)'.","file":"b.md","line":2,"column":14}
    {"message_severity":"suggestion","code":"duplicate-attribute","message":"Attribute 'description' with value 'description1' is duplicated in 'a.md(3,14)', 'b.md(2,14)'.","file":"a.md","line":3,"column":14}
---
# Json schema docset unique: null/empty values are not in-scope
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    {
      "docsetUnique": [ "title", "description"]
    }
  a.md: |
    ---
    title: null
    description:
    ---
  b.md: |
    ---
    description:
    title: null
    ---
outputs:
  a.json:
  b.json:
---
# Json schema docset unique: global metadata and file metadata
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    globalMetadata:
      description: abc
  schema.json: |
    {
      "docsetUnique": ["description"]
    }
  a.md: |
    ---
    description: abc
    ---
  b.md:
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"duplicate-attribute","message":"Attribute 'description' with value 'abc' is duplicated in 'a.md(2,14)', 'docfx.yml(3,16)'.","file":"a.md","line":2,"column":14}
    {"message_severity":"suggestion","code":"duplicate-attribute","message":"Attribute 'description' with value 'abc' is duplicated in 'a.md(2,14)', 'docfx.yml(3,16)'.","file":"docfx.yml","line":3,"column":16}
---
# Json schema length rule: the length of string must be in range of MinLength and MaxLength
inputs:
  docfx.yml: |
    metadataSchema: schema.json
  schema.json: |
    { 
      "properties":
      { 
        "description": {
          "type": [
            "string",
            "null"
          ],
          "minLength": 2,
          "maxLength": 10
        }
      }
    }
  a.md: |
    ---
    description: a
    ---
  b.md: |
    ---
    description: a long description
    ---
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"warning","code":"string-length-invalid","message":"String 'description' is too short: 1 characters. Length should be >= 2.","file":"a.md","line":2,"column":14}
    {"message_severity":"warning","code":"string-length-invalid","message":"String 'description' is too long: 18 characters. Length should be <= 10.","file":"b.md","line":2,"column":14}
---
# Json schema metadata rule: validate reference content
inputs:
  docfx.yml: |
    metadataSchema: rules.json
  rules.json: |
    {
      "required": ["title"],
      "properties": {
          "description": {
              "type": [
                "string",
                "null"
              ],
              "minLength": 2,
              "maxLength": 10
          },
          "title": {
              "type": [
                "string",
                "null"
              ],
              "minLength": 2,
              "maxLength": 10
          }
      },
      "rules": {
          "title": {
              "string-length-invalid": {
                  "contentTypes": ["conceptual", "include", "dotnet"],
                  "severity": "suggestion",
                  "code": "title-bad-length",
                  "pullRequestOnly": false
              },
              "missing-attribute": {
                  "contentTypes": ["conceptual", "include"],
                  "severity": "suggestion",
                  "code": "title-missing",
                  "additionalMessage": "Add a title string to show in search engine results."
              },
          },
          "description": {
              "string-length-invalid": {
                  "contentTypes": ["conceptual", "include"],
                  "severity": "suggestion",
                  "code": "description-bad-length",
                  "pullRequestOnly": true
              }
          }
      },
    }
  docs/a.yml: |
    #YamlMime:NetType
    name: TryCreateSectionNameMatcher
    metadata:
      author: dotnet-bot
      title: a
      description: a
  docs/b.yml: |
    #YamlMime:PowershellCmdlet
    name: TryCreateSectionNameMatcher
    metadata:
      author: dotnet-bot
      title: a
      description: a
  docs/TOC.md:
    # [Index](index.md)
  _themes/ContentTemplate/schemas/NetType.schema.json: |
    {
      "type": "object",
      "properties": {
          "breadcrumb_path": {"contentType": "Href"},
          "toc_rel": {"contentType": "Href"},
      }
    }
  _themes/ContentTemplate/schemas/PowershellCmdlet.schema.json: |
    {
      "type": "object",
      "properties": {
          "breadcrumb_path": {"contentType": "Href"},
          "toc_rel": {"contentType": "Href"},
      }
    }
  _themes/ContentTemplate/NetType.html.primary.tmpl: |
    <h2 id="{{heading}}"></h2>{{{description}}}
  _themes/ContentTemplate/PowershellCmdlet.html.primary.tmpl: |
    <h2 id="{{heading}}"></h2>{{{description}}}
outputs:
  docs/a.json:
  docs/b.json:
  docs/toc.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"title-bad-length","message":"String 'title' is too short: 1 characters. Length should be >= 2.","file":"docs/a.yml","line":5,"column":10}
---
# Content validation - H1 unique
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Unique",
            "message": "H1 '{0}' is duplicated with other articles: '{1}'",
            "code": "duplicate-h1",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # Title 1
  b.md: |
    # Title 1
  c.md: |
    # Title 2
outputs:
  a.json:
  b.json:
  c.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md'","file":"b.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md'","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# Content validation - H1 unique log limit
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Unique",
            "message": "H1 '{0}' is duplicated with other articles: '{1}'",
            "code": "duplicate-h1",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # Title 1
  b.md: |
    # Title 1
  c.md: |
    # Title 1
  d.md: |
    # Title 1
  e.md: |
    # Title 1
  f.md: |
    # Title 1
outputs:
  a.json:
  b.json:
  c.json:
  d.json:
  e.json:
  f.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md, c.md, d.md, e.md,...'","file":"b.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md, c.md, d.md, e.md,...'","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md, c.md, d.md, e.md,...'","file":"c.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md, c.md, d.md, e.md,...'","file":"d.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md, c.md, d.md, e.md,...'","file":"e.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'Title 1' is duplicated with other articles: 'a.md, b.md, c.md, d.md, e.md,...'","file":"f.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# Content validation - Publish Url - max level
# Validation is only worked in the conceptual page
inputs:
  docfx.yml: |
    monikerRange:
      'v1/**': '< netcore-2.0'
      'v2/**': '>= netcore-2.0'
    markdownValidationRules: rules.json
    basePath: /docs
    routes:
      v1/: folder/
      v2/: folder/
      folder0/: folder/
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
      ]
    }
  redirections.yml: |
    redirections:
      folder0/folder1/folder2/c.md: "docs/folder/folder1/c"
  rules.json: |
    {
      "publishurls": {
        "name": "PublishUrls",
        "description": "Validates publish urls",
        "aliases": null,
        "rules": [
          {
            "type": "MaxLevel",
            "message": "Article URL '{0}' is '{1}' levels deep. For SEO, URLs should be '{2}' levels or fewer.",
            "code": "path-too-deep",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc",
              "redirection"
            ],
            "excludedDocfxVersions": [
              "v2"
            ],
            "maxLevel": 4
          }
        ]
      }
    }
  folder0/folder1/folder2/index.md:  
  v1/folder1/folder2/a.md: |
    Moniker: netcore-1.0
  v2/folder1/folder2/a.md: |
    Moniker: netcore-2.0
  folder0/folder1/folder2/TOC.md:
  folder0/b.md: '![](folder1/folder2/image.png)'
  folder0/folder1/folder2/image.png:
outputs:
  docs/folder/folder1/folder2/index.json:
  docs/136a42ac/folder/folder1/folder2/a.json: 
  docs/4667fedf/folder/folder1/folder2/a.json: 
  docs/folder/folder1/folder2/toc.json:
  docs/folder/b.json: |
    {"conceptual": "<p><img src=\"folder1/folder2/image.png\" alt=\"\" data-linktype=\"relative-path\"></p>"}
  docs/folder/folder1/folder2/image.png:
  .errors.log: |
    {"message_severity":"suggestion","code":"path-too-deep","message":"Article URL '/docs/folder/folder1/folder2/' is '5' levels deep. For SEO, URLs should be '4' levels or fewer.","file":"folder0/folder1/folder2/index.md"}
    {"message_severity":"suggestion","code":"path-too-deep","message":"Article URL '/docs/folder/folder1/folder2/a' is '5' levels deep. For SEO, URLs should be '4' levels or fewer.","file":"v1/folder1/folder2/a.md"}
    {"message_severity":"suggestion","code":"path-too-deep","message":"Article URL '/docs/folder/folder1/folder2/a' is '5' levels deep. For SEO, URLs should be '4' levels or fewer.","file":"v2/folder1/folder2/a.md"}
---
# Content validation - Publish Url - segment uniqueness
# Validation is only worked in the conceptual page
inputs:
  docfx.yml: |
    monikerRange:
      'v1/**': '< netcore-2.0'
      'v2/**': '>= netcore-2.0'
    markdownValidationRules: rules.json
    basePath: /docs
    routes:
      v1/: folder/
      v2/: folder/
      folder0/: folder/
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
      ]
    }
  redirections.yml: |
    redirections:
      folder0/duplicatedword/duplicatedword/c.md: "docs/folder/folder1/c"
  rules.json: |
    {
      "publishurls": {
        "name": "PublishUrls",
        "description": "Validates publish urls",
        "aliases": null,
        "rules": [
          {
            "type": "SegmentUnique",
            "message": "Article URL '{0}' contains duplicated text '{1}'. For SEO, article URLs should not contain duplication.",
            "code": "path-duplication",
            "severity": "SUGGESTION",
            "exclusions": [
              "inclusion",
              "landingpage",
              "hubpage",
              "toc",
              "redirection"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  folder0/duplicatedword/duplicatedword/index.md: '![](./image.png)'
  v1/duplicatedword/folder1/DuplicatedWord.md: |
    Moniker: netcore-1.0
  v2/duplicatedword/folder1/DuplicatedWord.md: |
    Moniker: netcore-2.0
  folder0/duplicatedword/duplicatedword/TOC.md:
  folder0/duplicatedword/duplicatedword/image.png:
  folder0/duplicated-base-path/docs/a.md:
outputs:
  docs/folder/duplicatedword/duplicatedword/index.json:
  docs/136a42ac/folder/duplicatedword/folder1/duplicatedword.json: 
  docs/4667fedf/folder/duplicatedword/folder1/duplicatedword.json: 
  docs/folder/duplicatedword/duplicatedword/toc.json:
  docs/folder/duplicatedword/duplicatedword/image.png:
  docs/folder/duplicated-base-path/docs/a.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"path-duplication","message":"Article URL '/docs/folder/duplicatedword/duplicatedword/' contains duplicated text 'duplicatedword'. For SEO, article URLs should not contain duplication.","file":"folder0/duplicatedword/duplicatedword/index.md"}
    {"message_severity":"suggestion","code":"path-duplication","message":"Article URL '/docs/folder/duplicatedword/folder1/duplicatedword' contains duplicated text 'duplicatedword'. For SEO, article URLs should not contain duplication.","file":"v1/duplicatedword/folder1/DuplicatedWord.md"}
    {"message_severity":"suggestion","code":"path-duplication","message":"Article URL '/docs/folder/duplicatedword/folder1/duplicatedword' contains duplicated text 'duplicatedword'. For SEO, article URLs should not contain duplication.","file":"v2/duplicatedword/folder1/DuplicatedWord.md"}
    {"message_severity":"suggestion","code":"path-duplication","message":"Article URL '/docs/folder/duplicated-base-path/docs/a' contains duplicated text 'docs'. For SEO, article URLs should not contain duplication.","file":"folder0/duplicated-base-path/docs/a.md"}
---
# Validate user html
inputs:
  docfx.yml:
  a.md: |
    <H2 id="head" TITLE="HEAD"></H2>
    <BUTTON>click</BUTTON>
    <img height="docs"></img>
    <h1 height="docs"></h1>
    <div onclick="alert();" data-source="docs"></div>
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"info","code":"disallowed-html","message":"HTML tag 'H2' isn't allowed. Disallowed HTML poses a security risk and must be replaced with approved Docs Markdown syntax.","file":"a.md","line":1,"column":2}
    {"message_severity":"info","code":"disallowed-html","message":"HTML tag 'BUTTON' isn't allowed. Disallowed HTML poses a security risk and must be replaced with approved Docs Markdown syntax.","file":"a.md","line":2,"column":2}
    {"message_severity":"info","code":"disallowed-html","message":"HTML tag 'h1' isn't allowed. Disallowed HTML poses a security risk and must be replaced with approved Docs Markdown syntax.","file":"a.md","line":4,"column":2}
    {"message_severity":"info","code":"disallowed-html","message":"HTML attribute 'onclick' on tag 'div' isn't allowed. Disallowed HTML poses a security risk and must be replaced with approved Docs Markdown syntax.","file":"a.md","line":5,"column":6}
---
# Suppress disallowed HTML on archive content
inputs:
  docfx.yml: |
    globalMetadata:
      is_archived: true
  a.md: |
    <div><script></script></div>
outputs:
  a.json: |
    { "conceptual": "<div></div>" }
---
# Content Validation - Setex Headings
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude: b.md
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "SetexHeadings",
            "message": "Bad {0} format. Use hashes to create H1(#) or H2(##)",
            "code": "headings-with-underline",
            "severity": "SUGGESTION",
            "exclusions": [
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # Title 1 With Hashe
    ## Title 2 With Hashes

    Title 1
    =======

    Title 2
    -------

    Multiple Title2 Line 1
    Multiple Title2 Line 2
    -------

    # Title With Hash and underline
    ======

        Not A title 1
    ======

    Not A Title 2
        ------

    [!include[](b.md)]
  b.md: |
    Title 2
    ------
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"headings-with-underline","message":"Bad H1 'Title 1' format. Use hashes to create H1(#) or H2(##)","file":"a.md","line":5,"end_line":5,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"headings-with-underline","message":"Bad H2 'Title 2' format. Use hashes to create H1(#) or H2(##)","file":"a.md","line":8,"end_line":8,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"headings-with-underline","message":"Bad H2 'Multiple Title2 Line 1\nMultiple Title2 Line 2' format. Use hashes to create H1(#) or H2(##)","file":"a.md","line":12,"end_line":12,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"headings-with-underline","message":"Bad H2 'Title 2' format. Use hashes to create H1(#) or H2(##)","file":"b.md","line":2,"end_line":2,"column":1,"end_column":1}
---
# Content Validation - Skip Level
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude:
      - b.md
      - c.md
      - d.md
      - e.md
      - f.md
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "SkipLevel",
            "message": "Skipped heading: {0} followed by heading: {1}. Headings must increment with no skipped levels",
            "code": "heading-skipped",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # Title 1-1
    ### Title 3

    # Title 1-2
    [!include[](b.md)]

    [!include[](b.md)]
    ##### Title 5

    [!include[](b.md)]
    [!include[](c.md)]

    [!include[](d.md)]

    [!include[](e.md)]

    [!include[](f.md)]
    ## Title 2
  normal-1.md: |
    # Title 1-3
    ## Title 2
    ### Title 3
    # Title 1-4
  normal-2.md: |
    ### Title 3
    # Title 1-4
  b.md: |
    ### Title 3-b
  c.md: |
    ##### Title 5-c
  d.md: |
    ### Title 3-d
    ##### Title 5-d
  e.md: |
    [!include[](b.md)]
    [!include[](c.md)]

    [!include[](d.md)]
  f.md:
outputs:
  a.json:
  normal-1.json:
  normal-2.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: H1 'Title 1-1' followed by heading: H3 'Title 3'. Headings must increment with no skipped levels","file":"a.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: H1 'Title 1-2' followed by heading: H3 'Title 3-b'(a.md(5,1) -> b.md). Headings must increment with no skipped levels","file":"a.md","line":5,"end_line":5,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: H3 'Title 3-b'(a.md(7,1) -> b.md) followed by heading: H5 'Title 5'. Headings must increment with no skipped levels","file":"a.md","line":8,"end_line":8,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: H3 'Title 3-b'(a.md(10,1) -> b.md) followed by heading: H5 'Title 5-c'(a.md(11,1) -> c.md). Headings must increment with no skipped levels","file":"a.md","line":11,"end_line":11,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: H3 'Title 3-d'(a.md(13,1) -> d.md) followed by heading: H5 'Title 5-d'(a.md(13,1) -> d.md(2,1)). Headings must increment with no skipped levels","file":"d.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: H3 'Title 3-b'(a.md(15,1) -> e.md -> b.md) followed by heading: H5 'Title 5-c'(a.md(15,1) -> e.md(2,1) -> c.md). Headings must increment with no skipped levels","file":"e.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-skipped","message":"Skipped heading: H3 'Title 3-d'(a.md(15,1) -> e.md(4,1) -> d.md) followed by heading: H5 'Title 5-d'(a.md(15,1) -> e.md(4,1) -> d.md(2,1)). Headings must increment with no skipped levels","file":"d.md","line":2,"end_line":2,"column":1,"end_column":1}
---
# Content validation - h1 in inclusion
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude:
      - b.md
      - c.md
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "InclusionH1",
            "message": "H1 headings aren't allowed in included files. Every parent file should have an H1.",
            "code": "h1-in-include",
            "severity": "SUGGESTION",
            "exclusions": [
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # H1 -a
    [!include[](b.md)]
  b.md: |
    # H1 -b
    [!include[](c.md)]
  c.md: |
    # H1 -c
    ------
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-include","message":"H1 headings aren't allowed in included files. Every parent file should have an H1.","file":"b.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-include","message":"H1 headings aren't allowed in included files. Every parent file should have an H1.","file":"c.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# Content Validation - EmptyHeadings
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude: b.md
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "HeadingEmpty",
            "message": "Empty {0}. Headings must have content.",
            "code": "heading-empty",
            "severity": "SUGGESTION",
            "exclusions": [
              "landingpage",
              "hubpage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    Empty headings
    ## 
    ###
    #### <!-- comments -->
    #####            
    Ignore empty h1
    # 
    Headings below are not empty.
    ##### <img src="image.png" alt="xxx"/>
    ###### &nbsp;
    ###### &#160;
    ###### <a href="image.png"></a>
    ###### <a href="image.png"> &nbsp; </a>
    ###### <div><a href="image.png"> &nbsp; </a><div>
    ###### <span>abc</span>
    ###### <a href="image.png">abc</a>
    [!include[](b.md)]
  b.md: |
    ## 
  image.png:
outputs:
  a.json:
  image.png:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty H2. Headings must have content.","file":"a.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty H3. Headings must have content.","file":"a.md","line":3,"end_line":3,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty H4 '<!-- comments -->'. Headings must have content.","file":"a.md","line":4,"end_line":4,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty H5. Headings must have content.","file":"a.md","line":5,"end_line":5,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-empty","message":"Empty H2. Headings must have content.","file":"b.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# Content validation - no content between headings
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude:
      - b.md
      - c.md
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "NoContent",
            "message": "{0} contains no content. Add content or remove the unused heading.",
            "code": "heading-no-content",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # H1 -a
    ## H2-1 -a
          
                
    ## H2-2 -a
    some content
    ### H3 -a
    <!-- comments -->

    [!include[](b.md)]
    #### H4 -a

  b.md: |
    ### H3-1 -b
    ### H3-2 -b
    [!include[](c.md)]
    ### H3-3 -b
    [!include[](c.md)]
    ## H2 -b
    [!include[](c.md)]
    abc
  c.md: |
    some content
    ## H2 -c
    ------
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-no-content","message":"H2 'H2-1 -a' contains no content. Add content or remove the unused heading.","file":"a.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-no-content","message":"H3 'H3 -a' contains no content. Add content or remove the unused heading.","file":"a.md","line":7,"end_line":7,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-no-content","message":"H3 'H3-1 -b'(a.md(10,1) -> b.md) contains no content. Add content or remove the unused heading.","file":"b.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-no-content","message":"H2 'H2 -c'(a.md(10,1) -> b.md(5,1) -> c.md(2,1)) contains no content. Add content or remove the unused heading.","file":"c.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-no-content","message":"H4 'H4 -a' contains no content. Add content or remove the unused heading.","file":"a.md","line":11, "end_line":11,"column":1,"end_column":1}
---
# Content validation - indented lines within triple-colon syntax is OK for code-block-indented
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "codeBlocks": {
        "name": "CodeBlocks",
        "description": "Validates code block content",
        "aliases": null,
        "rules": [
          {
            "type": "CodeBlockIndented",
            "message": "Indented code blocks aren't allowed. Use a Markdown code block surrounded by triple colons.",
            "code": "code-block-indented",
            "severity": "SUGGESTION",
            "exclusions": [
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    :::image type="complex" source="image.png" alt-text="triple-colon test":::
         intented line
    :::image-end:::

         intented line2
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","log_item_type":"user","code":"file-not-found","message":"Invalid file link: 'image.png'.","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"code-block-indented","message":"Indented code blocks aren't allowed. Use a Markdown code block surrounded by triple colons.","file":"a.md","line":5,"end_line":5,"column":1,"end_column":1}
---
#Content validation - h1-not-first in docs zone
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1NotFirst",
            "message": "Markdown content is not allowed before {0}.",
            "code": "h1-not-first",
            "severity": "WARNING",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    ::: zone target="docs"
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end

    ::: zone target = "chromeless"
    # Copy data to Azure Data Box
    ::: zone-end
  b.md: |
    ::: zone target="chromeless"
    # Copy data to Azure Data Box
    ::: zone-end

    ::: zone target = "docs"
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end
  c.md: |
    ::: zone target="chromeless"
    # Copy data to Azure Data Box
    ::: zone-end

    This is paragraph

    ::: zone target = "docs"
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end
  d.md: |
    ## This is H2

    ::: zone target = "docs"
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end

    ::: zone target = "chromeless"
    # Copy data to Azure Data Box
    ::: zone-end
  e.md: |
    # This is H1

    ::: zone target = "docs"
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end

    ::: zone target = "chromeless"
    # Copy data to Azure Data Box
    ::: zone-end
  f.md: |
    ::: zone target = "docs"
    This is paragraph
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end
  g.md: |
    ::: zone target = "chromeless"
    This is paragraph
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end
  h.md: |
    ::: image type="complex" source="../media/buttonElementWithRenderers.png" alt-text="test":::
        Indented line withon triple-colon syntax
    ::: image-end:::
  i.md: |
    ::: zone
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end
  j.md: |
    ::: zone pivot = "test"
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end
outputs:
  a.json:
  b.json:
  c.json:
  d.json:
  e.json:
  f.json:
  g.json:
  h.json:
  j.json:
  .errors.log: |
    {"message_severity":"error","log_item_type":"user","code":"invalid-zone","message":"Either target or privot must be specified.","file":"i.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"warning","log_item_type":"user","code":"h1-not-first","message":"Markdown content is not allowed before H1 'Tutorial: Copy data to Azure Data Box via SMB'.","file":"i.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"warning","log_item_type":"user","code":"h1-not-first","message":"Markdown content is not allowed before H1 'Tutorial: Copy data to Azure Data Box via SMB'.","file":"c.md","line":8,"end_line":8,"column":1,"end_column":1}
    {"message_severity":"warning","log_item_type":"user","code":"h1-not-first","message":"Markdown content is not allowed before H1 'Tutorial: Copy data to Azure Data Box via SMB'.","file":"d.md","line":4,"end_line":4,"column":1,"end_column":1}
    {"message_severity":"warning","log_item_type":"user","code":"file-not-found","message":"Invalid file link: '../media/buttonElementWithRenderers.png'.","file":"h.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"warning","log_item_type":"user","code":"h1-not-first","message":"Markdown content is not allowed before H1 'Tutorial: Copy data to Azure Data Box via SMB'.","file":"f.md","line":3,"end_line":3,"column":1,"end_column":1}
---
# Content validation - comments shouldn't trigger H1 not first
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1NotFirst",
            "message": "Markdown content is not allowed before {0}.",
            "code": "h1-not-first",
            "severity": "WARNING",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    [//]: # (START>DO_NOT_EDIT)
    [//]: # (IMPORTANT:Do not edit any of the content between here and the END>DO_NOT_EDIT.)
    [//]: # (Any modifications should be made in the .xml files in the ModernDev repo.)
    # AppSourceCop Rule AS0024
    [//]: # (IMPORTANT: END>DO_NOT_EDIT)
    <!-- comment -->
    # h1
  b.md: |
    See this markdown
    # AppSourceCop
  c.md: |
    <!-- comment -->
    # h1
  d.md: |
    <!-- comment 
    -->
    # h1
  e.md: |
    <!-- comment 
    --><div>text</text>
    # h1
outputs:
  a.json:
  b.json:
  c.json:
  d.json:
  e.json:
  .errors.log: |
    {"message_severity":"warning","log_item_type":"user","code":"h1-not-first","message":"Markdown content is not allowed before H1 'AppSourceCop'.","file":"b.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"warning","log_item_type":"user","code":"h1-not-first","message":"Markdown content is not allowed before H1 'h1'.","file":"e.md","line":3,"end_line":3,"column":1,"end_column":1}
---
# Content validation - inclusion case, h1 node is in the included file
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1NotFirst",
            "message": "Markdown content is not allowed before {0}.",
            "code": "h1-not-first",
            "severity": "WARNING",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    # h1
  b.md: |
    ## h2
    [!include[](a.md)]
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"warning","log_item_type":"user","code":"h1-not-first","message":"Markdown content is not allowed before H1 'h1'(b.md(2,1) -> a.md).","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# Content validation - too many parameters in error message
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "rules": [
          {
            "type": "H1Empty",
            "message": "H1 is required. Add content to your top-level heading. {0} {1}",
            "code": "h1-empty",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ]
          }
        ]
      }
    }
  a.md: |
    # <!-- comments -->
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-empty","message":"H1 is required. Add content to your top-level heading. {0} {1} | ERROR: message format is invalid, e.g., too many parameters {n}.","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# Content validation - too less parameters in error message
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "rules": [
          {
            "type": "H1InZone",
            "message": "H1 is not allowed in zone '{0}' sections. Each article should have one and only one H1.",
            "code": "h1-in-zone",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ]
          }
        ]
      }
    }
  a.md: |
    ::: zone target = "pdf"
    # Copy data to Azure Data Box
    ::: zone-end
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-zone","message":"H1 is not allowed in zone 'pdf' sections. Each article should have one and only one H1.","file":"a.md","line":2,"end_line":2,"column":1,"end_column":1}
---
#Content validation - h1-missing in docs zone
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Missing",
            "message": "H1 is required. Use a single hash (#) followed by a space to create your top-level heading",
            "code": "h1-missing",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    ::: zone target="docs"
    # H1 heading text\r\n
    ::: zone-end
  b.md: |
    ::: zone target="docs"
    #H1heading
    ::: zone-end
  c.md: |
    ::: zone target="docs"
    ::: zone-end
  d.md: |
    ::: zone
    # H1heading
    ::: zone-end
  e.md: |
    ::: zone target="chromeless"
    # H1 heading text
    ::: zone-end
outputs:
  a.json:
  b.json:
  c.json:
  e.json:
  .errors.log: |
    {"message_severity":"error","log_item_type":"user","code":"invalid-zone","message":"Either target or privot must be specified.","file":"d.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-missing","message":"H1 is required. Use a single hash (#) followed by a space to create your top-level heading","file":"b.md","line":0,"end_line":0,"column":0,"end_column":0}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-missing","message":"H1 is required. Use a single hash (#) followed by a space to create your top-level heading","file":"c.md","line":0,"end_line":0,"column":0,"end_column":0}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-missing","message":"H1 is required. Use a single hash (#) followed by a space to create your top-level heading","file":"e.md","line":0,"end_line":0,"column":0,"end_column":0}
---
#Content validation - h1 in zone
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1InZone",
            "message": "H1 in zone '{0}'. H1 is only allowed in Docs zones.",
            "code": "h1-in-zone",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    ::: zone target= "docs"
    # Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end

    ::: zone target = "chromeless"
    # Copy data to Azure Data Box
    ::: zone-end

    ::: zone target = "pdf"
    # Copy data to Azure Data Box
    ::: zone-end

    ::: zone pivot = "test"
    # Copy data to Azure Data Box
    ::: zone-end

    ::: zone target = "docs"
    #Tutorial: Copy data to Azure Data Box via SMB
    ::: zone-end

    ::: zone target = "chromeless"
    #Copy data to Azure Data Box
    ::: zone-end

    ::: zone target = "chromeless"
    ::: zone-end

    ::: zone target = "chromeless"
    ## This is h2
    ::: zone-end

    ::: zone target = "chromeless"
    # This is h1
    #This is h1
    ::: zone-end
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-zone","message":"H1 in zone 'chromeless'. H1 is only allowed in Docs zones.","file":"a.md","line":6,"end_line":6,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-zone","message":"H1 in zone 'pdf'. H1 is only allowed in Docs zones.","file":"a.md","line":10,"end_line":10,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-zone","message":"H1 in zone 'pivot'. H1 is only allowed in Docs zones.","file":"a.md","line":14,"end_line":14,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-zone","message":"H1 in zone 'chromeless'. H1 is only allowed in Docs zones.","file":"a.md","line":33,"end_line":33,"column":1,"end_column":1}
---
#Content validation - multiple-h1s in docs zone
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Multiples",
            "message": "Multiple H1s are not allowed. You can only have one top-level heading",
            "code": "multiple-h1s",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    a.md: |
    ::: zone target="docs"
    # H1 heading text
    ::: zone-end
  b.md: |
    ::: zone target="docs"
    # H1 heading text
    #H1 heading text dup
    ::: zone-end
  c.md: |
    ::: zone target="chromeless"
    # H1 heading text
    #H1 heading dup
    ::: zone-end
  d.md: |
    ::: zone pivot = "test"
    # H1 Heading text
    # H1 heading text 2
    ::: zone-end
  e.md: |
    ::: zone target="docs"
    # H1 heading text
    # H1 heading dup
    ::: zone-end
  f.md: |
    ::: zone target="docs"
    # H1 heading text
    ::: zone-end
    ::: zone target="chromeless"
    # H1 heading text
    ::: zone-end
  g.md: |
    # H1 heading
    ::: zone target="docs"
    # H1 heading text
    ::: zone-end
  h.md: |
    #H1 heading
    ::: zone target="docs"
    # H1 heading text
    ::: zone-end
  i.md: |
    # H1 heading
    ::: zone target="chromeless"
    # H1 heading text
    ::: zone-end
  j.md: |
    # H1 heading
    ::: zone pivot="test"
    # H1 heading text
    ::: zone-end
outputs:
  a.json:
  b.json:
  c.json:
  d.json:
  e.json:
  f.json:
  g.json:
  h.json:
  i.json:
  j.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"multiple-h1s","message":"Multiple H1s are not allowed. You can only have one top-level heading","file":"g.md","line":3,"end_line":3,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"multiple-h1s","message":"Multiple H1s are not allowed. You can only have one top-level heading","file":"e.md","line":3,"end_line":3,"column":1,"end_column":1}
---
# Canonial Version Only H1 Unique Check
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    monikerRange:
      'docs/v1/**': '>= netcore-1.0 <= netcore-1.2'
    routes:
      docs/v1/: docs/
    monikerDefinition: monikerDefinition.json
  docs/v1/a.md: |
    ::: moniker range="<= netcore-1.1"
    # h1
    ::: moniker-end
    ::: moniker range="<= netcore-1.2"
    # h1
    ::: moniker-end
  docs/v1/b.md: |
    # h1
    ::: moniker range="<= netcore-1.2"
    # h1
    ::: moniker-end
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.2", "product_name": ".NET Core" },
      ]
    }
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Unique",
            "message": "H1 '{0}' is duplicated with other articles: '{1}'",
            "code": "duplicate-h1",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ],
            "canonicalVersionOnly": true
          }
        ]
      }
    }
outputs:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'h1' is duplicated with other articles: 'docs/v1/a.md(5,1), docs/v1/b.md, docs/v1/b.md(3,1)'","file":"docs/v1/a.md","line":5,"end_line":5,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'h1' is duplicated with other articles: 'docs/v1/a.md(5,1), docs/v1/b.md, docs/v1/b.md(3,1)'","file":"docs/v1/b.md","line":3,"end_line":3,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'h1' is duplicated with other articles: 'docs/v1/a.md(5,1), docs/v1/b.md, docs/v1/b.md(3,1)'","file":"docs/v1/b.md","line":1,"end_line":1,"column":1,"end_column":1}
  2420f88b/docs/a.json:
  2420f88b/docs/b.json:
---
# Canonial Version Only H1 Unique Check with Inclusion
inputs:
  docfx.yml: |
    exclude:
      - docs/v1/token1.md
      - docs/v1/token2.md
    markdownValidationRules: rules.json
    monikerRange:
      'docs/v1/**': '>= netcore-1.0 <= netcore-1.2'
    routes:
      docs/v1/: docs/
    monikerDefinition: monikerDefinition.json
  docs/v1/a.md: |
    [!include[](token2.md)]
  docs/v1/b.md: |
    # h1
    ::: moniker range="<= netcore-1.2"
    [!include[](token1.md)]
    ::: moniker-end
    ::: moniker range="<= netcore-1.1"
    [!include[](token1.md)]
    ::: moniker-end
  docs/v1/token1.md: |
    # h1
  docs/v1/token2.md: |
    ::: moniker range="<= netcore-1.1"
    # h1
    ::: moniker-end
    ::: moniker range="<= netcore-1.2"
    # h1
    ::: moniker-end
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.2", "product_name": ".NET Core" },
      ]
    }
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Unique",
            "message": "H1 '{0}' is duplicated with other articles: '{1}'",
            "code": "duplicate-h1",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ],
            "canonicalVersionOnly": true
          }
        ]
      }
    }
outputs:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'h1' is duplicated with other articles: 'docs/v1/b.md, docs/v1/token1.md, docs/v1/token2.md(5,1)'","file":"docs/v1/token1.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'h1' is duplicated with other articles: 'docs/v1/b.md, docs/v1/token1.md, docs/v1/token2.md(5,1)'","file":"docs/v1/b.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'h1' is duplicated with other articles: 'docs/v1/b.md, docs/v1/token1.md, docs/v1/token2.md(5,1)'","file":"docs/v1/token2.md","line":5,"end_line":5,"column":1,"end_column":1}
  2420f88b/docs/a.json:
  2420f88b/docs/b.json:
---
# Canonial Version Only H1 Unique Check with Inclusion
# multiple-versioning file cases
# invalid moniker zone is treated as non-versioning
inputs:
  docfx.yml: |
    exclude:
      - docs/v1/token1.md
      - docs/v1/token2.md
      - docs/v1/token3.md
    markdownValidationRules: rules.json
    monikerRange:
      'docs/v1/**': '< netcore-1.2'
      'docs/v2/**': '>= netcore-1.2'
    routes:
      docs/v1/: docs/
      docs/v2/: docs/
    monikerDefinition: monikerDefinition.json
  docs/v1/a.md: |
    [!include[](token2.md)]
  docs/v1/b.md: |
    # h1
    ::: moniker range="<= netcore-1.2"
    [!include[](token1.md)]
    ::: moniker-end
    ::: moniker range="< netcore-1.1"
    [!include[](token1.md)]
    ::: moniker-end
  docs/v2/b.md: |
    # h1
    ::: moniker range="<= netcore-2.0"
    [!include[](../v1/token1.md)]
    ::: moniker-end
    ::: moniker range="<= netcore-1.2"
    [!include[](../v1/token1.md)]
    ::: moniker-end
    [!include[](../v1/token3.md)]
  docs/v1/token1.md: |
    # h1
  docs/v1/token2.md: |
    ::: moniker range="< netcore-1.1"
    # h1
    ::: moniker-end
    ::: moniker range="<= netcore-1.2"
    # h1
    ::: moniker-end
  docs/v1/token3.md: |
    ::: moniker range="< netcore-1.1"
    # h1
    ::: moniker-end
    ::: moniker range="<= netcore-1.2"
    # h1
    ::: moniker-end
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.2", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
      ]
    }
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "H1Unique",
            "message": "H1 '{0}' is duplicated with other articles: '{1}'",
            "code": "duplicate-h1",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ],
            "canonicalVersionOnly": true
          }
        ]
      }
    }
outputs:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'h1' is duplicated with other articles: 'docs/v1/token1.md, docs/v1/token2.md(5,1), docs/v2/b.md'","file":"docs/v1/token1.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'h1' is duplicated with other articles: 'docs/v1/token1.md, docs/v1/token2.md(5,1), docs/v2/b.md'","file":"docs/v2/b.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-h1","message":"H1 'h1' is duplicated with other articles: 'docs/v1/token1.md, docs/v1/token2.md(5,1), docs/v2/b.md'","file":"docs/v1/token2.md","line":5,"end_line":5,"column":1,"end_column":1}
    {"message_severity":"warning","log_item_type":"user","code":"moniker-zone-empty","message":"No intersection between zone and file level monikers. The result of zone level range string '< netcore-1.1' is 'netcore-1.0', while file level monikers is 'netcore-1.2', 'netcore-2.0'.","file":"docs/v1/token3.md","line":1,"end_line":1,"column":1,"end_column":1}
  9d4e15fd/docs/a.json:
  9d4e15fd/docs/b.json:
  976da3a9/docs/b.json:
---
# Canonial Version Only Metadata Validation
inputs:
  docfx.yml: |
    metadataSchema: schema.json
    monikerRange:
      'docs/v1/**': '< netcore-1.2'
      'docs/v2/**': '>= netcore-1.2'
    routes:
      docs/v1/: docs/
      docs/v2/: docs/
    monikerDefinition: monikerDefinition.json
    globalMetadata:
      layout: conceptual
  docs/v1/a.md: |
    ---
    title: t
    description: a
    ---
  docs/v1/b.md: |
    ---
    title: t
    description: b
    ---
  docs/v2/b.md: |
    ---
    title: t
    description: c
    ---
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.2", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
      ]
    }
  schema.json: |
    {
      "docsetUnique": [ "title"],
      "properties": {
          "description": {
              "type": [
                "string",
                "null"
              ],
              "minLength": 2,
              "maxLength": 10
          },
          "title": {
              "type": [
                "string",
                "null"
              ],
              "minLength": 2,
              "maxLength": 10
          }
      },
      "rules": {
          "title": {
              "duplicate-attribute": {
                  "severity": "suggestion",
                  "code": "duplicate-title-within-docset",
                  "canonicalVersionOnly": true,
                  "additionalMessage": "Title must be unique within a docset."
                },
                "string-length-invalid": {
                    "severity": "suggestion",
                    "code": "description-bad-length"
                  }
          },
          "description": {
              "string-length-invalid": {
                  "severity": "suggestion",
                  "code": "description-bad-length",
                  "canonicalVersionOnly": true
              }
          }
      },
    }
outputs:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"description-bad-length","message":"String 'title' is too short: 1 characters. Length should be >= 2.","file":"docs/v1/a.md","line":2,"end_line":2,"column":8,"end_column":9}
    {"message_severity":"suggestion","log_item_type":"user","code":"description-bad-length","message":"String 'title' is too short: 1 characters. Length should be >= 2.","file":"docs/v1/b.md","line":2,"end_line":2,"column":8,"end_column":9}
    {"message_severity":"suggestion","log_item_type":"user","code":"description-bad-length","message":"String 'title' is too short: 1 characters. Length should be >= 2.","file":"docs/v2/b.md","line":2,"end_line":2,"column":8,"end_column":9}
    {"message_severity":"suggestion","log_item_type":"user","code":"description-bad-length","message":"String 'description' is too short: 1 characters. Length should be >= 2.","file":"docs/v1/a.md","line":3,"end_line":3,"column":14,"end_column":15}
    {"message_severity":"suggestion","log_item_type":"user","code":"description-bad-length","message":"String 'description' is too short: 1 characters. Length should be >= 2.","file":"docs/v2/b.md","line":3,"end_line":3,"column":14,"end_column":15}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-title-within-docset","message":"Attribute 'title' with value 't' is duplicated in 'docs/v1/a.md(2,8)', 'docs/v2/b.md(2,8)'. Title must be unique within a docset.","file":"docs/v2/b.md","line":2,"end_line":2,"column":8,"end_column":9}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-title-within-docset","message":"Attribute 'title' with value 't' is duplicated in 'docs/v1/a.md(2,8)', 'docs/v2/b.md(2,8)'. Title must be unique within a docset.","file":"docs/v1/a.md","line":2,"end_line":2,"column":8,"end_column":9}
  9d4e15fd/docs/a.json:
  9d4e15fd/docs/b.json:
  976da3a9/docs/b.json:
---
# title unique check
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    fileMetadata:
      titleSuffix:
        'a/*.md': Product A
        'b/*.md': Product B
  rules.json: |
    {
      "title": {
        "rules": [
          {
            "type": "TitleUnique",
            "message": "Title '{0}' is duplicated with other articles: '{1}'",
            "code": "duplicate-titles",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a/a.md: |
    ---
    title: title 1
    ---
  a/b.md: |
    ---
    title: title 1
    ---
  a/c.md: |
    # title 1
  a/d.md: |
    ---
    title: title 2
    ---
    # title 1
  b/a.md: |
    ---
    title: title 1
    ---
  c.md: |
    ---
    title: title 1
    ---
  d.md: |
    # title 1
outputs:
  a/a.json:
  a/b.json:
  a/c.json:
  a/d.json:
  b/a.json:
  c.json:
  d.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-titles","message":"Title 'title 1 - Product A' is duplicated with other articles: 'a/a.md(2,8), a/b.md(2,8), a/c.md'","file":"a/a.md","line":2,"end_line":2,"column":8,"end_column":15}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-titles","message":"Title 'title 1 - Product A' is duplicated with other articles: 'a/a.md(2,8), a/b.md(2,8), a/c.md'","file":"a/b.md","line":2,"end_line":2,"column":8,"end_column":15}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-titles","message":"Title 'title 1 - Product A' is duplicated with other articles: 'a/a.md(2,8), a/b.md(2,8), a/c.md'","file":"a/c.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-titles","message":"Title 'title 1' is duplicated with other articles: 'c.md(2,8), d.md'","file":"c.md","line":2,"end_line":2,"column":8,"end_column":15}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-titles","message":"Title 'title 1' is duplicated with other articles: 'c.md(2,8), d.md'","file":"d.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# title unique check - log limit
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "title": {
        "rules": [
          {
            "type": "TitleUnique",
            "message": "Title '{0}' is duplicated with other articles: '{1}'",
            "code": "duplicate-titles",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    ---
    title: title 1
    ---
  b.md: |
    ---
    title: title 1
    ---
  c.md: |
    ---
    title: title 1
    ---
  d.md: |
    ---
    title: title 1
    ---
  e.md: |
    ---
    title: title 1
    ---
  f.md: |
    ---
    title: title 1
    ---
outputs:
  a.json:
  b.json:
  c.json:
  d.json:
  e.json:
  f.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"duplicate-titles","message":"Title 'title 1' is duplicated with other articles: 'a.md(2,8), b.md(2,8), c.md(2,8), d.md(2,8), e.md(2,8),...'","file":"b.md","line":2,"end_line":2,"column":8,"end_column":15,"log_item_type":"user"}
    {"message_severity":"suggestion","code":"duplicate-titles","message":"Title 'title 1' is duplicated with other articles: 'a.md(2,8), b.md(2,8), c.md(2,8), d.md(2,8), e.md(2,8),...'","file":"a.md","line":2,"end_line":2,"column":8,"end_column":15,"log_item_type":"user"}
    {"message_severity":"suggestion","code":"duplicate-titles","message":"Title 'title 1' is duplicated with other articles: 'a.md(2,8), b.md(2,8), c.md(2,8), d.md(2,8), e.md(2,8),...'","file":"e.md","line":2,"end_line":2,"column":8,"end_column":15,"log_item_type":"user"}
    {"message_severity":"suggestion","code":"duplicate-titles","message":"Title 'title 1' is duplicated with other articles: 'a.md(2,8), b.md(2,8), c.md(2,8), d.md(2,8), e.md(2,8),...'","file":"d.md","line":2,"end_line":2,"column":8,"end_column":15,"log_item_type":"user"}
    {"message_severity":"suggestion","code":"duplicate-titles","message":"Title 'title 1' is duplicated with other articles: 'a.md(2,8), b.md(2,8), c.md(2,8), d.md(2,8), e.md(2,8),...'","file":"c.md","line":2,"end_line":2,"column":8,"end_column":15,"log_item_type":"user"}
    {"message_severity":"suggestion","code":"duplicate-titles","message":"Title 'title 1' is duplicated with other articles: 'a.md(2,8), b.md(2,8), c.md(2,8), d.md(2,8), e.md(2,8),...'","file":"f.md","line":2,"end_line":2,"column":8,"end_column":15,"log_item_type":"user"}
---
# Canonial Version title unique check
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    globalMetadata:
      titleSuffix: Product
    monikerRange:
      'docs/v1/**': '< netcore-1.2'
      'docs/v2/**': '>= netcore-1.2'
    routes:
      docs/v1/: docs/
      docs/v2/: docs/
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
        { "moniker_name": "netcore-1.2", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
      ]
    }
  rules.json: |
    {
      "title": {
        "rules": [
          {
            "type": "TitleUnique",
            "message": "Title '{0}' is duplicated with other articles: '{1}'",
            "code": "duplicate-titles",
            "severity": "SUGGESTION",
            "canonicalVersionOnly" : true,
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  docs/v1/a.md: |
    ---
    title: title 1
    ---
  docs/v1/b.md: |
    ---
    title: title 1
    ---
  docs/v2/b.md: |
    ---
    title: title 1
    ---
  docs/v2/c.md: |
    ---
    title: title 1
    ---
outputs:
  976da3a9/docs/b.json:
  976da3a9/docs/c.json:
  9d4e15fd/docs/a.json:
  9d4e15fd/docs/b.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-titles","message":"Title 'title 1 - Product' is duplicated with other articles: 'docs/v1/a.md(2,8), docs/v2/b.md(2,8), docs/v2/c.md(2,8)'","file":"docs/v2/b.md","line":2,"end_line":2,"column":8,"end_column":15}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-titles","message":"Title 'title 1 - Product' is duplicated with other articles: 'docs/v1/a.md(2,8), docs/v2/b.md(2,8), docs/v2/c.md(2,8)'","file":"docs/v2/c.md","line":2,"end_line":2,"column":8,"end_column":15}
    {"message_severity":"suggestion","log_item_type":"user","code":"duplicate-titles","message":"Title 'title 1 - Product' is duplicated with other articles: 'docs/v1/a.md(2,8), docs/v2/b.md(2,8), docs/v2/c.md(2,8)'","file":"docs/v1/a.md","line":2,"end_line":2,"column":8,"end_column":15}
---
# Content Validation - image altText duplicated
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "images": {
        "rules": [
          {
            "name": "Images",
            "type": "ImageAltTextDuplicated",
            "message": "Alt text {0} is duplicated. Within an article, alt text must be unique.",
            "code": "image-alt-text-duplicated",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  pig1.jpg:
  pig2.jpg:
  a.md: |
    :::image type="content" source="pig1.jpg" alt-text="test alt text":::

    :::image source="pig2.jpg" alt-text="test alt text":::

    :::image source="pig1.jpg" alt-text="unique alt text":::

    :::image type="complex" source="pig1.jpg" alt-text="test alt text1" loc-scope="azure"::: 
    text
    :::image-end:::

    :::image type="complex" source="pig2.jpg" alt-text="test alt text1" loc-scope="azure"::: 
    text
    :::image-end:::

    ![test alt text2](pig1.jpg)
    ![test alt text2](pig2.jpg)

    <img src="pig1.jpg" alt="test alt text3"></img>
    <img src="pig2.jpg" alt="test alt text3"></img>
outputs:
  a.json:
  pig1.jpg:
  pig2.jpg:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'test alt text' is duplicated. Within an article, alt text must be unique.","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'test alt text' is duplicated. Within an article, alt text must be unique.","file":"a.md","line":3,"end_line":3,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'test alt text1' is duplicated. Within an article, alt text must be unique.","file":"a.md","line":7,"end_line":7,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'test alt text1' is duplicated. Within an article, alt text must be unique.","file":"a.md","line":11,"end_line":11,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'test alt text2' is duplicated. Within an article, alt text must be unique.","file":"a.md","line":15,"end_line":15,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'test alt text2' is duplicated. Within an article, alt text must be unique.","file":"a.md","line":16,"end_line":16,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'test alt text3' is duplicated. Within an article, alt text must be unique.","file":"a.md","line":18,"end_line":18,"column":11,"end_column":19}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'test alt text3' is duplicated. Within an article, alt text must be unique.","file":"a.md","line":19,"end_line":19,"column":11,"end_column":19}
---
# Content Validation - image altText duplicated in includes
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude:
      - b.md
  rules.json: |
    {
      "images": {
        "rules": [
          {
            "name": "Images",
            "type": "ImageAltTextDuplicated",
            "message": "Alt text {0} is duplicated. Within an article, alt text must be unique.",
            "code": "image-alt-text-duplicated",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingPage",
              "hubPage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  pig1.jpg:
  pig2.jpg:
  pig3.jpg:
  pig4.jpg:
  a.md: |
    hello
    ![alt text](pig1.jpg)
    include b
    [!include[](b.md)]
  b.md: |
    hello
    ![alt text](pig2.jpg)
    <img src="pig3.jpg" alt="alt text"></img>
    :::image type="content" source="pig4.jpg" alt-text="alt text":::
outputs:
  a.json:
  pig1.jpg:
  pig2.jpg:
  pig3.jpg:
  pig4.jpg:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'alt text' is duplicated. Within an article, alt text must be unique.","file":"a.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'alt text'(a.md(4,1) -> b.md(2,1)) is duplicated. Within an article, alt text must be unique.","file":"b.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'alt text'(a.md(4,1) -> b.md(3,11)) is duplicated. Within an article, alt text must be unique.","file":"b.md","line":3,"end_line":3,"column":11,"end_column":19}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-alt-text-duplicated","message":"Alt text 'alt text'(a.md(4,1) -> b.md(4,1)) is duplicated. Within an article, alt text must be unique.","file":"b.md","line":4,"end_line":4,"column":1,"end_column":1}
---
# Content Validation - image altText missing
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "images": {
        "rules": [
          {
            "name": "Images",
            "type": "ImageAltTextMissing",
            "message": "Missing alternate text for image with link '{0}'. AltText is required for accessibility.",
            "code": "missing-image-altText",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  pig1.jpg:
  pig2.jpg:
  pig3.jpg:
  pig4.jpg:
  a.md: |
    :::image type="content" source="pig1.jpg" alt-text="":::

    :::image type="complex" source="pig2.jpg" alt-text="" loc-scope="azure"::: 
    text
    :::image-end:::

    ![](pig3.jpg)

    <img src="pig4.jpg" alt=""></img>

    ![`test alt text quote`](pig1.jpg)
outputs:
  pig1.jpg:
  pig2.jpg:
  pig3.jpg:
  pig4.jpg:
  .errors.log: |
    {"message_severity":"error","log_item_type":"user","code":"invalid-image","message":"alt-text is a required attribute. Please ensure you have specified an alt-text attribute.","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"error","log_item_type":"user","code":"invalid-image","message":"alt-text is a required attribute. Please ensure you have specified an alt-text attribute.","file":"a.md","line":3,"end_line":3,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"missing-image-altText","message":"Missing alternate text for image with link 'pig3.jpg'. AltText is required for accessibility.","file":"a.md","line":7,"end_line":7,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"missing-image-altText","message":"Missing alternate text for image with link 'pig4.jpg'. AltText is required for accessibility.","file":"a.md","line":9,"end_line":9,"column":11,"end_column":19}
---
# Content Validation - image altText bad length
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "images": {
        "rules": [
          {
            "type": "ImageAltTextBadLength",
            "message": "AltText {0} is out of range at {1} characters. AltText must be between {2} and {3} characters.",
            "code": "image-altText-with-badlength",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ],
            "defaultMinAltTextLength": 10,
            "defaultMaxAltTextLength": 20
          }
        ]
      }
    }
  pig1.jpg:
  a.md: |
    :::image type="content" source="pig1.jpg" alt-text="short":::
    :::image type="content" source="pig1.jpg" alt-text="longlonglonglonglonglong":::

    :::image type="complex" source="pig1.jpg" alt-text="short" loc-scope="azure"::: 
    text
    :::image-end:::
    :::image type="complex" source="pig1.jpg" alt-text="longlonglonglonglonglong" loc-scope="azure"::: 
    text
    :::image-end:::

    ![short](pig1.jpg)
    ![longlonglonglonglonglong](pig1.jpg)

    <img src="pig1.jpg" alt="short"></img>
    <img src="pig1.jpg" alt="longlonglonglonglonglong"></img>
outputs:
  pig1.jpg:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"image-altText-with-badlength","message":"AltText 'short' is out of range at 5 characters. AltText must be between 10 and 20 characters.","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-altText-with-badlength","message":"AltText 'longlonglonglonglonglong' is out of range at 24 characters. AltText must be between 10 and 20 characters.","file":"a.md","line":12,"end_line":12,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-altText-with-badlength","message":"AltText 'short' is out of range at 5 characters. AltText must be between 10 and 20 characters.","file":"a.md","line":11,"end_line":11,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-altText-with-badlength","message":"AltText 'longlonglonglonglonglong' is out of range at 24 characters. AltText must be between 10 and 20 characters.","file":"a.md","line":15,"end_line":15,"column":11,"end_column":19}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-altText-with-badlength","message":"AltText 'short' is out of range at 5 characters. AltText must be between 10 and 20 characters.","file":"a.md","line":14,"end_line":14,"column":11,"end_column":19}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-altText-with-badlength","message":"AltText 'longlonglonglonglonglong' is out of range at 24 characters. AltText must be between 10 and 20 characters.","file":"a.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-altText-with-badlength","message":"AltText 'short' is out of range at 5 characters. AltText must be between 10 and 20 characters.","file":"a.md","line":4,"end_line":4,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"image-altText-with-badlength","message":"AltText 'longlonglonglonglonglong' is out of range at 24 characters. AltText must be between 10 and 20 characters.","file":"a.md","line":7,"end_line":7,"column":1,"end_column":1}
---
# Content Validation - image altText equals file name
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "images": {
        "rules": [
          {
            "type": "ImageAltTextEqualsFilename",
            "message": "AltText {0} is the same as the image file name. This redundancy adds no value for users of screen readers. For accessibility, add more descriptive altText.",
            "code": "altText-equal-filename",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ]
          }
        ]
      }
    }
  pig1.jpg:
  pig2.jpg:
  pig3.jpg:
  pig4.jpg:
  a.md: |
    :::image type="content" source="pig1.jpg" alt-text="pig1":::

    :::image type="complex" source="pig2.jpg" alt-text="pig2" loc-scope="azure"::: 
    text
    :::image-end:::

    ![pig3](pig3.jpg)
    
    <img src="pig4.jpg" alt="pig4"></img>
outputs:
  pig1.jpg:
  pig2.jpg:
  pig3.jpg:
  pig4.jpg:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"altText-equal-filename","message":"AltText 'pig1' is the same as the image file name. This redundancy adds no value for users of screen readers. For accessibility, add more descriptive altText.","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"altText-equal-filename","message":"AltText 'pig2' is the same as the image file name. This redundancy adds no value for users of screen readers. For accessibility, add more descriptive altText.","file":"a.md","line":3,"end_line":3,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"altText-equal-filename","message":"AltText 'pig3' is the same as the image file name. This redundancy adds no value for users of screen readers. For accessibility, add more descriptive altText.","file":"a.md","line":7,"end_line":7,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"altText-equal-filename","message":"AltText 'pig4' is the same as the image file name. This redundancy adds no value for users of screen readers. For accessibility, add more descriptive altText.","file":"a.md","line":9,"end_line":9,"column":11,"end_column":19}
---
# Hidden PR only validation rule result
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    metadataSchema: schema.json
    rules:
      h1-missing: warning
      heading-empty: warning
  schema.json: |
    {
      "required": ["title"],
      "properties": {
          "description": {
              "type": [
                "string",
                "null"
              ],
              "minLength": 2,
              "maxLength": 10
          },
          "title": {
              "type": [
                "string",
                "null"
              ],
              "minLength": 2,
              "maxLength": 10
          }
      },
      "rules": {
          "title": {
              "string-length-invalid": {
                  "severity": "suggestion",
                  "code": "title-bad-length",
                  "pullRequestOnly": false
              },
              "missing-attribute": {
                  "severity": "suggestion",
                  "code": "title-missing",
                  "additionalMessage": "Add a title string to show in search engine results."
              },
          },
          "description": {
              "string-length-invalid": {
                  "severity": "suggestion",
                  "code": "description-bad-length",
                  "pullRequestOnly": true
              }
          }
      },
    }
  rules.json: |
    {
      "headings": {
        "rules": [
          {
            "type": "H1Missing",
            "message": "H1 is required. Use a single hash (#) followed by a space to create your top-level heading.",
            "exclusions": [ "toc", "includes", "hubpage", "landingpage" ],
            "severity": "SUGGESTION",
            "code": "h1-missing",
            "docfxOverride": true
          },
          {
            "type": "H1NotFirst",
            "message": "Markdown content is not allowed before {0}.",
            "code": "h1-not-first",
            "severity": "SUGGESTION",
            "exclusions": [ "includes", "landingpage", "hubpage" ],
            "excludedDocfxVersions": [
              "v2"
            ] ,
            "pullRequestOnly": false,
            "docfxOverride": true
          },
          {
            "type": "HeadingEmpty",
            "message": "Empty {0}. Headings must have content.",
            "code": "heading-empty",
            "severity": "SUGGESTION",
            "exclusions": [ "landingpage", "hubpage", "toc" ],
            "excludedDocfxVersions": [
              "v2"
            ],
            "pullRequestOnly": true,
            "docfxOverride": true
          },
          {
            "type": "NoContent",
            "message": "{0} contains no content. Add content or remove the unused heading.",
            "code": "heading-no-content",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ],
            "excludedDocfxVersions": [
              "v2"
            ],
            "pullRequestOnly": true,
            "docfxOverride": true
          }
        ]
      }
    }
  a.md: |
    ---
    title: too long title
    description: too long description
    ---
  b.md: |
    Some thing
    # heading1
    ## 
outputs:
  a.json:
  b.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"title-missing","message":"Missing required attribute: 'title'. Add a title string to show in search engine results.","file":"b.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"description-bad-length","message":"String 'description' is too long: 20 characters. Length should be <= 10.","file":"a.md","line":3,"end_line":3,"column":14,"end_column":34,"pull_request_only":true}
    {"message_severity":"suggestion","log_item_type":"user","code":"title-bad-length","message":"String 'title' is too long: 14 characters. Length should be <= 10.","file":"a.md","line":2,"end_line":2,"column":8,"end_column":22}
    {"message_severity":"warning","log_item_type":"user","code":"h1-missing","message":"H1 is required. Use a single hash (#) followed by a space to create your top-level heading.","file":"a.md","line":0,"end_line":0,"column":0,"end_column":0}
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-not-first","message":"Markdown content is not allowed before H1 'heading1'.","file":"b.md","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"warning","log_item_type":"user","code":"heading-empty","message":"Empty H2. Headings must have content.","file":"b.md","line":3,"end_line":3,"column":1,"end_column":1,"pull_request_only":true}
    {"message_severity":"suggestion","log_item_type":"user","code":"heading-no-content","message":"H2 contains no content. Add content or remove the unused heading.","file":"b.md","line":3,"end_line":3,"column":1,"end_column":1,"pull_request_only":true}
---
#Content validation - h1 disallowed headings
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    disallowlists: disallowed.json
  rules.json: |
    {
      "headings": {
        "name": "Headings",
        "description": "Validates H1 and other heading content",
        "aliases": null,
        "rules": [
          {
            "type": "DisallowedHeadings",
            "message": "Heading '{0}' matches the text of a disallowed Docs template heading.",
            "code": "disallowed-heading",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ]
          }
        ]
      }
    }
  disallowed.json: |
    {
     "list:header": {
            "id": "list:header",
            "dependent": null,
            "desc": "Values for header",
            "values": {
                "Feedback": null,
                "Is this page helpful?": null,
            }
     }
    }
  a.md: |
    # Feedback
    # header2
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"disallowed-heading","message":"Heading 'H1 'Feedback'' matches the text of a disallowed Docs template heading.","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
---
#Content validation - h1 in moniker
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    monikerRange:
      'v1/**': '< netcore-2.0'
      'v2/**': '>= netcore-2.0'
    monikerDefinition: monikerDefinition.json
  monikerDefinition.json: |
    {
      "monikers": [
        { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
        { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
      ]
    }
  rules.json: |
    {
      "headings": {
        "rules": [
          {
            "type": "H1InMoniker",
            "message": "H1s are not allowed in moniker sections. Each article should have one and only one H1.",
            "code": "h1-in-moniker",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage",
              "toc"
            ]
          }
        ]
      }
    }
  a.md: |
    # Create your first pipeline
  v2/b.md: |
    ::: moniker range=">= netcore-2.0"
    # Create your first pipeline
    ::: moniker-end
outputs:
  a.json:
  4667fedf/v2/b.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"h1-in-moniker","message":"H1s are not allowed in moniker sections. Each article should have one and only one H1.","file":"v2/b.md","line":2,"end_line":2,"column":1,"end_column":1}
---
# Content validation - codeblock validation indented checking
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "codeBlocks": {
        "rules": [
          {
            "type": "CodeBlockIndented",
            "message": "Indented code blocks aren't allowed. Use a Markdown code block surrounded by triple backticks (```).",
            "code": "code-block-indented",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  image.png: 
  a.md: |
    ---
    title: Axes object (Excel)
    ---

    :::image type="complex" source="image.png" alt-text="triple-colon test":::
         this is an intented codeblock included in triple colon block
    :::image-end:::
         this is an intented codeblock
outputs:
  a.json:
  image.png:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"code-block-indented","message":"Indented code blocks aren't allowed. Use a Markdown code block surrounded by triple backticks (```).","file":"a.md","line":8,"end_line":8,"column":1,"end_column":1}
---
# Content validation - codeblock validation unclosed
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "codeBlocks": {
        "rules": [
          {
            "type": "CodeBlockUnclosed",
            "message": "Unclosed code block. Code blocks must begin and end with triple backticks (```).",
            "code": "code-block-unclosed",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    ```
      this is a closed fenced codeblock
    ```
    ```
      this is an unclosed fenced codeblock
    
         this is an intented codeblock
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"code-block-unclosed","message":"Unclosed code block. Code blocks must begin and end with triple backticks (```).","file":"a.md","line":4,"end_line":4,"column":1,"end_column":1}
---
# Content validation - codeblock language missing, set codeblock minimum line number in rule
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "codeBlocks": {
        "rules": [
          {
            "type": "CodeLanguageMissing",
            "message": "Dev language missing. For code-blocks of {0} lines or more, we recommend that you use a cross-repo :::code::: reference with the language attribute. If this isn't feasible, you must add a valid language slug from the devlang taxonomy to your triple backtick code block.",
            "code": "dev-language-missing",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage"
            ],
            "excludedDocfxVersions": [
              "v2"
            ],
            "minCodeBlockLineCount": 5
          }
        ]
      }
    }
  a.md: |
    ```
      this is a fenced codeblock without language, net line number 5
      line 2
      line 3
      line 4
      line 5
    ```
    ```
      this is a fenced codeblock without language, net line number 4
      line 2
      line 3

      line 4
    ```
    ```csharp beta-1.0
      this is a fenced codeblock, net line number 5
      line 2
      line 3
      line 4
      line 5
    ```
         this is an intented codeblock
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"dev-language-missing","message":"Dev language missing. For code-blocks of 5 lines or more, we recommend that you use a cross-repo :::code::: reference with the language attribute. If this isn't feasible, you must add a valid language slug from the devlang taxonomy to your triple backtick code block.","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
---
# Content validation - codeblock language missing, not set codeblock minimum line number in rule, so the default value is 20
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "codeBlocks": {
        "rules": [
          {
            "type": "CodeLanguageMissing",
            "message": "Dev language missing. For code-blocks of {0} lines or more, we recommend that you use a cross-repo :::code::: reference with the language attribute. If this isn't feasible, you must add a valid language slug from the devlang taxonomy to your triple backtick code block.",
            "code": "dev-language-missing",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  a.md: |
    ```
      this is a fenced codeblock without language, net line number 5
      line 2
      line 3
      line 4
      line 5
    ```
    ```
      this is a fenced codeblock without language, net line number 4
      line 2
      line 3

      line 4
    ```
    ```csharp beta-1.0
      this is a fenced codeblock, net line number 5
      line 2
      line 3
      line 4
      line 5
    ```
    ```
      this is a fenced codeblock, net line number 5
      line
      line
      line
      line 5
      line
      line
      line
      line
      line 10
      line
      line
      line
      line
      line 15
      line
      line
      line
      line
      line 20
    ```
         this is an intented codeblock
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"dev-language-missing","message":"Dev language missing. For code-blocks of 20 lines or more, we recommend that you use a cross-repo :::code::: reference with the language attribute. If this isn't feasible, you must add a valid language slug from the devlang taxonomy to your triple backtick code block.","file":"a.md","line":22,"end_line":22,"column":1,"end_column":1}
---
# Content validation - codeblock language invalid
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    allowlists: allowlist.json
  rules.json: |
    {
      "codeBlocks": {
        "rules": [
          {
            "type": "CodeLanguageInvalid",
            "message": "Dev language '{0}' is not allowed. Specify a valid language slug from the devlang taxonomy. Language values are case-sensitive.",
            "code": "dev-language-invalid",
            "severity": "SUGGESTION",
            "exclusions": [
              "includes",
              "landingpage",
              "hubpage"
            ],
            "excludedDocfxVersions": [
              "v2"
            ]
          }
        ]
      }
    }
  allowlist.json: |
    {
      "list:devlang": {
        "id": "list:devlang",
        "dependent": null,
        "desc": "Values for codeblock language",
        "values": {
            "C#": null,
            "csharp beta-2.0": null,
            "csharp": null
        }
      }
    }
  a.md: |
    ```csharp beta-1.0
      this is a fenced codeblock
    ```
    ```csharp beta-2.0
      this is a fenced codeblock
    ```
    ```c#
      this is a fenced codeblock
    ```
    ```csharp
      this is a fenced codeblock
    ```
    ```
      this is a fenced codeblock
    ```
         this is an intented codeblock
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","log_item_type":"user","code":"dev-language-invalid","message":"Dev language 'csharp beta-1.0' is not allowed. Specify a valid language slug from the devlang taxonomy. Language values are case-sensitive.","file":"a.md","line":1,"end_line":1,"column":1,"end_column":1}
    {"message_severity":"suggestion","log_item_type":"user","code":"dev-language-invalid","message":"Dev language 'c#' is not allowed. Specify a valid language slug from the devlang taxonomy. Language values are case-sensitive.","file":"a.md","line":7,"end_line":7,"column":1,"end_column":1}
---
# Content validation - toc entry duplicated - log unlimit
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "toc": {
      "rules": [
        {
          "type": "TocEntryDuplicated",
          "message": "Article is referenced in more than one TOC node: {0}. Each article can only be referenced once in a TOC.",
          "code": "toc-entry-duplicated",
          "severity": "SUGGESTION",
          "exclusions": [
            "landingpage",
            "hubpage",
          ]
        }
      ]
    }
    }
  TOC.yml: |
    splitItemsBy: name
    items:
    - name: 1
      href: a.md
    - name: 2
      href: a.md
    - name: 3
      href: b.md
    - name: 4
      href: b.md
    - name: 5
      href: c.md
    - name: 6
      href: c.md
    - name: 7
      href: d.md
    - name: 8
      href: d.md
    - name: 9
      href: e.md
    - name: 10
      href: e.md
    - name: 11
      href: f.md
    - name: 12
      href: f.md
  a.md:
  b.md:
  c.md:
  d.md:
  e.md:
  f.md:
outputs:
  a.json:
  b.json:
  c.json:
  d.json:
  e.json:
  f.json:
  toc.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"toc-entry-duplicated","message":"Article is referenced in more than one TOC node: a.md, b.md, c.md, d.md, e.md, f.md. Each article can only be referenced once in a TOC.","file":"TOC.yml","line":0,"end_line":0,"column":0,"end_column":0,"log_item_type":"user"}
