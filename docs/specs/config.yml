---
# Specify include files
inputs:
  docfx.yml: |
    content:
      include:
        - docs/**/*.md
  ignore.md:
  docs/index.md:
outputs:
  docs/index.json:
  build.manifest:
---
# Specify include files by array
inputs:
  docfx.yml: |
    content:
      include: docs/**/*.md
  ignore.md:
  docs/index.md:
outputs:
  docs/index.json:
  build.manifest:
---
# Content supports string form
inputs:
  docfx.yml: |
    content: docs1/**/*.md
  ignore.md:
  docs1/index.md:
outputs:
  docs1/index.json:
  build.manifest:
---
# Content supports array form
inputs:
  docfx.yml: |
    content:
    - docs1/**/*.md
    - docs2/**/*.md
  ignore.md:
  docs1/index.md:
  docs2/index.md:
outputs:
  docs1/index.json:
  docs2/index.json:
  build.manifest:
---
# Content supports exclude file
inputs:
  docfx.yml: |
    content:
      include: docs/**/*.md
      exclude: docs/**/ignore.md
  docs/index.md:
outputs:
  docs/index.json:
  build.manifest:
---
# Content supports exclude folder
inputs:
  docfx.yml: |
    content:
      include: docs/**/*.md
      exclude:
      - docs/ignore/**/*.md
      - docs/codesnippet/**/*.md
  docs/index.md:
  docs/ignore/index.md:
  docs/codesnippet/index.md:
outputs:
  docs/index.json:
  build.manifest:
---
# Global metadata
inputs:
  docfx.yml: |
    globalMetadata:
      key: value
  docs/a.md:
  docs/b.md:
outputs:
  docs/a.json: |
    { "metadata": { "key": "value" } }
  docs/b.json: |
    { "metadata": { "key": "value" } }
  build.manifest:
---
# Global metadata multiple keys
inputs:
  docfx.yml: |
    globalMetadata:
      key1: value
      key2: 2
  docs/a.md:
  docs/b.md:
outputs:
  docs/a.json: |
    { "metadata": { "key1": "value", "key2": 2 } }
  docs/b.json: |
    { "metadata": { "key1": "value", "key2": 2 } }
  build.manifest:
---
# File metadata of object form
inputs:
  docfx.yml: |
    fileMetadata:
      docs/:
        key: value
      docs/index.md:
        key: another value
      docs/special/chars/allowed,.md:
        key: special chars
  docs/a.md:
  docs/b.md:
  docs/index.md:
  docs/special/chars/allowed,.md:
outputs:
  docs/a.json: |
    { "metadata": { "key": "value" } }
  docs/b.json: |
    { "metadata": { "key": "value" } }
  docs/index.json: |
    { "metadata": { "key": "another value" } }
  docs/special/chars/allowed,.json: |
    { "metadata": { "key": "special chars" } }
  build.manifest:
---
# File metadata of array form
inputs:
  docfx.yml: |
    globalMetadata:
      key: general
    fileMetadata:
    - include: docs/**
      exclude:
      - docs/index.md
      - docs/b.md
      value:
        key: exclude b
    - include:
      - docs/index.md
      value:
        key: index
    - include: docs/folder1/**
      exclude: docs/folder1/exclude/**
      value:
        key1: value1
    - include:
      - docs/folder21/**
      - docs/folder22/**
      value:
        key2: value2
  docs/a.md:
  docs/b.md:
  docs/index.md:
  docs/folder1/f1-include.md:
  docs/folder1/exclude/f1-exclude.md:
  docs/folder21/f2-include1.md:
  docs/folder22/f2-include2.md:
outputs:
  docs/a.json: |
    { "metadata": { "key": "exclude b" } }
  docs/b.json: |
    { "metadata": { "key": "general" } }
  docs/index.json: |
    { "metadata": { "key": "index" } }
  docs/folder1/f1-include.json: |
    { "metadata": { "key1": "value1"} }
  docs/folder1/exclude/f1-exclude.json: |
    { "metadata": {"!key1": null} }
  docs/folder21/f2-include1.json: |
    { "metadata": {"key2": "value2"} }
  docs/folder22/f2-include2.json: |
    { "metadata": {"key2": "value2"} }
  build.manifest:
---
# File metadata overwrite global metadata
inputs:
  docfx.yml: |
    globalMetadata:
      key: value
    fileMetadata:
      docs/:
        key: another value
  docs/a.md:
outputs:
  docs/a.json: |
    { "metadata": { "key": "another value" } }
  build.manifest:
---
# routes
inputs:
  docfx.yml: |
    routes:
      /: outputB
      docs/a.md: output
      docs/b/: output
  docs/a.md: |
    [link](c.png)
  docs/c.png:
  docs/b/b.md: |
    [link](d.svg)
  docs/b/d.svg:
  docs/g/a.md: |
    [link](e.jpg)
  docs/g/e.jpg:
outputs:
  output/a.json:
  output/b.json:
  output/d.svg:
  outputB/docs/c.png:
  outputB/docs/g/a.json:
  outputB/docs/g/e.jpg:
  build.manifest:
---
# latter routes rule takes precedence - 1
inputs:
  docfx.yml: |
    routes:
      docs/a/: output
      docs/a/b.md: outputB
      docs/a/c.gif: outputC
  docs/a/b.md: |
    [link](c.gif)
  docs/a/c.gif:
outputs:
  outputB/b.json:
  outputC/c.gif:
  build.manifest:
---
# latter routes rule takes precedence - 2
inputs:
  docfx.yml: |
    routes:
      docs/a/b.md: outputB
      docs/a/c.gif: outputC
      docs/a/: output
  docs/a/b.md: |
    [link](c.gif)
  docs/a/c.gif:
outputs:
  output/b.json:
  output/c.gif:
  build.manifest:
---
# relative path extend
inputs:
  docfx.yml: |
    extend: _shared/extend.yml
  _shared/extend.yml: |
    content: a.md
  a.md:
outputs:
  a.json:
  build.manifest:
---
# relative path extend to itself
inputs:
  docfx.yml: |
    extend: docfx.yml
    content: a.md
  a.md:
outputs:
  a.json:
  build.manifest:
---
# absolute url extend
inputs:
  docfx.yml: |
    extend: https://raw.githubusercontent.com/docascode/docfx-test-dependencies/extend-test-1/extend1.yml
  a.md:
outputs:
  a.json:
  build.manifest:
---
# current config takes precedence over extend config
inputs:
  docfx.yml: |
    content: a.md
    extend: extend.yml
  extend.yml: |
    content: invalid.md
  a.md:
outputs:
  a.json:
  build.manifest:
---
# latter extend config takes precedence over former extend config
inputs:
  docfx.yml: |
    extend:
    - extendB.yml
    - https://raw.githubusercontent.com/docascode/docfx-test-dependencies/extend-test-1/extend1.yml
  extendB.yml: |
    content: invalid.md
  a.md:
outputs:
  a.json:
  build.manifest:
---
# exclude config extend and external references from build
inputs:
  docfx.yml: |
    extend:
      - docs/a.yml
      - docs/b.yml
    github:
      userCache: docs/d.json
    contribution:
      gitCommitsTime: docs/c.json
  docs/a.yml:
  docs/b.yml:
  docs/c.json: '{}'
  docs/d.json: '{}'
outputs:
  build.manifest:
---
# expand config before merge
inputs:
  docfx.yml: |
    content: '**/*.md'
    extend:
      extend.yml
  extend.yml: |
    content: 
      include: a.md
      exclude: b.md
  a.md:
  b.md:
outputs:
  a.json:
  build.manifest:
---
# `/` and `\` in path will be normalized
inputs:
  docfx.yml: |
    routes:
      docs\a.md: output
      .\docs/b\: output
  docs/a.md:
  docs/b/b.md:
outputs:
  output/a.json:
  output/b.json:
  build.manifest:
---
# Adjust error level using rules
inputs:
  docfx.yml: |
    rules:
      file-not-found: off
  docs/a.md: |
    [b](b.md)
outputs:
  docs/a.json: |
    { "content": "<p><a href=\"b.md\">b</a></p>" }
  build.manifest:
---
# Treat warnings as errors
inputs:
  docfx.yml: |
    warningsAsErrors: true
  docs/a.md: |
    [b](b.md)
outputs:
  build.manifest:
  build.log: |
    ["error","file-not-found","Cannot find file 'b.md' relative to 'docs/a.md'","docs/a.md"]
---
# Invalid redirection file
inputs:
  docfx.yml: |
    redirections:
      docs/TOC.md: /absolute/path
outputs:
  build.log: |
    ["error","invalid-redirection","The 'docs/TOC.md' shouldn't belong to redirections since it's a TableOfContents","docfx.yml"]
  build.manifest:
---
# Conflicted redirection file
inputs:
  docfx.yml: |
    redirections:
      docs/a.md: /absolute/path1
    redirectionsWithoutId:
      docs/a.md: /absolute/path2
outputs:
  docs/a.json:
  build.log: |
    ["error","redirection-conflict","The 'docs/a.md' appears twice or more in the redirection mappings","docfx.yml"]
  build.manifest:
---
# Out scope redirection file
inputs:
  docfx.yml: |
    redirections:
      docs/a.md: /absolute/path1
      articles/b.md: /absolute/path2
outputs:
  docs/a.json:
  build.log: |
    ["warning","redirection-out-of-scope","Redirection file 'articles/b.md' will not be built because it is not included in docfx.yml"]
  build.manifest:
---
# Multiple errors
inputs:
  docfx.yml: |
    redirections:
      docs/TOC.md: /absolute/path
      docs/a.md: /absolute/path1
    redirectionsWithoutId:
      docs/a.md: /absolute/path2
outputs:
  docs/a.json:
  build.log: |
    ["error","invalid-redirection","The 'docs/TOC.md' shouldn't belong to redirections since it's a TableOfContents","docfx.yml"]
    ["error","redirection-conflict","The 'docs/a.md' appears twice or more in the redirection mappings","docfx.yml"]
  build.manifest:
---
# Wrong locale
os: windows
inputs:
  docfx.yml: |
    defaultLocale: wrong/wrong
outputs:
  build.log: |
    ["error","invalid-locale","Locale 'wrong/wrong' is not supported."]
---
# branch overwrite config
repo: https://github.com/docascode/docfx-test-dependencies#master
inputs:
  docfx.yml: |
    content: a.md
    "branches: [master]":
      content: b.md
  a.md:
outputs:
  build.manifest:
---
# locale overwrite config
commands:
  - build --locale zh-cn
inputs:
  docfx.yml: |
    content: a.md
    "locales: [zh-cn,de-de]":
      content: b.md
  a.md:
outputs:
  build.manifest:
---
# branch | locale overwrite config
commands:
  - build --locale zh-cn
repo: https://github.com/docascode/docfx-test-dependencies#master
inputs:
  docfx.yml: |
    content: a.md
    "locales: [zh-cn]":
      content:
        include: 
          - b.md
          - c.md
    "branches: [master,live]":
      content:
        exclude:
          - b.md
  a.md:
  b.md:
  c.md:
outputs:
  c.json:
  build.manifest:
---
# branch & locale overwrite config
commands:
  - build --locale zh-cn
repo: https://github.com/docascode/docfx-test-dependencies#master
inputs:
  docfx.yml: |
    content: a.md
    "locales: [zh-cn, de-de] branches: [live]":
      content: b.md
  a.md:
outputs:
  a.json:
  build.manifest:
---
# invalid overwrite config
commands:
  - build --locale zh-cn
inputs:
  docfx.yml: |
    content: a.md
    "locales: zh-cn":
      content: b.md
  a.md:
outputs:
  a.json:
  build.manifest:
  build.log: |
    ["warning","unknown-field","Could not find member 'locales: zh-cn' on object of type 'Config'.","docfx.yml","['locales: zh-cn']"]
---
# loc config convention without source locale
commands:
  - build --locale zh-cn
inputs:
  docfx.yml: |
    contribution:
      repository: github.com/docfx/docfx
  docs/a.md:
outputs:
  docs/a.json: |
    { "content_git_url": "*github.com/docfx/docfx.zh-cn*"}
  build.manifest:
---
# loc config convention with source locale
commands:
  - build --locale zh-cn
inputs:
  docfx.yml: |
    contribution:
      repository: github.com/docfx/docfx.en-us
  docs/a.md:
outputs:
  docs/a.json: |
    { "content_git_url": "*github.com/docfx/docfx.zh-cn*"}
  build.manifest:
