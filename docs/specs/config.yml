---
# Specify include files, prefer docfx.yml to docfx.json
inputs:
  docfx.yml: |
    files: docs/**/*.md
  docfx.json: |
    { "files": "ignore.md" }
  ignore.md:
  docs/index.md:
outputs:
  docs/index.json:
---
# Files supports array form
inputs:
  docfx.yml: |
    files:
    - docs1/**/*.md
    - docs2/**/*.md
  ignore.md:
  docs1/index.md:
  docs2/index.md:
outputs:
  docs1/index.json:
  docs2/index.json:
---
# Exclude supports file
inputs:
  docfx.yml: |
    files: docs/**/*.md
    exclude: docs/**/ignore.md
  docs/index.md:
  docs/ignore.md:
outputs:
  docs/index.json:
---
# Exclude supports folder
inputs:
  docfx.yml: |
    files: docs/**/*.md
    exclude:
    - docs/ignore/**/*.md
    - docs/codesnippet/**/*.md
  docs/index.md:
  docs/ignore/index.md:
  docs/codesnippet/index.md:
outputs:
  docs/index.json:
---
# Support specify build scope in fileGroups object
inputs:
  docfx.yml: |
    fileGroups:
      files: docs/**/*.md
      exclude: docs/**/ignore.md
  docs/index.md:
  docs/ignore.md:
outputs:
  docs/index.json:
---
# Support specify build scope in fileGroups array
inputs:
  docfx.yml: |
    fileGroups:
    - files: docs/**/*.md
      exclude: docs/**/ignore.md
  docs/index.md:
  docs/ignore.md:
outputs:
  docs/index.json:
---
# Support fileGroups as object
inputs:
  docfx.yml: |
    fileGroups:
      files: docs/b.md
      exclude: docs/**/ignore.md
  docs/a.md:
  docs/b.md:
outputs:
  docs/b.json:
---
# Use FileGroups and ignore root build scope if FileGroups is defined
inputs:
  docfx.yml: |
    files: docs/a.md
    fileGroups:
    - files: docs/b.md
  docs/a.md:
  docs/b.md:
outputs:
  docs/b.json:
---
# FileGroup a's exclude won't influence b's include
inputs:
  docfx.yml: |
    fileGroups:
    - files: docs/**/*.md
      exclude: docs/**/*.png
    - files: docs/**/*.png
      exclude: docs/**/*.md
  docs/a.md:
  docs/b.png:
outputs:
  docs/a.json:
  docs/b.png:
---
# Global metadata
inputs:
  docfx.yml: |
    globalMetadata:
      key: value
  docs/a.md:
  docs/b.md:
outputs:
  docs/a.json: |
    { "key": "value" }
  docs/b.json: |
    { "key": "value"}
---
# Global metadata multiple keys
inputs:
  docfx.yml: |
    globalMetadata:
      key1: value
      key2: 2
  docs/a.md:
  docs/b.md:
outputs:
  docs/a.json: |
    { "key1": "value", "key2": 2 }
  docs/b.json: |
    { "key1": "value", "key2": 2 }
---
# Global metadata schema violation
inputs:
  docfx.yml: |
    globalMetadata:
      title: 
        - 1
        - 2
  docs/a.md:
  docs/b.md:
outputs:
  .errors.log: |
    ["error","violate-schema","Expected type String, please input String or type compatible with String.","docfx.yml",3,5]
---
# File metadata of object form
inputs:
  docfx.yml: |
    fileMetadata:
      key:
        docs/**: value
        docs/index.md: another value
  docs/a.md:
  docs/b.md:
  docs/index.md:
outputs:
  docs/a.json: |
    { "key": "value" }
  docs/b.json: |
    { "key": "value" }
  docs/index.json: |
    { "key": "another value" }
---
# File metadata overwrite global metadata
inputs:
  docfx.yml: |
    globalMetadata:
      key: value
    fileMetadata:
      key:
        docs/**: another value
  docs/a.md:
outputs:
  docs/a.json: |
    { "key": "another value" }
---
# String values are trimmed in config
inputs:
  docfx.yml: |
    globalMetadata:
      key: ' value   '
    redirectionsWithoutId:
      docs/redirect.md: '/absolute/path '
  docs/a.md: |
    [redirect](redirect.md?a#b)
outputs:
  docs/a.json: |
    {
      "key": "value",
      "conceptual": "<p><a href=\"redirect?a#b\">redirect</a></p>"
    }
---
# routes
inputs:
  docfx.yml: |
    routes:
      /: outputB
      docs/a.md: output
      docs/b: output
  docs/a.md: |
    [link](c.png)
  docs/c.png:
  docs/b/b.md: |
    [link](d.svg)
  docs/b/d.svg:
  docs/g/a.md: |
    [link](e.jpg)
  docs/g/e.jpg:
outputs:
  output/a.json:
  output/b.json:
  output/d.svg:
  outputb/docs/c.png:
  outputb/docs/g/a.json:
  outputb/docs/g/e.jpg:
---
# latter routes rule takes precedence - 1
inputs:
  docfx.yml: |
    routes:
      docs/a/: output
      docs/a/b.md: outputB
      docs/a/c.gif: outputC
  docs/a/b.md: |
    [link](c.gif)
  docs/a/c.gif:
outputs:
  outputb/b.json:
  outputc/c.gif:
---
# latter routes rule takes precedence - 2
inputs:
  docfx.yml: |
    routes:
      docs/a/b.md: outputB
      docs/a/c.gif: outputC
      docs/a/: output
  docs/a/b.md: |
    [link](c.gif)
  docs/a/c.gif:
outputs:
  output/b.json:
  output/c.gif:
---
# relative path extend with json file
inputs:
  docfx.yml: |
    extend: _shared/extend.json
  _shared/extend.json: |
    {"files": "a.md"}
  a.md:
outputs:
  a.json:
---
# relative path extend to itself
inputs:
  docfx.yml: |
    extend: docfx.yml
    files: a.md
  a.md:
outputs:
  a.json:
---
# absolute url extend
inputs:
  docfx.yml: |
    extend: https://raw.githubusercontent.com/docascode/docfx-test-dependencies/master/extend1.yml
  a.md:
outputs:
  a.json:
---
# current config takes precedence over extend config
inputs:
  docfx.yml: |
    files: a.md
    extend: extend.yml
  extend.yml: |
    files: invalid.md
  a.md:
outputs:
  a.json:
---
# latter extend config takes precedence over former extend config
inputs:
  docfx.yml: |
    extend:
    - extendB.yml
    - https://raw.githubusercontent.com/docascode/docfx-test-dependencies/62b0448/extend1.yml
  extendB.yml: |
    files: invalid.md
  a.md:
outputs:
  a.json:
---
# exclude config extend and external references from build
inputs:
  docfx.yml: |
    extend:
      - docs/a.yml
      - docs/b.yml
    xref: docs/d.json
  docs/a.yml:
  docs/b.yml:
  docs/d.json: '{}'
outputs:
---
# `/` and `\` in path will be normalized
inputs:
  docfx.yml: |
    routes:
      docs\a.md: output
      .\docs/b\: output
  docs/a.md:
  docs/b/b.md:
outputs:
  output/a.json:
  output/b.json:
---
# Adjust error level using custom errors
inputs:
  docfx.yml: |
    customErrors:
      file-not-found: off
  docs/a.md: |
    [b](b.md)
outputs:
  docs/a.json: |
    { "conceptual": "<p><a href=\"b.md\">b</a></p>" }
---
# Adjust error message using custom errors
inputs:
  docfx.yml: |
    customErrors:
      file-not-found:
        severity: error
        additionalMessage: 'NOTE:'
  a.md: a [b](b.md)
outputs:
  .errors.log: |
    ["error","file-not-found","Invalid file link: 'b.md'. NOTE:","a.md",1,3]
---
# log with default log level when docfx crashes, even the corresponding rule is turned off
inputs:
  docfx.yml: |
    customErrors:
      file-not-found: off
    xref: xref.json
  a.md: '@System.String'
outputs:
  .errors.log: |
    ["error","file-not-found","Invalid file link: 'xref.json'.","docfx.yml",3,7]
---
# Treat warnings as errors
inputs:
  docfx.yml: |
    warningsAsErrors: true
  docs/a.md: |
    [b](b.md)
outputs:
  .errors.log: |
    ["error","file-not-found","Invalid file link: 'b.md'.","docs/a.md",1,1]
---
# Redirection file content type invalid
inputs:
  docfx.yml: |
    redirections:
      docs/TOC.md: /absolute/path
outputs:
  .errors.log: |
    ["error","redirection-invalid","File 'docs/TOC.md' is redirected to '/absolute/path'. Only content files can be redirected.","docfx.yml",2,16]
---
# Redirection url conflict
inputs:
  docfx.yml: |
    redirections:
      docs/a.md: /docs/b
    redirectionsWithoutId:
      docs/a.md: /absolute/path2
  docs/b.md:
outputs:
  docs/b.json:
  .errors.log: |
    ["error","redirection-conflict","The 'docs/a.md' appears twice or more in the redirection mappings","docfx.yml",4,14]
---
# Redirection file out of build scope
inputs:
  docfx.yml: |
    exclude: '*'
    redirectionsWithoutId:
      docs/a.md: /absolute/path1
      b.md: /absolute/path2
outputs:
---
# Redirection file out of build scope with conflicted id
inputs:
  docfx.yml: |
    exclude: '*'
    redirections:
      a.md: /absolute/path1
      b.md: /absolute/path1
outputs:
---
# Multiple redirection errors
inputs:
  docfx.yml: |
    redirections:
      docs/TOC.md: /absolute/path
      docs/a.md: /docs/b
    redirectionsWithoutId:
      docs/a.md: /absolute/path2
  docs/b.md:
outputs:
  docs/b.json:
  .errors.log: |
    ["error","redirection-invalid","File 'docs/TOC.md' is redirected to '/absolute/path'. Only content files can be redirected.","docfx.yml",2,16]
    ["error","redirection-conflict","The 'docs/a.md' appears twice or more in the redirection mappings","docfx.yml",5,14]
---
# Wrong locale
os: windows
inputs:
  docfx.yml: |
    localization:
      defaultLocale: wrong/wrong
outputs:
  .errors.log: |
    ["error","locale-invalid","Invalid locale: 'wrong/wrong'."]
---
# branch overwrite config
repos:
  https://docs.com/branch-overwrite:
  - files:
      docfx.yml: |
        files: a.md
        "branches: [master]":
          files: b.md
      a.md:
outputs:
---
# locale overwrite config
locale: zh-cn
inputs:
  docfx.yml: |
    files: a.md
    "locales: [zh-cn,de-de]":
      files: b.md
      name: test
    localization:
      defaultLocale: "zh-cn"
  a.md:
outputs:
---
# branch | locale overwrite config
locale: zh-cn
repos:
  https://docs.com/branch-or-locale-overwrite:
  - files:
      docfx.yml: |
        localization:
          defaultLocale: "zh-cn"
        files: a.md
        "locales: [zh-cn]":
          files:
            - b.md
            - c.md
        "branches: [master,live]":
          exclude:
            - b.md
      a.md:
      b.md:
      c.md:
outputs:
  c.json:
---
# branch & locale overwrite config
locale: zh-cn
repos:
  https://docs.com/branch-and-locale-overwrite:
  - files:
      docfx.yml: |
        localization:
          defaultLocale: "zh-cn"
        files: a.md
        "locales: [zh-cn, de-de] branches: [live]":
          files: b.md
      a.md:
outputs:
  a.json:
---
# branch & locale overwrite with null
locale: zh-cn
repo: https://github.com/docascode/docfx-test-dependencies#master
inputs:
  docfx.yml: |
    files:
      - a.md
      - b.png
    output:
      copyResources: false
    localization:
      defaultLocale: "zh-cn"
    "locales: [zh-cn]":
      output:
        copyResources:
  a.md:
  b.png:
outputs:
  a.json:
  b.png:
---
# invalid overwrite config
locale: zh-cn
inputs:
  docfx.yml: |
    localization:
      defaultLocale: "zh-cn"
    files: a.md
    "locales: zh-cn":
      files: b.md
  a.md:
outputs:
  a.json:
---
# redirect to not starting with '/' is allowed in config.redirectionWithoutIds
inputs:
  docfx.yml: |
    redirectionsWithoutId:
      a.md: https://docs.microsoft.com/docfx/a
      b.md: a
outputs:
---
# file metadata schema violation
inputs:
  docfx.yml: |  
    fileMetadata:
      title:
        docs/**: 
          - 1
          - 2
  docs/a.md:
outputs:
  .errors.log: |
    ["error","violate-schema","Expected type String, please input String or type compatible with String.","docfx.yml",4,7]
---
# Should not change files out of outputFolder
inputs:
  docfx.yml: |
    files: '**'
    output:
      copyResources: false
    routes:
      docs/: .
  a.png:
  docs/a.png:
outputs:
  .publish.json:
  .errors.log: |
      ["error","publish-url-conflict","Two or more files publish to the same url '/a.png': 'a.png', 'docs/a.png'"]
---
# Redirection files have conflicted ids
# all redirection files will be built
# redirection document id is retrieved from the first redirection file (a.md for below case)
inputs:
  docfx.yml: |
    redirections:
      a.md: /docs/path1
      b.md: /docs/path1
  docs/path1.md:
outputs:
  .errors.log: |
    ["warning","redirection-url-conflict","The '/docs/path1' appears twice or more in the redirection mappings","docfx.yml",3,9]
  .publish.json: |
    {
        "files": [
            {
                "url": "/a"
            },
            {
                "url": "/b"
            },
            {
                "url": "/docs/path1"
            }
        ]
    }
  docs/path1.json: |
    {"document_id": "780484e9-a367-97ab-ba7d-a19f3b378a80", "document_version_independent_id": "e9b3f4e2-1a78-4b5d-fbb4-03e0a33e38f5",}
---
# branch property has higher priority than branch defined in url
repos:
  https://docs.com/branch-priority/1:
    - files:
        docfx.yml: |
          dependencies:
            crr:
              url: https://docs.com/branch-priority/2#unused
              branch: master
              includeInBuild: true
  https://docs.com/branch-priority/2#master:
    - files:
        b.md: 
  https://docs.com/branch-priority/2#unused:
    - files:
        c.md: 
outputs:
  crr/b.json:
---
# dependencyPackageUrl can use relative path by setting path or url
# path has higher priority than url
inputs:
  docfx.yml: |
    files:
    - crr1/**/*.md
    - crr2/**/*.md
    dependencies:
      crr1:
        path: crr-by-path
        includeInBuild: true
      crr2:
        url: crr-priority-url
        path: crr-priority-path
        includeInBuild: true
  crr-by-path/crr-by-path.md:
  crr-priority-url/crr-priority-url.md:
  crr-priority-path/crr-priority-path.md:
outputs:
  crr1/crr-by-path.json:
  crr2/crr-priority-path.json:
---
# dependencyPackageUrl's path using git url won't restore the git repo
repos:
  https://docs.com/crr-url-using-path/1:
  - files:
      docfx.yml: |
        dependencies:
          crr:
            path: https://docs.com/crr-url-using-path/2
            includeInBuild: true
  https://docs.com/crr-url-using-path/2:
  - files:
      b.md:
outputs:
  .errors.log: |
    ["error","need-restore","Cannot find dependency 'https://docs.com/crr-url-using-path/2', did you forget to run `docfx restore`?"]
