---
# Specify include files, prefer docfx.yml to docfx.json
inputs:
  docfx.yml: |
    files: docs/**/*.md
  docfx.json: |
    { "files": "ignore.md" }
  ignore.md:
  docs/index.md:
outputs:
  docs/index.json:
---
# Files supports array form
inputs:
  docfx.yml: |
    files:
    - docs1/**/*.md
    - docs2/**/*.md
  ignore.md:
  docs1/index.md:
  docs2/index.md:
outputs:
  docs1/index.json:
  docs2/index.json:
---
# Exclude supports file
inputs:
  docfx.yml: |
    files: docs/**/*.md
    exclude: docs/**/ignore.md
  docs/index.md:
  docs/ignore.md:
outputs:
  docs/index.json:
---
# Exclude supports folder
inputs:
  docfx.yml: |
    files: docs/**/*.md
    exclude:
    - docs/ignore/**/*.md
    - docs/codesnippet/**/*.md
  docs/index.md:
  docs/ignore/index.md:
  docs/codesnippet/index.md:
outputs:
  docs/index.json:
---
# Support specifing build scope in content or resource
inputs:
  docfx.yml: |
    content:
    - files: docs/**/*.md
      exclude: docs/**/ignore.md
    resource:
      files: '*.png'
  docs/index.md:
  docs/ignore.md:
  docs/a.png:
  b.png:
outputs:
  docs/index.json:
  b.png:
---
# Support triple star - For backward compatibility with v2
inputs:
  docfx.yml: |
    content:
    - files: docs/**/*.md
      exclude:
      - '***/readme.md'
  docs/a/readme.md:
outputs:
  !docs/a/readme.json: null
---
# Use content and resource and ignore root build scope if content or resource is defined
inputs:
  docfx.yml: |
    files: a.md
    content:
    - files: b.md
    resource:
    - files: c.png
  a.md:
  b.md:
  c.png:
outputs:
  b.json:
  c.png:
---
# content a's exclude won't influence b's include
inputs:
  docfx.yml: |
    content:
    - files: docs/**/*.md
      exclude: docs/**/*.png
    - files: docs/**/*.png
      exclude: docs/**/*.md
  docs/a.md:
  docs/b.png:
outputs:
  docs/a.json:
  docs/b.png:
---
# content with src, dest config
inputs:
  docfx.yml: |
    content:
    - src: a
      dest: url-a
    - src: b
      dest: .
  a/a.md:
  b/b.md:
outputs:
  url-a/a.json:
  b.json:
---
# Global metadata in docfx.json
inputs:
  docfx.json: |
    { "globalMetadata": { "key": "value" } }
  docs/a.md:
  docs/b.md:
outputs:
  docs/a.json: |
    { "key": "value" }
  docs/b.json: |
    { "key": "value"}
---
# Global metadata multiple keys
inputs:
  docfx.yml: |
    globalMetadata:
      key1: value
      key2: 2
  docs/a.md:
  docs/b.md:
outputs:
  docs/a.json: |
    { "key1": "value", "key2": 2 }
  docs/b.json: |
    { "key1": "value", "key2": 2 }
---
# Global metadata schema violation
inputs:
  docfx.yml: |
    globalMetadata:
      title: 
        - 1
        - 2
  docs/a.md:
  docs/b.md:
outputs:
  .errors.log: |
    ["error","violate-schema","Expected type String, please input String or type compatible with String.","docfx.yml",3,5]
---
# File metadata of object form
inputs:
  docfx.yml: |
    fileMetadata:
      key:
        docs/**: value
        docs/index.md: another value
  docs/a.md:
  docs/b.md:
  docs/index.md:
outputs:
  docs/a.json: |
    { "key": "value" }
  docs/b.json: |
    { "key": "value" }
  docs/index.json: |
    { "key": "another value" }
---
# File metadata overwrite global metadata
inputs:
  docfx.yml: |
    globalMetadata:
      key: value
    fileMetadata:
      key:
        docs/**: another value
  docs/a.md:
outputs:
  docs/a.json: |
    { "key": "another value" }
---
# Metadatata value should be directly passed through
# Redirect URL should be trimmed
inputs:
  docfx.yml: |
    globalMetadata:
      key: ' value   '
  redirections.yml: |
    redirections:
      docs/redirect.md: '/absolute/path '
  docs/a.md:
outputs:
  docs/a.json: |
    {
      "key": " value   "
    }
  .publish.json: |
    {
      "files": [
        { "source_path": "docs/redirect.md", "redirect_url": "/absolute/path" },
        { "url": "/docs/a" }
      ]
    }
---
# routes
inputs:
  docfx.yml: |
    routes:
      ./: outputB
      docs/a.md: output
      docs/b: output
  docs/a.md: |
    [link](c.png)
  docs/c.png:
  docs/b/b.md: |
    [link](d.svg)
  docs/b/d.svg:
  docs/g/a.md: |
    [link](e.jpg)
  docs/g/e.jpg:
outputs:
  output/a.json:
  output/b.json:
  output/d.svg:
  outputb/docs/c.png:
  outputb/docs/g/a.json:
  outputb/docs/g/e.jpg:
---
# latter routes rule takes precedence - 1
inputs:
  docfx.yml: |
    routes:
      docs/a/: output
      docs/a/b.md: outputB
      docs/a/c.gif: outputC
  docs/a/b.md: |
    [link](c.gif)
  docs/a/c.gif:
outputs:
  outputb/b.json:
  outputc/c.gif:
---
# latter routes rule takes precedence - 2
inputs:
  docfx.yml: |
    routes:
      docs/a/b.md: outputB
      docs/a/c.gif: outputC
      docs/a/: output
  docs/a/b.md: |
    [link](c.gif)
  docs/a/c.gif:
outputs:
  output/b.json:
  output/c.gif:
---
# relative path extend with json file
inputs:
  docfx.yml: |
    extend: _shared/extend.json
  _shared/extend.json: |
    {"files": "a.md"}
  a.md:
outputs:
  a.json:
---
# relative path extend to itself
inputs:
  docfx.yml: |
    extend: docfx.yml
    files: a.md
  a.md:
outputs:
  a.json:
---
# absolute url extend
inputs:
  docfx.yml: |
    extend: https://raw.githubusercontent.com/docascode/docfx-test-dependencies/master/extend1.yml
  a.md:
outputs:
  a.json:
---
# current config takes precedence over extend config
inputs:
  docfx.yml: |
    files: a.md
    extend: extend.yml
  extend.yml: |
    files: invalid.md
  a.md:
outputs:
  a.json:
---
# latter extend config takes precedence over former extend config
inputs:
  docfx.yml: |
    extend:
    - extendB.yml
    - https://raw.githubusercontent.com/docascode/docfx-test-dependencies/62b0448/extend1.yml
  extendB.yml: |
    files: invalid.md
  a.md:
outputs:
  a.json:
---
# exclude config extend and external references from build
inputs:
  docfx.yml: |
    extend:
      - docs/a.yml
      - docs/b.yml
    xref: docs/d.json
  docs/a.yml:
  docs/b.yml:
  docs/d.json: '{}'
outputs:
---
# `/` and `\` in path will be normalized
inputs:
  docfx.yml: |
    routes:
      docs\a.md: output
      .\docs/b\: output
  docs/a.md:
  docs/b/b.md:
outputs:
  output/a.json:
  output/b.json:
---
# Adjust error level using custom errors
inputs:
  docfx.yml: |
    customErrors:
      file-not-found: off
  docs/a.md: |
    [b](b.md)
outputs:
  docs/a.json: |
    { "conceptual": "<p><a href=\"b.md\">b</a></p>" }
---
# Adjust error message using custom errors
inputs:
  docfx.yml: |
    customErrors:
      file-not-found:
        severity: error
        additionalMessage: 'NOTE:'
  a.md: a [b](b.md)
outputs:
  .errors.log: |
    ["error","file-not-found","Invalid file link: 'b.md'. NOTE:","a.md",1,3]
---
# log with default log level when docfx crashes, even the corresponding rule is turned off
inputs:
  docfx.yml: |
    customErrors:
      file-not-found: off
    xref: xref.json
  a.md: '@System.String'
outputs:
  .errors.log: |
    ["error","file-not-found","Invalid file link: 'xref.json'.","docfx.yml",3,7]
---
# Treat warnings as errors
inputs:
  docfx.yml: |
    warningsAsErrors: true
  docs/a.md: |
    [b](b.md)
outputs:
  .errors.log: |
    ["error","file-not-found","Invalid file link: 'b.md'.","docs/a.md",1,1]
---
# Wrong locale
os: windows
inputs:
  docfx.yml: |
    localization:
      defaultLocale: wrong/wrong
outputs:
  .errors.log: |
    ["error","locale-invalid","Invalid locale: 'wrong/wrong'."]
---
# file metadata schema violation
inputs:
  docfx.yml: |  
    fileMetadata:
      title:
        docs/**: 
          - 1
          - 2
  docs/a.md:
outputs:
  .errors.log: |
    ["error","violate-schema","Expected type String, please input String or type compatible with String.","docfx.yml",4,7]
---
# Should not change files out of outputFolder
inputs:
  docfx.yml: |
    files: '**'
    output:
      copyResources: false
    routes:
      docs/: .
  a.png:
  docs/a.png:
outputs:
  .publish.json:
  .errors.log: |
      ["error","publish-url-conflict","Two or more files publish to the same url '/a.png': 'a.png', 'docs/a.png'"]
---
# dependencyPackageUrl's path using git url won't restore the git repo
repos:
  https://docs.com/crr-url-using-path/1:
  - files:
      docfx.yml: |
        dependencies:
          crr:
            path: https://docs.com/crr-url-using-path/2
            includeInBuild: true
  https://docs.com/crr-url-using-path/2:
  - files:
      b.md:
outputs:
  .errors.log: |
    ["error","directory-not-found","Invalid directory: 'https://docs.com/crr-url-using-path/2'."]
---
# Respect docsets.json config to search for multiple docsets
inputs:
  docsets.json: |
    {
      "docsets": ["a/**", "b/*"],
      "exclude": ["a/2/**"]
    }
  docfx.yml:
  a.md:
  a/1/docfx.yml:
  a/1/a.md:
  a/2/docfx.yml:
  a/2/a.md:
  b/docfx.yml:
  b/a.md:
  c/docfx.yml:
  c/a.md:
outputs:
  a/1/a.json:
  b/a.json:
---
# Peek .openpublishing.publish.config.json for docsets_to_publish and open_to_public_contributors
inputs:
  .openpublishing.publish.config.json: |
    {
      "docsets_to_publish": [
        { "build_source_folder": ".", "open_to_public_contributors": true },
        { "build_source_folder": "b", "open_to_public_contributors": true }
      ]
    }
  docfx.yml: |
    files: 'a.md'
  a.md:
  b/docfx.yml: |
    globalMetadata:
      open_to_public_contributors: false
  b/b.md:
  c/docfx.yml:
  c/c.md:
outputs:
  a.json: '{ "open_to_public_contributors": true }'
  b/b.json: '{ "open_to_public_contributors": false }'
---
# Peak .openpublishing.publish.config.json for multiple docsets, dependencies and themes
repos:
  https://github.com/ops1/dep#live:
  - files:
      .openpublishing.publish.config.json: |
        {
          "docsets_to_publish": [{ "build_source_folder": "articles" }],
          "dependent_repositories": [{
              "path_to_root": "_themes",
              "url": "https://github.com/ops1/template",
              "branch": "test"
            }, {
              "path_to_root": "articles/crr",
              "url": "https://github.com/ops1/crr",
              "branch_mapping": { "live": "live1" },
              "include_in_build": true
            }]
        }
      articles/docfx.yml:
      articles/a.yml: '#YamlMime:TestData'
      articles/b.md: '[!INCLUDE[](crr/token.md)]'
  https://github.com/ops1/template#test:
  - files:
      ContentTemplate/schemas/TestData.schema.json: "{}"
  https://github.com/ops1/crr#live:
  - files:
      token.md: live
  https://github.com/ops1/crr#live1:
  - files:
      token.md: live1
outputs:
  articles/a.json:
  articles/b.json: |
    { "conceptual": "<p>live1</p>" }
  articles/crr/token.json: |
    { "conceptual": "<p>live1</p>" }
---
# Throw error for OPS repos that are not provisioned
build: false
repos:
  https://github.com/ops/provision:
  - files:
      .openpublishing.publish.config.json: |
        {
           "docsets_to_publish": [{ "docset_name": "bad_name" }]
        }
      docfx.yml:
environments:
  - DOCS_OPS_TOKEN
outputs:
  .errors.log: |
    ["warning","docset-not-provisioned","*"]
---
# JSON file as resource
inputs:
  docfx.yml: |
    resource:
      files: b.json
  b.json:
outputs:
  b.json:
