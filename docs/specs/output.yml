---
# Publish manifest contains files to publish
inputs:
  docfx.yml:
  docs/a.md:
  docs/TOC.md:
  docs/folder/b~$.md:
  docs/index.md:
outputs:
  docs/a.json:
  docs/toc.json:
  docs/folder/b~$.json:
  docs/index.json:
  .publish.json: |
    {
      "files": [
        { "url": "/docs/a", "path": "docs/a.json", "source_path": "docs/a.md" },
        { "url": "/docs/folder/b~$", "path": "docs/folder/b~$.json", "source_path": "docs/folder/b~$.md" },
        { "url": "/docs/", "path": "docs/index.json", "source_path": "docs/index.md" },
        { "url": "/docs/toc.json", "path": "docs/toc.json", "source_path": "docs/TOC.md" }
      ]
    }
---
# Publish manifest contains following properties: name, product, site_base_path
inputs:
  docfx.yml: |
    hostName: docs.com
    basePath: /
outputs:
  .publish.json: |
    {
      "name": "",
      "product": "",
      "base_path": "/"
    }
---
# Publish manifest path is source relative path when copyResources is set to false
inputs:
  docfx.yml: |
    files: '**'
    copyResources: false
  a.png:
outputs:
  .publish.json: |
    {
      "files": [
        { "url": "/a.png", "path": "../inputs/a.png", "source_path": "a.png" }
      ]
    }
---
# Redirections outputs redirect_url to .publish.json, but does not have output file
inputs:
  docfx.yml:
  redirections.yml: |
    redirections:
      a.md: /b
outputs:
  .publish.json: |
    {
      "files": [{ "url": "/a", "redirect_url": "/b", "path": undefined, "source_path": "a.md", "hash": undefined }]
    }
---
# Publish manifest for articles contains custom metadata
inputs:
  docfx.yml:
  a.md: |
    ---
    ms.my: 1
    ---
outputs:
  a.json:
  .publish.json: |
    {
      "files": [{ "url": "/a", "ms.my": 1 }]
    }
---
# Manifest contains Toc dependencies
inputs:
  docfx.yml:
  docs/a.md:
  docs/TOC.md: |
    # [file reference](a.md)
outputs:
  docs/a.json:
  docs/toc.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/TOC.md":[  
             {  
                "source":"docs/a.md",
                "type":"file"
             }
          ]
       }
    }
---
# Manifest contains Inclusion dependencies
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md:
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/a.md":[  
             {  
                "source":"docs/b.md",
                "type":"include"
             }
          ]
       }
    }
---
# Manifest contains link dependencies
inputs:
  docfx.yml:
  docs/a.md: Link to [b](b.md)
  docs/b.md:
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
    {  
       "dependencies": {
          "docs/a.md": [
             { "source":"docs/b.md", "type": "file" }
          ]
       }
    }
---
# Manifest contains nested token or codesnippet dependencies
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: |
    Link to [c](c.md)
    b [!INCLUDE[](c.md)]
  docs/c.md:
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/a.md":[
             { "source":"docs/b.md", "type":"include" },
             { "source":"docs/c.md", "type":"file" },
             { "source":"docs/c.md", "type":"include" }
          ],
          "docs/b.md":[  
             { "source":"docs/c.md", "type":"file" },
             { "source":"docs/c.md", "type":"include" }
          ]
       }
    }
---
# Manifest contains nested TOC dependencies
inputs:
  docfx.yml:
  docs/TOC.md: |
    # [a](a/TOC.md)
  docs/a/TOC.md: |
    # [b](b.md)
  docs/a/b.md:
outputs:
  docs/toc.json:
  docs/a/b.json:
  .dependencymap.json: |
    {
       "dependencies": {
          "docs/TOC.md": [{ "source":"docs/a/TOC.md", "type": "include" }],
          "docs/a/TOC.md": [{ "source":"docs/a/b.md", "type": "file" }]
       }
    }
---
# Manifest inclusion circular reference
inputs:
  docfx.yml:
  docs/a.md: |
    one [!INCLUDE[](b.md)]
  docs/b.md: |
    another [!INCLUDE[](a.md)]
outputs:
  .dependencymap.json: |
    {  
       "dependencies":{
          "docs/b.md":[
             { "source":"docs/a.md", "type":"include" },
             { "source":"docs/b.md", "type":"include" }
          ],
          "docs/a.md":[
             { "source":"docs/a.md", "type":"include" },
             { "source":"docs/b.md", "type":"include" }
          ]
       }
    }
  .errors.log: |
    {"message_severity":"error","code":"circular-reference","message":"Build has identified file(s) referencing each other: 'docs/b.md' --> 'docs/a.md' --> 'docs/b.md'","file":"docs/a.md","line":1,"column":5}
    {"message_severity":"error","code":"circular-reference","message":"Build has identified file(s) referencing each other: 'docs/a.md' --> 'docs/b.md' --> 'docs/a.md'","file":"docs/b.md","line":1,"column":9}
---
# Manifest link circular reference
inputs:
  docfx.yml:
  docs/a.md: |
    Link to [b](b.md)
    # bookmark
  docs/b.md: |
    Link to [a](a.md#bookmark)
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/a.md":[  
             { "source":"docs/b.md", "type":"file" }
          ],
          "docs/b.md":[  
             { "source":"docs/a.md", "type":"file" }
          ]
       }
    }
---
# Ignores link to self, treat empty bookmark as link
inputs:
  docfx.yml:
  docs/a.md: |
    # bookmark
    Link to [a](#bookmark) and [b](b.md#)
  docs/b.md:
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
    {  
       "dependencies":{  
          "docs/a.md":[  
             { "source":"docs/b.md", "type":"file" }
          ]
       }
    }
---
# Manifest includes files with errors
inputs:
  docfx.yml: |
    customErrors:
      file-not-found: error
  docs/a.md: |
    a [](b)
outputs:
  .publish.json: |
    { "files": 
      [
        {
          "url": "/docs/a",
          "locale": "en-us",
          "has_error": true
        }
      ]
    }
  .errors.log: |
    {"message_severity":"error","code":"file-not-found","message":"Invalid file link: 'b'.","file":"docs/a.md","line":1,"column":3}
---
# inclusion chain
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b [!INCLUDE[](c.md)]
  docs/c.md: c
outputs:
  docs/a.json: |
    { "conceptual": "<p>a b c</p>" }
  docs/b.json: |
    { "conceptual": "<p>b c</p>" }
  docs/c.json: |
    { "conceptual": "<p>c</p>" }
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        { "source": "docs/c.md", "type": "include" }
      ],
      "docs/a.md": [
        { "source": "docs/b.md", "type": "include" },
        { "source": "docs/c.md", "type": "include" }
      ]
    }
   }
---
# link chain
inputs:
  docfx.yml:
  docs/a.md: a [b](b.md)
  docs/b.md: b [c](c.md)
  docs/c.md: c
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json: |
    { "conceptual": "<p>c</p>" }
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        { "source": "docs/c.md", "type": "file" }
      ],
      "docs/a.md": [
        { "source": "docs/b.md", "type": "file" }
      ]
    }
   }
---
# mixed chain a include b, b link c
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b [c](c.md)
  docs/c.md: c
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json: |
    { "conceptual": "<p>c</p>" }
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        { "source": "docs/c.md", "type": "file" }
      ],
      "docs/a.md": [
        { "source": "docs/b.md", "type": "include" },
        { "source": "docs/c.md", "type": "file" }
      ]
    }
   }
---
# mixed chain a link b, b include c
inputs:
  docfx.yml:
  docs/a.md: a [b](b.md)
  docs/b.md: b [!INCLUDE[](c.md)]
  docs/c.md: c
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json: |
    { "conceptual": "<p>c</p>" }
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        { "source": "docs/c.md", "type": "include" }
      ],
      "docs/a.md": [
        { "source": "docs/b.md", "type": "file" }
      ]
    }
   }
---
# circular chain
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b [a](a.md)
outputs:
  docs/a.json:
  docs/b.json:
  .dependencymap.json: |
   {
    "dependencies": {
      "docs/b.md": [
        { "source": "docs/a.md", "type": "file" }
      ],
      "docs/a.md": [
        { "source": "docs/a.md", "type": "file" },
        { "source": "docs/b.md", "type": "include" }
      ]
    }
   }
---
# circular chain a include b include c include d link b
inputs:
  docfx.yml:
  docs/a.md: a [!INCLUDE[](b.md)]
  docs/b.md: b [!INCLUDE[](c.md)]
  docs/c.md: c [!INCLUDE[](d.md)]
  docs/d.md: d [b](b.md)
outputs:
  docs/a.json:
  docs/b.json:
  docs/c.json:
  docs/d.json:
  .dependencymap.json: |
    {
      "dependencies": {
        "docs/d.md": [
          { "source": "docs/b.md", "type": "file"}
        ],
        "docs/c.md": [
          { "source": "docs/b.md", "type": "file"},
          { "source": "docs/d.md", "type": "include"}
        ],
        "docs/b.md": [
          { "source": "docs/b.md", "type": "file"},
          { "source": "docs/c.md", "type": "include"},
          { "source": "docs/d.md", "type": "include"}
        ],
        "docs/a.md": [
          { "source": "docs/b.md", "type": "file"},
          { "source": "docs/b.md", "type": "include"},
          { "source": "docs/c.md", "type": "include"},
          { "source": "docs/d.md", "type": "include"}
        ]
      }
    }
---
# output .links.json
repos:
  https://github.com/output-links/markdown:
  - files:
      docfx.yml: |
        monikerRange:
          'docs/v1/**': '< netcore-2.0'
          'docs/v2/**': '>= netcore-2.0'
        routes:
          docs/v1/: docs/
          docs/v2/: docs/
        monikerDefinition: monikerDefinition.json
      docs/v1/a.md: |
        ---
        uid: a
        title: netcore
        monikerRange: '> netcore-1.0'
        ---
        Moniker: netcore-1.1
      docs/v1/b.md: |
        Link to @a
        Link to [some text](../v2/c.md)
        Link to [not existed](c.md)
        Link to [absolute link](/docs/c)
        Link to [relative link with bookmark](../v2/d.md#title-1)
        Link to [absolute link with bookmark](/docs/d.md#title-1)
        Link to [empty]()
        :::image type="content" source="e.png" alt-text="Link to image":::
      docs/v1/e.png:
      docs/v2/b.md: |
        Link to @a
      docs/v2/c.md: |
        some text
      docs/v2/d.md: |
        # title 1
      docs/a/TOC.yml: |
        - name: Toc Reference
          href: ../v1/b.md
        - name: Non-existed Toc reference
          href: b.md
      docs/v1/TOC.yml: |
        - name: Toc Reference
          href: b.md
      monikerDefinition.json: |
        {
          "monikers": [
            { "moniker_name": "netcore-1.0", "product_name": ".NET Core" },
            { "moniker_name": "netcore-1.1", "product_name": ".NET Core" },
            { "moniker_name": "netcore-2.0", "product_name": ".NET Core" },
            { "moniker_name": "netcore-2.1", "product_name": ".NET Core" }
          ]
        }
outputs:
  9d4e15fd/docs/b.json:
  9d4e15fd/docs/toc.json:
  9d4e15fd/docs/e.png:
  218c13d0/docs/a.json:
  23d205a5/docs/b.json:
  23d205a5/docs/c.json:
  23d205a5/docs/d.json:
  docs/a/toc.json:
  .links.json: |
    {
      "links":[
        {"source_url":"/docs/a/toc.json","target_url":"/docs/b","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/a/TOC.yml","source_line": 2},
        {"source_url":"/docs/a/toc.json","target_url":"b.md","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/a/TOC.yml","source_line": 4},
        {"source_url":"/docs/b","source_moniker_group":"23d205a5","target_url":"/docs/a","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/v2/b.md","source_line": 1},
        {"source_url":"/docs/b","source_moniker_group":"9d4e15fd","target_url":"/docs/a","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/v1/b.md","source_line": 1},
        {"source_url":"/docs/b","source_moniker_group":"9d4e15fd","target_url":"/docs/c","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/v1/b.md","source_line": 2},
        {"source_url":"/docs/b","source_moniker_group":"9d4e15fd","target_url":"/docs/c","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/v1/b.md","source_line": 4},
        {"source_url":"/docs/b","source_moniker_group":"9d4e15fd","target_url":"/docs/d#title-1","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/v1/b.md","source_line": 5},
        {"source_url":"/docs/b","source_moniker_group":"9d4e15fd","target_url":"/docs/d.md#title-1","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/v1/b.md","source_line": 6},
        {"source_url":"/docs/b","source_moniker_group":"9d4e15fd","target_url":"/docs/e.png","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/v1/b.md","source_line": 8},
        {"source_url":"/docs/b","source_moniker_group":"9d4e15fd","target_url":"c.md","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/v1/b.md","source_line": 3},
        {"source_url":"/docs/toc.json","source_moniker_group": "9d4e15fd","target_url":"/docs/b","source_git_url":"https://github.com/output-links/markdown/blob/master/docs/v1/TOC.yml","source_line": 2}
      ]
    }
  .errors.log: |
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: 'c.md'.","file":"docs/v1/b.md","line":3,"column":9}
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: 'b.md'.","file":"docs/a/TOC.yml","line":4,"column":9}
---
# source_url is the includer for links and xrefs in markdown token
repos:
  https://github.com/inclusion-links/markdown:
  - files:
      docfx.yml: |
        exclude: token.md
      a.md: |
        [!include[](token.md)]
      b.md: |
        ---
        uid: b
        ---
        @b
      token.md: |
        [](/a-link)
        @b
outputs:
  .links.json: |
    {
      "links": [
        { "source_url": "/a", "target_url": "/a-link", "source_git_url":"https://github.com/inclusion-links/markdown/blob/master/token.md", "source_line": 1 },
        { "source_url": "/a", "target_url": "/b", "source_git_url":"https://github.com/inclusion-links/markdown/blob/master/token.md", "source_line": 2},
      ]
    }
  a.json:
  b.json:
---
# source_url should be the includer of TOC
repos:
  https://github.com/toc-inclusion/markdown:
  - files:
      docfx.yml: |
        warningsAsErrors: true
        globalMetadata:
          "breadcrumb_path": "/docs/breadcrumbs/toc.json"
      docs/breadcrumbs/TOC.yml: |
        - name: Docs
          tocHref: /
          topicHref: /
      docs/TOC.yml: |
        - name: TOC Ref
          tocHref: a/TOC.yml
        - name: link
          href: c.md
      docs/a/TOC.yml: |
        - name: Link
          href: ../b.md
        - name: Uid ref
          uid: a
      docs/a.md: |
        ---
        title: Title from yaml header a
        uid: a
        ---
      docs/b.md:
      docs/c.md:
      docs/fileWithInvalidBookmark.md: |
        [text](#invalid-bookmark)
        [c](c.md)
outputs:
  .links.json: |
    {
      "links": [
        {
          "source_url": "/docs/a",
          "target_url": "/docs/breadcrumbs/toc.json",
          "source_git_url": "https://github.com/toc-inclusion/markdown/blob/master/docfx.yml",
          "source_line": 3,
        },
        {
          "source_url": "/docs/b",
          "target_url": "/docs/breadcrumbs/toc.json",
          "source_git_url": "https://github.com/toc-inclusion/markdown/blob/master/docfx.yml",
          "source_line": 3,
        },
        {
          "source_url": "/docs/breadcrumbs/toc.json",
          "target_url": "/",
          "source_git_url": "https://github.com/toc-inclusion/markdown/blob/master/docs/breadcrumbs/TOC.yml",
          "source_line":3,
        },
        {
          "source_url": "/docs/c",
          "target_url": "/docs/breadcrumbs/toc.json",
          "source_git_url": "https://github.com/toc-inclusion/markdown/blob/master/docfx.yml",
          "source_line": 3,
        },
        {
          "source_url": "/docs/toc.json",
          "target_url": "/docs/a",
          "source_git_url": "https://github.com/toc-inclusion/markdown/blob/master/docs/a/TOC.yml",
          "source_line": 4,
        },
        {
          "source_url": "/docs/toc.json",
          "target_url": "/docs/b",
          "source_git_url": "https://github.com/toc-inclusion/markdown/blob/master/docs/a/TOC.yml",
          "source_line": 2,
        },
        {
          "source_url": "/docs/toc.json",
          "target_url": "/docs/c",
          "source_git_url": "https://github.com/toc-inclusion/markdown/blob/master/docs/TOC.yml",
          "source_line": 4,
        },
      ]
    }
  docs/a.json:
  docs/b.json:
  docs/c.json:
  docs/toc.json:
  docs/breadcrumbs/toc.json:
  .errors.log: 
---
# Raw external link in .md file
repos:
  https://github.com/raw-external/markdown:
  - files:
      docfx.yml:
      docs/a.md: |
        https://a.com/b
        <p><a href="https://b.com/a">test</a></p>
outputs:
  docs/a.json:
  .links.json: |
    {
      "links": [
          {
              "source_url": "/docs/a",
              "target_url": "https://a.com/b",
              "source_git_url": "https://github.com/raw-external/markdown/blob/master/docs/a.md",
              "source_line": 1,
          },
          {
              "source_url": "/docs/a",
              "target_url": "https://b.com/a",
              "source_git_url": "https://github.com/raw-external/markdown/blob/master/docs/a.md",
              "source_line": 2,
          }
      ]
    }
---
# Relocate error file path, git urls based on source map
repos:
  https://github.com/relocate/source-file:
    - files:
        docfx.yml: |
          sourceMap: a/sourceMap.json
        a/sourceMap.json: |
          {
            "files": 
            {
              "../a.yml": "original.xml",
              "..\\b.md": "b.original.xml",
              "..\\c.md": "original.xml",
            }
          }
        a/original.xml:
        a/b.original.xml:
        a.yml:
        b.md: '[](c.md)'
        c.md:
outputs:
  b.json: |
    {
      "conceptual": "<p><a href='c'></a></p>",
      "content_git_url": "https://github.com/relocate/source-file/blob/master/a/b.original.xml"
    }
  c.json:
  .errors.log: |
    {"message_severity":"error","code":"schema-not-found","message":"Unknown schema ''","file":"a/original.xml"}
  .dependencymap.json: |
    {"dependencies":{"a/b.original.xml":[{"source":"a/original.xml","type":"file"}]}}
  .publish.json: |
    {
      "files": [
        {"url": "/b", "source_path": "a/b.original.xml"},
        {"url": "/c", "source_path": "a/original.xml"},
      ]
    }
---
# Reference between the same original file, dependencies should be ignored
repos:
  https://github.com/relocate/source-file:
    - files:
        docfx.yml: |
          sourceMap: a/sourceMap.json
        a/sourceMap.json: |
          {
            "files": 
            {
              "../a.yml": "original.xml",
              "..\\b.md": "original.xml",
              "..\\c.md": "original.xml",
            }
          }
        a/original.xml:
        a/b.original.xml:
        a.yml:
        b.md: '[](c.md)'
        c.md:
outputs:
  b.json:
  c.json:
  .errors.log: |
    {"message_severity":"error","code":"schema-not-found","message":"Unknown schema ''","file":"a/original.xml"}
  .dependencymap.json: |
    {"dependencies":undefined}
---
# verify legacy output with source map
legacy: true
repos:
  https://github.com/relocate/source-file:
    - files:
        docfx.yml: |
          sourceMap: a/sourceMap.json
        a/sourceMap.json: |
          {
            "files": 
            {
              "../a.yml": "original.xml",
              "..\\b.md": "b.original.xml",
              "..\\c.md": "original.xml",
            }
          }
        a/original.xml:
        a/b.original.xml:
        a.yml:
        b.md: '[](c.md)'
        c.md:
outputs:
  .errors.log: |
    {"message_severity":"error","code":"schema-not-found","message":"Unknown schema ''","file":"a/original.xml"}
  b.mta.json:
  b.raw.page.json:
  c.mta.json:
  c.raw.page.json:
  op_aggregated_file_map_info.json: |
    {
      "aggregated_file_map_items": 
      {
        "a/b.original.xml": 
        {
            "dependencies": [
                {
                    "from_file_path": "a/b.original.xml",
                    "to_file_path": "a/original.xml",
                    "dependency_type": "file"
                }
            ],
        },
        "a/original.xml": { "type": "Content" }
      }
    }
  filemap.json: |
    {
      "file_mapping": 
      {
          "b.md": 
          {
              "type": "Content",
              "output_relative_path": "b.html",
              "asset_id": "b"
          },
          "c.md": 
          {
              "type": "Content",
              "output_relative_path": "c.html",
              "asset_id": "c"
          }
      }
    }
  .manifest.json: |
    {
      "files": [
        {"asset_id": "b", "original": "a/b.original.xml", "source_relative_path": "a/b.original.xml"},
        {"asset_id": "c", "original": "a/original.xml", "source_relative_path": "a/original.xml"},
      ]
    }
