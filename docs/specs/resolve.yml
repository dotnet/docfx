---
# Links to files are resolved to relative url
inputs:
  docfx.yml:
  docs/a.md: Link to [b](b.md)
  docs/b.md: Link to [a](./a.md)
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"b\">b</a></p>" }
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"a\">a</a></p>" }
---
# Preserve query and fragment for links to files
inputs:
  docfx.yml:
  docs/a.md: Link to [b](b.md#a?b=c)
  docs/b.md: Link to [a](./a.md?a=b&c=d#e)
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"b#a?b=c\">b</a></p>" }
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"a?a=b&amp;c=d#e\">a</a></p>" }
  .errors.log: |
    {"message_severity":"warning","code":"bookmark-not-found","message":"Cannot find bookmark '#e' in 'docs/a.md'","file":"docs/b.md","line":1,"column":9}
    {"message_severity":"warning","code":"bookmark-not-found","message":"Cannot find bookmark '#a?b=c' in 'docs/b.md'","file":"docs/a.md","line":1,"column":9}
---
# Links to URLs are preserved as is
inputs:
  docfx.yml:
  docs/a.md: Link to [docs](https://docs.microsoft.com)
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"https://docs.microsoft.com\">docs</a></p>" }
---
# Links to bookmarks in the same article
inputs:
  docfx.yml:
  docs/a.md: |
    ## Hello World
    Link to [bookmark](#hello-world)
  docs/b.md: |
    Link to [self](./b.md)
outputs:
  docs/a.json: |
    { 
      "rawTitle": "<h2 id=\"hello-world\">Hello World</h2>",
      "conceptual": "<p>Link to <a href=\"#hello-world\">bookmark</a></p>" 
    }
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"b\">self</a></p>" }
---
# Links to self bookmarks in the included file
inputs:
  docfx.yml: |
    files: docs/a.md
  docs/a.md: |
    # heading
    [!INCLUDE[](includes/b.md)]
    Link to [invalid self](./a.md#heading3)
  docs/includes/b.md: |
    ## test
    Link to [valid self](#test)
    Link to [valid parent](../a.md#heading)
    Link to [invalid self](#heading1)
    Link to [invalid parent](../a.md#heading2)
outputs:
  docs/a.json: |
    {
      "conceptual": "
        <h2 id=\"test\">test</h2>
        <p>Link to <a href=\"#test\">valid self</a>
        Link to <a href=\"a#heading\">valid parent</a>
        Link to <a href=\"#heading1\">invalid self</a>
        Link to <a href=\"a#heading2\">invalid parent</a></p>
        <p>Link to <a href=\"a#heading3\">invalid self</a></p>"
    }
  .errors.log: |
    {"message_severity":"warning","code":"bookmark-not-found","message":"Cannot find bookmark '#heading3' in 'docs/a.md', did you mean '#heading'?","file":"docs/a.md","line":3,"column":9}
    {"message_severity":"warning","code":"bookmark-not-found","message":"Cannot find bookmark '#heading2' in 'docs/includes/b.md', did you mean '#heading'?","file":"docs/includes/b.md","line":5,"column":9}
    {"message_severity":"warning","code":"bookmark-not-found","message":"Cannot find bookmark '#heading1' in 'docs/includes/b.md', did you mean '#heading'?","file":"docs/includes/b.md","line":4,"column":9}
---
# Links to bookmarks in index.md
inputs:
  docfx.yml:
  a.md: |
    Link to [](index.md#hello-world)
  index.md: |
    # Hello World
outputs:
  a.json: |
    {
      "conceptual": "<p>Link to <a href=\"./#hello-world\"></a></p>" 
    }
  index.json:
---
# Support both / and \ as directory separator
inputs:
  docfx.yml:
  docs/dir-a/a.md: Link to [b](..\dir-b/b.md)
  docs/dir-b/b.md: Link to [a](../dir-a\a.md)
outputs:
  docs/dir-a/a.json: |
    { "conceptual": "<p>Link to <a href=\"../dir-b/b\">b</a></p>" }
  docs/dir-b/b.json: |
    { "conceptual": "<p>Link to <a href=\"../dir-a/a\">a</a></p>" }
---
# Links in include files are resolved relative to the include file
inputs:
  docfx.yml:
  docs/a.md: Link to [!INCLUDE[](dir/b.md)]
  docs/dir/b.md: '[c](c.md)'
  docs/dir/c.md:
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"dir/c\">c</a></p>" }
  docs/dir/b.json: |
    { "conceptual": "<p><a href=\"c\">c</a></p>" }
  docs/dir/c.json:
---
# Resolve <a> and <img> tags embedded inside markdown
inputs:
  docfx.yml:
  docs/a.md: |
    <a href="">Empty string</a>
    <a href=" ">Space</a>
    Link to <a href="b.md "><em>b</em></a>
  docs/b.md: <div>Link to <img src="c.png" /></div>
  docs/c.png:
outputs:
  docs/a.json: |
    { "conceptual": "<p><a href=\"\">Empty string</a><a href=\"\">Space</a>Link to <a href=\"b\"><em>b</em></a></p>" }
  docs/b.json: |
    { "conceptual": "<div>Link to <img src=\"c.png\" /></div>" }
  docs/c.png:
---
# Html links in include files are resolved relative to the include file
inputs:
  docfx.yml:
  docs/a.md: Link to [!INCLUDE[](dir/b.md)]
  docs/dir/b.md: '<a href="c.md">c</a>'
  docs/dir/c.md:
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"dir/c\">c</a></p>" }
  docs/dir/b.json: |
    { "conceptual": "<p><a href=\"c\">c</a></p>" }
  docs/dir/c.json:
---
# Add locale for absolute links
inputs:
  docfx.yml:
  a.md: Link to [absolute path](/a)
outputs:
  a.json: |
    { "conceptual": "<p>Link to <a href=\"/en-us/a\">absolute path</a></p>" }
---
# Show warning if the link is missing
inputs:
  docfx.yml: |
    exclude: '*'
  docs/a.md: |
    [Invalid](a<>b.md) [!INCLUDE[](../b.md)]
  b.md: |
    [Missing](c.md)
outputs:
  docs/a.json: |
    { "conceptual": "<p><a href=\"a%3C%3Eb.md\">Invalid</a><a href=\"c.md\">Missing</a></p>" }
  .errors.log: |
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: 'a<>b.md'.","file":"docs/a.md","line":1,"column":1}
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: 'c.md'.","file":"b.md","line":1,"column":1}
---
# Show warning if the link points to absolute file path
inputs:
  docfx.yml:
  docs/a.md: |
    [Absolute](C:/a.md)
outputs:
  docs/a.json: |
    { "conceptual": "<p><a href=\"\">Absolute</a></p>" }
  .errors.log: |
    {"message_severity":"warning","code":"local-file-path","message":"Link 'C:/a.md' points to a local file. Use a relative path instead","file":"docs/a.md","line":1,"column":1}
---
# Show warning if two files share the same site url
inputs:
  docfx.yml:
  docs/a.png.md: '![](a.png)'
  docs/a.png:
outputs:
  docs/a.png.json:
  .errors.log: |
    {"message_severity":"warning","code":"publish-url-conflict","message":"Two or more files publish to the same url '/docs/a.png': 'docs/a.png', 'docs/a.png.md'"}
---
# Prefer relative url to file when there is a matching folder name
inputs:
  docfx.yml:
  docs/a/index.md: Link to [1](../a.md) [2](a.md)
  docs/a/a.md: Link to [index](index.md)
  docs/a.md: Link to [index](a/index.md)
outputs:
  docs/a/index.json: |
    { "conceptual": "<p>Link to <a href=\"../a\">1</a> <a href=\"a\">2</a></p>" }
  docs/a/a.json: |
    { "conceptual": "<p>Link to <a href=\"./\">index</a></p>" }
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"a/\">index</a></p>" }
---
# HTML encode special characters in path
inputs:
  docfx.yml:
  docs/a.md: Link to [b](b&/c~.md)
  docs/b&/c~.md:
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"b&amp;/c%7E\">b</a></p>" }
  docs/b&/c~.json:
---
# Files redirected to an absolute URL
inputs:
  docfx.yml:
  redirections.yml: |
    redirections:
      docs/redirect.md: /absolute/path
  docs/a.md: |
    [redirect](redirect.md?a#b)
outputs:
  docs/a.json: |
    {"conceptual":"<p><a href=\"redirect?a#b\">redirect</a></p>"}
---
# Show error if inclusion is a redirection file
inputs:
  docfx.yml: |
    redirections:
      docs/redirect.md: /absolute/path
  docs/a.md: |
    Link to [!INCLUDE[](redirect.md)]
outputs:
  .errors.log: |
    {"message_severity":"error","code":"include-not-found","message":"Cannot resolve 'redirect.md' relative to 'docs/a.md'.","file":"docs/a.md","line":1,"column":9}
---
# Show warning if redirection file conflicts with existing file
inputs:
  docfx.yml:
  redirections.yml: |
    redirections:
      docs/redirect.md: /absolute/path
  docs/redirect.md:
outputs:
  .errors.log: |
    {"message_severity":"warning","code":"publish-url-conflict","message":"Two or more files publish to the same url '/docs/redirect': 'docs/redirect.md [redirection]', 'docs/redirect.md'"}
---
# Show warning if link to a page outside build scope
inputs:
  docfx.yml: |
    exclude: '*'
  docs/a.md: 'Link to [c](../c.md)'
  docs/b.md: '[!include[](../c.md)]'
  c.md: '[](#self)'
outputs:
  docs/a.json: |
    {"conceptual":"<p>Link to <a href=\"../c.md\">c</a></p>"}
  docs/b.json: |
    {"conceptual":"<p><a href=\"#self\"></a></p>"}
  .errors.log: |
    {"message_severity":"warning","code":"link-out-of-scope","message":"File 'c.md' referenced by link '../c.md' will not be built because it is not included in build scope","file":"docs/a.md","line":1,"column":9}
    {"message_severity":"warning","code":"bookmark-not-found","message":"Cannot find bookmark '#self' in 'c.md'","file":"c.md","line":1,"column":1}
---
# Don't show warning if link to a resource outside build scope
inputs:
  docfx.yml:
  docs/a.md: '[a](../b.png)'
  b.png:
outputs:
  docs/a.json: |
    {"conceptual":"<p><a href=\"../b.png\">a</a></p>"}
  b.png:
---
# Don't show warning if include a page outside build scope
inputs:
  docfx.yml: |
    exclude: '*'
  docs/a.md: '[!include[a](../b.md)]'
  b.md: b
outputs:
  docs/a.json: |
    {"conceptual":"<p>b</p>"}
---
# Show warning if link to a file in dependency repo
repos:
  https://github.com/dep-file/root:
    - files:
        docfx.yml: |
          dependencies:
            dep: https://github.com/dep-file/dep
        docs/a.md: 'Link to [dep](../dep/logo.svg)'
  https://github.com/dep-file/dep:
    - files:
        logo.svg:
outputs:
  docs/a.json: |
    {"conceptual":"<p>Link to <a href=\"../dep/logo.svg\">dep</a></p>"}
  .errors.log: |
    {"message_severity":"warning","code":"link-out-of-scope","message":"File 'dep/logo.svg [dep]' referenced by link '../dep/logo.svg' will not be built because it is not included in build scope","file":"docs/a.md","line":1,"column":9}
---
# Show warning if link from a token in dependency repo to a file in dependency repo
repos:
  https://github.com/dep-token/root:
    - files:
        docfx.yml: |
          dependencies:
            dep: https://github.com/dep-token/dep
        a.md: '[!include[dep](~/dep/b.md)]'
  https://github.com/dep-token/dep:
    - files:
        b.md: '[](logo.svg)'
        logo.svg:
outputs:
  a.json: |
    {"conceptual":"<p><a href=\"logo.svg\"></a></p>"}
  .errors.log: |
    {"message_severity":"warning","code":"link-out-of-scope","message":"File 'dep/logo.svg [dep]' referenced by link 'logo.svg' will not be built because it is not included in build scope","file":"dep/b.md","line":1,"column":1}
---
# Cannot include entry docset file from dependency
repos:
  https://github.com/dep-token-reference-entry/root:
    - files:
        docfx.yml: |
          dependencies:
            dep: https://github.com/dep-token-reference-entry/dep
        a.md: '[!include[dep](~/dep/b.md)]'
  https://github.com/dep-token-reference-entry/dep:
    - files:
        b.md: '[](~/a.md)'
outputs:
  a.json: |
    {"conceptual":"<p><a href=\"%7E/a.md\"></a></p>"}
  .errors.log: |
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: '~/a.md'.","file":"dep/b.md","line":1,"column":1}
---
# Don't show warning if include a file from dependency repo
repos:
  https://github.com/dep-include/root:
    - files:
        docfx.yml: |
          dependencies:
            dep: https://github.com/dep-include/dep
        docs/a.md: '[!include[dep](~/dep/dep.md)]'
  https://github.com/dep-include/dep:
    - files:
        dep.md: DEP
outputs:
  docs/a.json: |
    {"conceptual":"<p>DEP</p>"}
---
# Dependency can be a file system folder
inputs:
  docfx.yml: |
    dependencies:
      dep: dependencies
  a.md: '[!include[dep](~/dep/dep.md)]'
  dependencies/dep.md: DEP
outputs:
  a.json: |
    {"conceptual":"<p>DEP</p>"}
  dependencies/dep.json:
---
# Link with `~`
inputs:
  docfx.yml:
  docs/a.md: |
    Link to [B1](~/b.md)
    Link to [B2](~/docs/b.md)
    Link to [B3](~docs/b.md)
  docs/b.md:
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"%7E/b.md\">B1</a>Link to <a href=\"b\">B2</a>Link to <a href=\"%7Edocs/b.md\">B3</a></p>" }
  docs/b.json:
  .errors.log: |
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: '~/b.md'.","file":"docs/a.md","line":1,"column":9}
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: '~docs/b.md'.","file":"docs/a.md","line":3,"column":9}
---
# Links starting with ~ are treated as path relative to docset path
inputs:
  docsets.yml:
  docs/docfx.yml:
  docs/a.md: |
    Link to [B1.1](~/b.md)
    Link to [B1.2](~////b.md)
    Link to [B3](~/docs/b.md)
    ![C](~/c.png)
  docs/b.md:
  docs/c.png:
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"b\">B1.1</a>
                        Link to <a href=\"b\">B1.2</a>
                        Link to <a href=\"%7E/docs/b.md\">B3</a>
                        <img src=\"c.png\" alt=\"C\"></p>" 
    }
  docs/b.json:
  docs/c.png:
  docs/.errors.log: |
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: '~/docs/b.md'.","file":"a.md","line":3,"column":9}
---
# Links in <a> or <img> tags starting with ~
inputs:
  docsets.yml:
  docs/docfx.yml:
  docs/a.md: |
    Link to <a href="~/b.md">b</a>
    <div>Link to <img src="~/c.png" /></div>
  docs/b.md:
  docs/c.png:
outputs:
  docs/a.json: |
    { "conceptual": "<p>Link to <a href=\"b\">b</a></p>\n<div>Link to <img src=\"c.png\"></div>\n" }
  docs/b.json:
  docs/c.png:
---
# Duplicated href attributes in HTML
inputs:
  docfx.yml:
  a.md: |
    Link to <a href="b.md" href="c.md">b</a>
outputs:
  a.json: |
    { "conceptual": "<p>Link to <a href=\"b.md\" href=\"c.md\">b</a></p>\n" }
  .errors.log: |
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: 'b.md'.","file":"a.md","line":1,"column":18}
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: 'c.md'.","file":"a.md","line":1,"column":30}
---
# Markdown inclusion using links starting with ~
inputs:
  docsets.yml:
  docs/docfx.yml:
  docs/a.md: |
    [!include[B1](~/b.md)]
    [!include[B2](~/../b.md)]
  b.md: Token
outputs:
  docs/.errors.log: |
    {"message_severity":"error","code":"include-not-found","message":"Invalid include link: '~/b.md'.","file":"a.md","line":1,"column":1}
---
# Links to self with empty href or query string only
inputs:
  docfx.yml:
  docs/a.md: |
    Link to [self]()
  docs/b.md: |
    Link to [self](?locale=en-us)
outputs:
  docs/a.json: |
    { 
      "conceptual": "<p>Link to <a href=\"\">self</a></p>" 
    }
  docs/b.json: |
    { "conceptual": "<p>Link to <a href=\"?locale=en-us\">self</a></p>" }
