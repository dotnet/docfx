---
# Draft run learn post validation
noDryRun: true
repos:
  https://github.com/learn/learn-pr:
  - files:
      .openpublishing.publish.config.json: |
        {
          "docsets_to_publish": [
          { 
            "build_source_folder": "learn-pr",
            "customized_tasks": {
              "docset_postbuild": [
                "_dependentPackages/CommonPlugins/tools/TripleCrownValidation.ps1"
              ]
            }
          }]
        }
      learn-pr/docfx.yml: |
        outputType: pageJson
outputs:
  learn-pr/hierarchy.json: |
    {
      "achievements":[],
      "invalid_items":[],
      "items":[]
    }
---
# Only run learn validation in legacy build
noDryRun: true
repos:
  https://github.com/learn/learn-pr:
  - files:
     .openpublishing.publish.config.json: |
        {
          "docsets_to_publish": [
          { 
            "build_source_folder": "learn-pr",
            "customized_tasks": {
              "docset_postbuild": [
                "_dependentPackages/CommonPlugins/tools/TripleCrownValidation.ps1"
              ]
            }
          }]
        }
     learn-pr/docfx.json: '{}'
outputs:
---
# Can generate hierarchy
noDryRun: true
repos:
  https://github.com/learn/learn-pr:
  - files:
      .openpublishing.publish.config.json: |
        {
          "docsets_to_publish": [
          { 
            "build_source_folder": ".",
            "customized_tasks": {
              "docset_postbuild": [
                "_dependentPackages/CommonPlugins/tools/TripleCrownValidation.ps1"
              ]
            }
          }]
        }
      docfx.yml: |
        outputType: pageJson
      # NOTICE: these input data are created based on real output data, for not to write too much template logic in test case
      path.yml: |
        ### YamlMime:LearningPath
        serviceData: "{\"uid\": \"learning-path\",\"achievement\":{\"uid\":\"achievement1\",\"type\":\"trophy\"},\"modules\":[\"module\"]}"
      module.yml: |
        ### YamlMime:Module
        serviceData: "{\"uid\": \"module\",\"achievement\":{\"uid\":\"achievement2\",\"type\":\"badge\"},\"units\":[\"unit\"]}"
      unit.yml: |
        ### YamlMime:ModuleUnit
        metadata:
          uid: unit
        serviceData: "{\"uid\": \"unit\",\"durationInMinutes\":3}"
      achievement.yml: |
        ### YamlMime:Achievement
        uid: achievement
      _themes/ContentTemplate/schemas/LearningPath.schema.json: '{}'
      _themes/ContentTemplate/LearningPath.html.primary.tmpl:
      _themes/ContentTemplate/schemas/Module.schema.json: '{}'
      _themes/ContentTemplate/Module.html.primary.tmpl:
      _themes/ContentTemplate/schemas/ModuleUnit.schema.json: '{}'
      _themes/ContentTemplate/ModuleUnit.html.primary.tmpl:
      _themes/ContentTemplate/schemas/Achievement.schema.json: "{\"renderType\": \"component\"}"
outputs:
  achievement.json:
  path.mta.json:
  path.raw.page.json:
  module.mta.json:
  module.raw.page.json:
  unit.mta.json:
  unit.raw.page.json:
  full-dependent-list.txt:
  hierarchy.json: |
    {
      "achievements": [{"uid": "achievement2"},{"uid": "achievement1"}],
      "invalid_items": [],
      "items":[{"asset_id":"path"},{"asset_id":"module"},{"asset_id":"unit"}]
    }
  .publish.json: |
    {
      "files":[{"source_path":"achievement.yml"},
               {"source_path":"module.yml"},
               {"source_path":"path.yml"},
               {"source_path":"unit.yml"}]
    }
---
# Can produce proper dependency type
# basic path->module; module->unit; path|module->achievement;
inputs:
  docfx.yml:
  path.yml: |
    ### YamlMime:LearningPath
    uid: path
    modules: ['module1', 'module2']
    achievement: trophy
  module1.yml: |
    ### YamlMime:Module
    uid: module1
    units: ['unit1a', 'unit1b']
    achievement: badge1
  module2.yml: |
    ### YamlMime:Module
    uid: module2
    units: ['unit2']
    achievement: badge2
  unit1a.yml: |
    ### YamlMime:ModuleUnit
    uid: unit1a
  unit1b.yml: |
    ### YamlMime:ModuleUnit
    uid: unit1b
  unit2.yml: |
    ### YamlMime:ModuleUnit
    uid: unit2
  achievement.yml: |
    ### YamlMime:Achievement
    achievements:
    - uid: trophy
    - uid: badge1
    - uid: badge2
  _themes/ContentTemplate/schemas/LearningPath.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"},
        "modules": {"items": {"contentType": "xref"}},
        "achievement": {"contentType": "xref"}
      }
    }
  _themes/ContentTemplate/schemas/Module.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"},
        "units": {"items": {"contentType": "xref" }},
        "achievement": {"contentType": "xref"}
      }
    }
  _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"}
      }
    }
  _themes/ContentTemplate/schemas/Achievement.schema.json: |
    {
      "renderType": "component",
      "properties": {
        "achievements": { 
          "items": { 
            "properties": {"uid" : {"contentType": "uid"}}
          }
        }
      }
    }
outputs:
  path.json:
  module1.json:
  module2.json:
  unit1a.json:
  unit1b.json:
  unit2.json:
  achievement.json:
  full-dependent-list.txt: |
    {"dependency_type":"achievement","from_file_path":"*module1.yml*","to_file_path":"*achievement.yml*"}
    {"dependency_type":"achievement","from_file_path":"*module2.yml*","to_file_path":"*achievement.yml*"}
    {"dependency_type":"achievement","from_file_path":"*path.yml*","to_file_path":"*achievement.yml*"}
    {"dependency_type":"hierarchy","from_file_path":"*module1.yml*","to_file_path":"*unit1a.yml*"}
    {"dependency_type":"hierarchy","from_file_path":"*module1.yml*","to_file_path":"*unit1b.yml*"}
    {"dependency_type":"hierarchy","from_file_path":"*module2.yml*","to_file_path":"*unit2.yml*"}
    {"dependency_type":"hierarchy","from_file_path":"*path.yml*","to_file_path":"*module1.yml*"}
    {"dependency_type":"hierarchy","from_file_path":"*path.yml*","to_file_path":"*module2.yml*"}
  op_aggregated_file_map_info.json: |
    {
      "aggregated_file_map_items": {
        "module1.yml": {
          "dependencies": [
            {
              "from_file_path": "module1.yml",
              "to_file_path": "achievement.yml",
              "dependency_type": "achievement"
            },
            {
              "from_file_path": "module1.yml",
              "to_file_path": "unit1a.yml",
              "dependency_type": "hierarchy"
            },
            {
              "from_file_path": "module1.yml",
              "to_file_path": "unit1b.yml",
              "dependency_type": "hierarchy"
            }
          ]
        },
        "module2.yml": {
          "dependencies": [
            {
              "from_file_path": "module2.yml",
              "to_file_path": "achievement.yml",
              "dependency_type": "achievement"
            },
            {
              "from_file_path": "module2.yml",
              "to_file_path": "unit2.yml",
              "dependency_type": "hierarchy"
            }
          ]
        },
        "path.yml": {
          "dependencies": [
            {
              "from_file_path": "path.yml",
              "to_file_path": "achievement.yml",
              "dependency_type": "achievement"
            },
            {
              "from_file_path": "path.yml",
              "to_file_path": "module1.yml",
              "dependency_type": "hierarchy"
            },
            {
              "from_file_path": "path.yml",
              "to_file_path": "module2.yml",
              "dependency_type": "hierarchy"
            }
          ]
        },
        "unit1a.yml": {},
        "unit1b.yml": {},
        "unit2.yml": {}
      }
    }
---
# Can produce proper dependency type
# fallback patha->pathb.achievement;modulea->moduleb.achievement;
inputs:
  docfx.yml:
  path.yml: |
    ### YamlMime:LearningPath
    uid: path
    modules: ['module1']
    achievement: trophy
    trophy:
      uid: trophy
  patha.yml: |
    ### YamlMime:LearningPath
    uid: patha
    modules: ['module1']
    achievement: trophy
  module1.yml: |
    ### YamlMime:Module
    uid: module1
    units: ['unit1']
    achievement: badge
    badge:
      uid: badge
  module2.yml: |
    ### YamlMime:Module
    uid: module2
    units: ['unit2']
    achievement: badge
  unit1.yml: |
    ### YamlMime:ModuleUnit
    uid: unit1
  unit2.yml: |
    ### YamlMime:ModuleUnit
    uid: unit2
  _themes/ContentTemplate/schemas/LearningPath.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"},
        "modules": {"items": {"contentType": "xref"}},
        "achievement": {"contentType": "xref"},
        "trophy": {
          "properties": {"uid" : {"contentType": "uid"}}
        }
      }
    }
  _themes/ContentTemplate/schemas/Module.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"},
        "units": {"items": {"contentType": "xref" }},
        "achievement": {"contentType": "xref"},
        "badge": {
          "properties": {"uid" : {"contentType": "uid"}}
        }
      }
    }
  _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
    {
      "properties": {
        "uid" : {"contentType": "uid"}
      }
    }
  _themes/ContentTemplate/schemas/Achievement.schema.json: |
    {
      "renderType": "component",
      "properties": {
        "achievements": { 
          "items": { 
            "properties": {"uid" : {"contentType": "uid"}}
          }
        }
      }
    }
outputs:
  path.json:
  patha.json:
  module1.json:
  module2.json:
  unit1.json:
  unit2.json:
  full-dependent-list.txt: |
    {"dependency_type":"achievement","from_file_path":"*module2.yml*","to_file_path":"*module1.yml*"}
    {"dependency_type":"achievement","from_file_path":"*patha.yml*","to_file_path":"*path.yml*"}
    {"dependency_type":"hierarchy","from_file_path":"*module1.yml*","to_file_path":"*unit1.yml*"}
    {"dependency_type":"hierarchy","from_file_path":"*module2.yml*","to_file_path":"*unit2.yml*"}
    {"dependency_type":"hierarchy","from_file_path":"*path.yml*","to_file_path":"*module1.yml*"}
    {"dependency_type":"hierarchy","from_file_path":"*patha.yml*","to_file_path":"*module1.yml*"}
  op_aggregated_file_map_info.json: |
    {
      "aggregated_file_map_items": {
        "module1.yml": {
          "dependencies": [
            {
              "from_file_path": "module1.yml",
              "to_file_path": "unit1.yml",
              "dependency_type": "hierarchy"
            }
          ]
        },
        "module2.yml": {
          "dependencies": [
            {
              "from_file_path": "module2.yml",
              "to_file_path": "module1.yml",
              "dependency_type": "achievement"
            },
            {
              "from_file_path": "module2.yml",
              "to_file_path": "unit2.yml",
              "dependency_type": "hierarchy"
            }
          ]
        },
        "path.yml": {
          "dependencies": [
            {
              "from_file_path": "path.yml",
              "to_file_path": "module1.yml",
              "dependency_type": "hierarchy"
            }
          ]
        },
        "patha.yml": {
          "dependencies": [
            {
              "from_file_path": "patha.yml",
              "to_file_path": "module1.yml",
              "dependency_type": "hierarchy"
            },
            {
              "from_file_path": "patha.yml",
              "to_file_path": "path.yml",
              "dependency_type": "achievement"
            }
          ]
        },
        "unit1.yml": {},
        "unit2.yml": {}
      }
    }
---
# error mapping for Learn Valdiation based on SDP, LearningPath
inputs:
  docfx.yml: |
    buildValidationRules: build.json
  build.json: |
    {
      "system": {
        "rules": [
          {
            "type": "MissingAttribute",
            "message": "Missing attribute: Uid. A valid Uid is required for each learning path.",
            "code": "path-uid-missing",
            "propertyPath": "uid",
            "severity": "ERROR",
            "contentTypes": ["learningpath"]
          },
          {
            "type": "MissingAttribute",
            "message": "Fake message. This rule is for `module` content.",
            "code": "path-modules-missing",
            "propertyPath": "modules",
            "severity": "ERROR",
            "contentTypes": ["module"]
          },
          {
            "type": "MissingAttribute",
            "message": "Missing attribute: modules. At least one valid module is required for each learning path.",
            "code": "path-modules-missing",
            "propertyPath": "modules",
            "severity": "ERROR",
            "contentTypes": ["learningpath"]
          },
          {
            "type": "MissingEitherAttribute",
            "message": "Missing attribute: trophy. A valid trophy is required for each learning path.",
            "code": "path-trophy-missing",
            "propertyPath": "trophy",
            "severity": "ERROR",
            "contentTypes": ["learningpath"]
          },
          {
            "type": "XrefNotFound",
            "message": "Child Uid(s): '{0}' can't be found.",
            "code": "path-child-not-found",
            "propertyPath": "modules",
            "severity": "ERROR",
            "contentTypes": ["learningpath"]
          }
        ]
      }
    }
  patha.yml: |
    #YamlMime:LearningPath
    a: a
  pathb.yml: |
    #YamlMime:LearningPath
    uid: path_b
    modules: ['module_not_found']
    trophy: {
      uid: trophy_b
    }
  _themes/ContentTemplate/schemas/LearningPath.schema.json: |
    {
      "required": ["uid", "modules"],
      "either": [["trophy", "achievement"]],
      "properties": {
        "uid": {
          "type": "string",
          "contentType": "uid"
        },
        "modules": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "contentType": "xref"
          }
        },
        "trophy": {
          "type": "object",
          "required": ["uid"],
          "properties": {
            "uid": {
              "type": "string",
              "contentType": "uid"
            }
          }
        },
        "achievement": {
          "type": "string",
          "contentType": "xref"
        }
      }
    }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"path-uid-missing","message":"Missing attribute: Uid. A valid Uid is required for each learning path.","file":"patha.yml","line":2}
    {"message_severity":"error","code":"path-modules-missing","message":"Missing attribute: modules. At least one valid module is required for each learning path.","file":"patha.yml","line":2}
    {"message_severity":"error","code":"path-trophy-missing","message":"Missing attribute: trophy. A valid trophy is required for each learning path.","file":"patha.yml","line":2}
    {"message_severity":"error","code":"path-child-not-found","message":"Child Uid(s): 'module_not_found' can't be found.","file":"pathb.yml","line":3}
---
# error mapping for Learn Valdiation based on SDP, Module
inputs:
  docfx.yml: |
    buildValidationRules: build.json
  build.json: |
    {
      "system": {
        "rules": [
          {
            "type": "MissingAttribute",
            "message": "Missing attribute: Uid. A valid Uid is required for each module.",
            "code": "module-uid-missing",
            "propertyPath": "uid",
            "severity": "ERROR",
            "contentTypes": ["module"]
          },
          {
            "type": "MissingAttribute",
            "message": "Missing attribute: units. At least one valid unit is required for each module.",
            "code": "module-units-missing",
            "propertyPath": "units",
            "severity": "ERROR",
            "contentTypes": ["module"]
          },
          {
            "type": "MissingEitherAttribute",
            "message": "Missing attribute: badge. A valid badge is required for each module.",
            "code": "module-badge-missing",
            "propertyPath": "badge",
            "severity": "ERROR",
            "contentTypes": ["module"]
          },
          {
            "type": "XrefNotFound",
            "message": "Child Uid(s): '{0}' can't be found.",
            "code": "module-child-not-found",
            "propertyPath": "units",
            "severity": "ERROR",
            "contentTypes": ["module"]
          }
        ]
      }
    }
  modulea.yml: |
    #YamlMime:Module
    a: a
  moduleb.yml: |
    #YamlMime:Module
    uid: module_b
    units: ['unit_not_found']
    badge: {
      uid: badge_b
    }
  _themes/ContentTemplate/schemas/Module.schema.json: |
    {
      "required": ["uid", "units"],
      "either": [["badge", "achievement"]],
      "properties": {
        "uid": {
          "type": "string",
          "contentType": "uid"
        },
        "units": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "contentType": "xref"
          }
        },
        "badge": {
          "type": "object",
          "required": ["uid"],
          "properties": {
            "uid": {
              "type": "string",
              "contentType": "uid"
            }
          }
        },
        "achievement": {
          "type": "string",
          "contentType": "xref"
        }
      }
    }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"module-uid-missing","message":"Missing attribute: Uid. A valid Uid is required for each module.","file":"modulea.yml","line":2}
    {"message_severity":"error","code":"module-units-missing","message":"Missing attribute: units. At least one valid unit is required for each module.","file":"modulea.yml","line":2}
    {"message_severity":"error","code":"module-badge-missing","message":"Missing attribute: badge. A valid badge is required for each module.","file":"modulea.yml","line":2}
    {"message_severity":"error","code":"module-child-not-found","message":"Child Uid(s): 'unit_not_found' can't be found.","file":"moduleb.yml","line":3}
---
# error mapping for Learn Valdiation based on SDP, ModuleUnit
inputs:
  docfx.yml: |
    buildValidationRules: build.json
  build.json: |
    {
      "system": {
        "rules": [
          {
            "type": "MissingAttribute",
            "message": "Missing attribute: Uid. A valid Uid is required for each unit.",
            "code": "unit-uid-missing",
            "propertyPath": "uid",
            "severity": "ERROR",
            "contentTypes": ["moduleunit"]
          },
          {
            "type": "MissingAttribute",
            "message": "Missing attribute: durationInMinutes. DurationInMinutes is required for each unit and must be greater than 0.",
            "code": "unit-duration-missing",
            "propertyPath": "durationInMinutes",
            "severity": "ERROR",
            "contentTypes": ["moduleunit"]
          },
          {
            "type": "PrecludedAttributes",
            "message": "Unit can't have both quiz and task.",
            "code": "unit-task-and-quiz",
            "propertyPath": "quiz",
            "severity": "ERROR",
            "contentTypes": ["moduleunit"]
          }
        ]
      }
    }
  unita.yml: |
    #YamlMime:ModuleUnit
    a: a
  unitb.yml: |
    #YamlMime:ModuleUnit
    uid: unit_a
    durationInMinutes: 10
    quiz: quiz_a
    tasks: quiz_b
  _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
    {
      "required": ["uid", "durationInMinutes"],
      "precludes": [["quiz", "tasks"]],
      "properties": {
        "uid": {
          "type": "string",
          "contentType": "uid"
        },
        "durationInMinutes": {
          "type": "number"
        },
        "quiz": {
          "type": "string",
        },
        "tasks": {
          "type": "string",
        }
      }
    }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"unit-uid-missing","message":"Missing attribute: Uid. A valid Uid is required for each unit.","file":"unita.yml","line":2}
    {"message_severity":"error","code":"unit-duration-missing","message":"Missing attribute: durationInMinutes. DurationInMinutes is required for each unit and must be greater than 0.","file":"unita.yml","line":2}
    {"message_severity":"error","code":"unit-task-and-quiz","message":"Unit can't have both quiz and task.","file":"unitb.yml","line":2}
---
# validate learn included markdown
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
    exclude:
      - includes/**
  rules.json: |
    {
      "images": {
        "name": "Images",
        "rules": [
          {
            "type": "ImageAltTextBadLength",
            "message": "Alt text {0} is out of range at {1} characters. Alt text must be between {2} and {3} characters.",
            "contentTypes": ["moduleunit"],
            "severity": "SUGGESTION",
            "code": "alt-text-bad-length",
            "disabled": false,
            "minalttextlength": 41,
            "maxalttextlength": 60,
            "pullRequestOnly": false
          }
        ]
      }
    }
  a.yml: |
    ### YamlMime:ModuleUnit
    uid: learn.aks-workshop.b
    title: Exercise - Deploy the ratings API
    content: |
      [!include[](includes/b.md)]
  includes/b.md: |
    # include File
    :::image type="content" source="../media/05-aks-clusterip.png" border="false" alt-text="Diagram":::
  _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
    {
      "type": "object",
      "properties": {
        "content": {
          "tags": ["localizable"],
          "type": "string",
          "contentType": "markdown"
        },
      }
    }
  _themes/ContentTemplate/ModuleUnit.html.primary.tmpl: |
    <h2 id="{{heading}}"></h2>{{{description}}}
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"suggestion","code":"alt-text-bad-length","message":"Alt text 'Diagram' is out of range at 7 characters. Alt text must be between 41 and 60 characters.","file":"includes/b.md","line":2,"column":1}
    {"message_severity":"warning","code":"file-not-found","message":"Invalid file link: '../media/05-aks-clusterip.png'.","file":"includes/b.md","line":2,"column":1}
---
# Test: duplicate-uid, path-uid-missing
# same as: duplicate-uid, duplicate-uid-global of module and unit, module-uid-missing
# SDP validation to implement Learn Validation 
repos:
  https://github.com/learn/learn-pr:
  - files:
      .openpublishing.publish.config.json: |
        {
          "docsets_to_publish": [
          { 
            "build_source_folder": ".",
            "customized_tasks": {
              "docset_postbuild": [
                "_dependentPackages/CommonPlugins/tools/TripleCrownValidation.ps1"
              ]
            }
          }]
        }
      docfx.yml: |
        buildValidationRules: build.json
      build.json: |
        {
          "system": {
            "rules": [
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: Uid. A valid Uid is required for each learning path.",
                "code": "path-uid-missing",
                "propertyPath": "uid",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: modules. At least one valid module is required for each learning path.",
                "code": "path-modules-missing",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "MissingEitherAttribute",
                "message": "Missing attribute: trophy. A valid trophy is required for each learning path.",
                "code": "path-trophy-missing",
                "propertyPath": "trophy",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "XrefNotFound",
                "message": "Child Uid(s): '{0}' can't be found.",
                "code": "path-child-not-found",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              }
            ]
          }
        }
      path-a.yml: |
        ### YamlMime:LearningPath
        uid: path-a
      path-b.yml: |
        ### YamlMime:LearningPath
        uid: path-a
      path-d.yml: |
        ### YamlMime:LearningPath
      _themes/ContentTemplate/schemas/LearningPath.schema.json: |
        {
          "required": ["uid"],
          "properties": {
            "uid": { "contentType": "uid"}
          }
        }
outputs:
  .errors.log: |
    {"message_severity":"error","code":"duplicate-uid","message":"UID 'path-a' is duplicated in 'path-a.yml(2,6)', 'path-b.yml(2,6)'.","file":"path-a.yml","line":2}
    {"message_severity":"error","code":"duplicate-uid","message":"UID 'path-a' is duplicated in 'path-a.yml(2,6)', 'path-b.yml(2,6)'.","file":"path-b.yml","line":2}
    {"message_severity":"error","code":"path-uid-missing","message":"Missing attribute: Uid. A valid Uid is required for each learning path.","file":"path-d.yml","line":0}
---
# Test: path-modules-missing, path-child-not-found, path-child-not-module
# same as: module-units-missing, module-child-not-found, module-child-not-unit
# SDP validation to implement Learn Validation 
repos:
  https://github.com/learn/learn-pr:
  - files:
      .openpublishing.publish.config.json: |
        {
          "docsets_to_publish": [
          { 
            "build_source_folder": ".",
            "customized_tasks": {
              "docset_postbuild": [
                "_dependentPackages/CommonPlugins/tools/TripleCrownValidation.ps1"
              ]
            }
          }]
        }
      docfx.yml: |
        xref:
        - 1.xrefmap.json
        buildValidationRules: build.json
      build.json: |
        {
          "system": {
            "rules": [
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: Uid. A valid Uid is required for each learning path.",
                "code": "path-uid-missing",
                "propertyPath": "uid",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: modules. At least one valid module is required for each learning path.",
                "code": "path-modules-missing",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "MissingEitherAttribute",
                "message": "Missing attribute: trophy. A valid trophy is required for each learning path.",
                "code": "path-trophy-missing",
                "propertyPath": "trophy",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "XrefNotFound",
                "message": "Child Uid(s): '{0}' can't be found.",
                "code": "path-child-not-found",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "xref-type-invalid",
                "message": "Invalid child Uid(s): '{0}'. A learning path can only have module as children.",
                "code": "path-child-not-module",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "ArrayLengthInvalid",
                "message": "Missing attribute: modules. At least one valid module is required for each learning path.",
                "code": "path-modules-missing",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              }
            ]
          }
        }
      1.xrefmap.json: |
        {
          "repository_url": "a_repo",
          "references":[{
              "uid": "external-path-a",
              "schemaType": "LearningPath"
          }]
        }  
      path-a.yml: |
        ### YamlMime:LearningPath
      path-b.yml: |
        ### YamlMime:LearningPath
        modules: []
      path-c.yml: |
        ### YamlMime:LearningPath
        modules: ["module-nofound"]
      path-d.yml: |
        ### YamlMime:LearningPath
        modules: ["unit-a", "external-path-a"]
      unit-a.yml: |
        ### YamlMime:ModuleUnit
        uid: unit-a
      _themes/ContentTemplate/schemas/LearningPath.schema.json: |
        {
          "required": ["modules"],
          "properties": {
            "modules": {
              "type": "array",
              "minItems": 1,
              "items": {
                "contentType": "xref",
                "xrefType": "Module"
              }
            }
          }
        }
      _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
        {
          "properties": {"uid": {"contentType": "uid"}}
        }
outputs:
  unit-a.json:
  .errors.log: |
    {"message_severity":"error","code":"path-child-not-found","message":"Child Uid(s): 'module-nofound' can't be found.","file":"path-c.yml","line":2}
    {"message_severity":"error","code":"path-child-not-module","message":"Invalid child Uid(s): 'external-path-a'. A learning path can only have module as children.","file":"path-d.yml","line":2}
    {"message_severity":"error","code":"path-child-not-module","message":"Invalid child Uid(s): 'unit-a'. A learning path can only have module as children.","file":"path-d.yml","line":2}
    {"message_severity":"error","code":"path-modules-missing","message":"Missing attribute: modules. At least one valid module is required for each learning path.","file":"path-b.yml","line":2}
    {"message_severity":"error","code":"path-modules-missing","message":"Missing attribute: modules. At least one valid module is required for each learning path.","file":"path-a.yml","line":0}
---
# Test: path-trophy-missing, path-achievement-not-found, path-achievement-not-trophy
# same as: module-badge-missing, module-achievement-not-found, module-achievement-not-badge
# SDP validation to implement Learn Validation 
noSingleFile: true
repos:
  https://github.com/learn/learn-pr:
  - files:
      .openpublishing.publish.config.json: |
        {
          "docsets_to_publish": [
          { 
            "build_source_folder": ".",
            "customized_tasks": {
              "docset_postbuild": [
                "_dependentPackages/CommonPlugins/tools/TripleCrownValidation.ps1"
              ]
            }
          }]
        }
      docfx.yml: |
        buildValidationRules: build.json
      build.json: |
        {
          "system": {
            "rules": [
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: Uid. A valid Uid is required for each learning path.",
                "code": "path-uid-missing",
                "propertyPath": "uid",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: modules. At least one valid module is required for each learning path.",
                "code": "path-modules-missing",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "MissingEitherAttribute",
                "message": "Missing attribute: trophy. A valid trophy is required for each learning path.",
                "code": "path-trophy-missing",
                "propertyPath": "trophy",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "XrefNotFound",
                "message": "Child Uid(s): '{0}' can't be found.",
                "code": "path-child-not-found",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "XrefNotFound",
                "message": "Achievement Uid '{0}' can't be found.",
                "code": "path-achievement-not-found",
                "propertyPath": "achievement",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "xref-type-invalid",
                "message": "Uid '{0}' is not a trophy. A learning path can only have trophy as achievement.",
                "code": "path-achievement-not-trophy",
                "propertyPath": "achievement",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "ArrayLengthInvalid",
                "message": "Missing attribute: modules. At least one valid module is required for each learning path.",
                "code": "path-modules-missing",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              }
            ]
          }
        }
      path-a.yml: |
        ### YamlMime:LearningPath
      path-b.yml: |
        ### YamlMime:LearningPath
        trophy:
          uid: define-trophy
      path-c.yml: |
        ### YamlMime:LearningPath
        achievement: trophy-a
      path-d.yml: |
        ### YamlMime:LearningPath
        achievement: badge-a
      path-e.yml: |
        ### YamlMime:LearningPath
        achievement: trophy-nofound
      achieve-a.yml: |
        ### YamlMime:Achievements
        achievements:
        - uid: trophy-a
          type: trophy
        - uid: badge-a
          type: badge
      _themes/ContentTemplate/schemas/LearningPath.schema.json: |
        {
          "either": [["trophy", "achievement"]],
          "properties": {
            "trophy": { "properties": { "uid": {"contentType": "uid"}}},
            "achievement": {
              "contentType": "xref",
              "xrefType": "trophy"
            }
          }
        }
      _themes/ContentTemplate/schemas/Achievements.schema.json: |
        {
          "properties": {
            "achievements": {
                "type": "array",
                "items": {
                  "properties": {
                    "uid": {"type": "string", "contentType": "uid"},
                    "type": {"type": "string", "enum": ["trophy", "badge"]}
                  },
                  "schemaTypeProperty": "type"
                }
            }
          }
        }
outputs:
  path-b.json:
  path-c.json:
  achieve-a.json:
  .errors.log: |
    {"message_severity":"error","code":"path-achievement-not-found","message":"Achievement Uid 'trophy-nofound' can't be found.","file":"path-e.yml","line":2}
    {"message_severity":"error","code":"path-achievement-not-trophy","message":"Uid 'badge-a' is not a trophy. A learning path can only have trophy as achievement.","file":"path-d.yml","line":2}
    {"message_severity":"error","code":"path-trophy-missing","message":"Missing attribute: trophy. A valid trophy is required for each learning path.","file":"path-a.yml","line":0}
---
# Test: unit-duration-missing, unit-multiple-parents, unit-no-module-parent, uid-not-found
# SDP validation to implement Learn Validation 
noSingleFile: true
repos:
  https://github.com/learn/learn-pr:
  - files:
      .openpublishing.publish.config.json: |
        {
          "docsets_to_publish": [
          { 
            "build_source_folder": ".",
            "customized_tasks": {
              "docset_postbuild": [
                "_dependentPackages/CommonPlugins/tools/TripleCrownValidation.ps1"
              ]
            }
          }]
        }
      docfx.yml: |
        name: learn-pr
        buildValidationRules: build.json
        xref:
        - 1.xrefmap.json
      1.xrefmap.json: |
        {
          "repository_url": "https://github.com/learn/learn-pr2",
          "docset_name": "docset_b",
          "external_xrefs":[
            {"uid": "nofound",
              "docsetName": "learn-pr",
              "schemaType": "module",
              "count": 1}
          ]
        }
      build.json: |
        {
          "system": {
            "rules": [
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: Uid. A valid Uid is required for each learning path.",
                "code": "path-uid-missing",
                "propertyPath": "uid",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: modules. At least one valid module is required for each learning path.",
                "code": "path-modules-missing",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "MissingEitherAttribute",
                "message": "Missing attribute: trophy. A valid trophy is required for each learning path.",
                "code": "path-trophy-missing",
                "propertyPath": "trophy",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "XrefNotFound",
                "message": "Child Uid(s): '{0}' can't be found.",
                "code": "path-child-not-found",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "XrefNotFound",
                "message": "Achievement Uid '{0}' can't be found.",
                "code": "path-achievement-not-found",
                "propertyPath": "achievement",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "xref-type-invalid",
                "message": "Uid '{0}' is not a trophy. A learning path can only have trophy as achievement.",
                "code": "path-achievement-not-trophy",
                "propertyPath": "achievement",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "ArrayLengthInvalid",
                "message": "Missing attribute: modules. At least one valid module is required for each learning path.",
                "code": "path-modules-missing",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: Uid. A valid Uid is required for each unit.",
                "code": "unit-uid-missing",
                "propertyPath": "uid",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "MissingAttribute",
                "message": "Missing attribute: durationInMinutes. DurationInMinutes is required for each unit and must be greater than 0.",
                "code": "unit-duration-missing",
                "propertyPath": "durationInMinutes",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "PrecludedAttributes",
                "message": "Unit can't have both quiz and task.",
                "code": "unit-task-and-quiz",
                "propertyPath": "quiz",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "MaxReferenceCountInvalid",
                "message": "Unit '{0}' can't have two or more parents ({3}).",
                "code": "unit-multiple-parents",
                "propertyPath": "uid",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "MinReferenceCountInvalid",
                "message": "Unit '{0}' must belong to a valid module.",
                "code": "unit-no-module-parent",
                "propertyPath": "uid",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "NumberInvalid",
                "message": "Missing attribute: durationInMinutes. DurationInMinutes is required for each unit and must be greater than 0.",
                "code": "unit-duration-missing",
                "propertyPath": "durationInMinutes",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              }
            ]
          }
        }
      module-a.yml: |
        ### YamlMime:Module
        units: ["unit-b", "unit-c"]
      module-b.yml: |
        ### YamlMime:Module
        units: ["unit-c"]
      unit-a.yml: |
        ### YamlMime:ModuleUnit
        uid: unit-a
      unit-b.yml: |
        ### YamlMime:ModuleUnit
        uid: unit-b
        durationInMinutes: 0
      unit-c.yml: |
        ### YamlMime:ModuleUnit
        uid: unit-c
        durationInMinutes: 5
      _themes/ContentTemplate/schemas/Module.schema.json: |
        {
          "properties": {
            "units": { "type": "array", "items": { "contentType": "xref" }}
          }
        }
      _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
        {
          "required": ["durationInMinutes"],
          "properties": {
            "durationInMinutes": {
              "type": "number",
              "minimum": 1
            },
            "uid": {
              "type": "string",
              "contentType": "uid",
              "maxReferenceCount": 1,
              "minReferenceCount": 1
            }
          }
        }
outputs:
  module-a.json:
  module-b.json:
  unit-c.json:
  .errors.log: |
    {"message_severity":"error","code":"unit-duration-missing","message":"Missing attribute: durationInMinutes. DurationInMinutes is required for each unit and must be greater than 0.","file":"unit-a.yml","line":2}
    {"message_severity":"error","code":"unit-duration-missing","message":"Missing attribute: durationInMinutes. DurationInMinutes is required for each unit and must be greater than 0.","file":"unit-b.yml","line":3}
    {"message_severity":"error","code":"unit-multiple-parents","message":"Unit 'unit-c' can't have two or more parents ('module-a.yml(2,19)', 'module-b.yml(2,9)').","file":"unit-c.yml","line":2}
    {"message_severity":"error","code":"unit-no-module-parent","message":"Unit 'unit-a' must belong to a valid module.","file":"unit-a.yml","line":2}
    {"message_severity":"error","code":"uid-not-found","message":"UID 'nofound' with type 'module' not found, which is referenced by repository 'https://github.com/learn/learn-pr2'.","line": 0}
---
# Test: unit-task-and-quiz, task-type-invalid, tasks-format-invalid, quiz-no-answer, quiz-multiple-answers
# SDP validation to implement Learn Validation 
repos:
  https://github.com/learn/learn-pr:
  - files:
      .openpublishing.publish.config.json: |
        {
          "docsets_to_publish": [
          { 
            "build_source_folder": ".",
            "customized_tasks": {
              "docset_postbuild": [
                "_dependentPackages/CommonPlugins/tools/TripleCrownValidation.ps1"
              ]
            }
          }]
        }
      docfx.yml: |
        buildValidationRules: build.json
      build.json: |
        {
          "system": {
            "rules": [
              {
                "type": "ArrayMaxCheckInvalid",
                "message": "Question must have one correct answer.",
                "code": "quiz-multiple-answers",
                "propertyPath": "quiz.questions.choices",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "ArrayMinCheckInvalid",
                "message": "Question must have one correct answer.",
                "code": "quiz-no-answer",
                "propertyPath": "quiz.questions.choices",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "FormatInvalid",
                "message": "Task has invalid Azure resource type '{0}'. Type must be formatted as '*/*' when name is specified.",
                "code": "tasks-format-invalid",
                "propertyPath": "tasks.azure.resource.type",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "InvalidValue",
                "message": "Task has invalid Azure resource type: '{1}'.",
                "code": "task-type-invalid",
                "propertyPath": "tasks.azure.resource.type",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "PrecludedAttributes",
                "message": "Unit can't have both quiz and task.",
                "code": "unit-task-and-quiz",
                "propertyPath": "quiz",
                "severity": "ERROR",
                "contentTypes": ["moduleunit"]
              },
              {
                "type": "XrefNotFound",
                "message": "Child Uid(s): '{0}' can't be found.",
                "code": "path-child-not-found",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "XrefNotFound",
                "message": "Achievement Uid '{0}' can't be found.",
                "code": "path-achievement-not-found",
                "propertyPath": "achievement",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "xref-type-invalid",
                "message": "Uid '{0}' is not a trophy. A learning path can only have trophy as achievement.",
                "code": "path-achievement-not-trophy",
                "propertyPath": "achievement",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              },
              {
                "type": "ArrayLengthInvalid",
                "message": "Missing attribute: modules. At least one valid module is required for each learning path.",
                "code": "path-modules-missing",
                "propertyPath": "modules",
                "severity": "ERROR",
                "contentTypes": ["learningpath"]
              }
            ]
          }
        }
      unit-a.yml: |
        ### YamlMime:ModuleUnit
      unit-b.yml: |
        ### YamlMime:ModuleUnit
        tasks:
        - azure:
            resource:
              type: a/1
        quiz:
          questions:
          - choices:
            - content: a
              isCorrect: true
            - content: b
              isCorrect: false
      unit-c.yml: |
        ### YamlMime:ModuleUnit
        tasks:
        - azure:
            resource:
              type: a/1/1
      unit-d.yml: |
        ### YamlMime:ModuleUnit
        tasks:
        - azure:
            resource:
              type: c/1
      unit-e.yml: |
        ### YamlMime:ModuleUnit
        quiz:
          questions:
          - choices:
            - content: a
              isCorrect: true
            - content: b
              isCorrect: true
      unit-f.yml: |
        ### YamlMime:ModuleUnit
        quiz:
          questions:
          - choices:
            - content: a
              isCorrect: false
            - content: b
              isCorrect: false
      _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
        {
          "precludes": [["quiz", "tasks"]],
          "properties": {
            "quiz": { "$ref": "#/definitions/quiz" },
            "tasks": { "$ref": "#/definitions/tasks" }
          },
          "definitions": {
            "quiz": {
              "type": "object",
              "properties": {
                "questions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "choices": { 
                        "type": "array",
                        "minItemsWhen": [{"value": 1, "condition": {"properties": {"isCorrect": {"const": true}}}}],
                        "maxItemsWhen": [{"value": 1, "condition": {"properties": {"isCorrect": {"const": true}}}}],
                        "items": { 
                          "type": "object", 
                          "properties": { "isCorrect": { "type": "boolean" }}}
                        }
                    }
                  }
                }
              }
            },
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "azure": {
                    "type": "object",
                    "properties": {
                      "resource": {
                        "type": "object",
                        "properties": {
                          "type": {"type": "string", "enum": ["a/1", "a/2", "a/1/1", "a/1/2"], "pattern": "^[\\w\\.]*\\/[\\w\\.]*$"}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
outputs:
  unit-a.json:
  .errors.log: |
    {"message_severity":"error","code":"quiz-multiple-answers","message":"Question must have one correct answer.","file":"unit-e.yml","line":5}
    {"message_severity":"error","code":"quiz-no-answer","message":"Question must have one correct answer.","file":"unit-f.yml","line":5}
    {"message_severity":"error","code":"tasks-format-invalid","message":"Task has invalid Azure resource type 'a/1/1'. Type must be formatted as '*/*' when name is specified.","file":"unit-c.yml","line":5}
    {"message_severity":"error","code":"task-type-invalid","message":"Task has invalid Azure resource type: 'c/1'.","file":"unit-d.yml","line":5}
    {"message_severity":"error","code":"unit-task-and-quiz","message":"Unit can't have both quiz and task.","file":"unit-b.yml","line":2}
---
# Special case for learn Achievements
# TODO: remove when schema exported 
inputs:
  docfx.yml: |
    outputType: pageJson
  a.yml: |
    #YamlMime:Achievements
    key: value
  _themes/ContentTemplate/schemas/Achievements.schema.json: '{"renderType": "component"}'
outputs:
  a.json:
  .publish.json: |
    {
      "files": [
        {
          "url": "/a.json",
          "page_type": "learn",
          "page_kind": "achievements"
        }
      ]
    }
---
# Pick uid by commit time latest when conflict for learn docset
noDryRun: true
repos:
  https://github.com/learn/learn-pr:
  - time: 10/30/2019 12:00:00
    files:
      docfx.yml: |
        isLearn: true
        outputType: pageJson
      path.yml: |
        ### YamlMime:LearningPath
        uid: path
        modules: ['module']
      a-module.yml: |
        ### YamlMime:Module
        uid: module
        units: ['unit']
      a-unit.yml: |
        ### YamlMime:ModuleUnit
        uid: unit
      b-module.yml: |
        ### YamlMime:Module
        uid: module
        units: ['unit']
      b-unit.yml: |
        ### YamlMime:ModuleUnit
        uid: unit
      c-module.yml: |
        ### YamlMime:Module
        uid: module-c
        units: ['unit']
      _themes/ContentTemplate/LearningPath.html.primary.tmpl:
      _themes/ContentTemplate/schemas/LearningPath.schema.json: |
        {
          "properties": {
            "uid" : {"contentType": "uid"},
            "modules": {"items": {"contentType": "xref"}},
          }
        }
      _themes/ContentTemplate/Module.html.primary.tmpl:
      _themes/ContentTemplate/schemas/Module.schema.json: |
        {
          "properties": {
            "uid" : {"contentType": "uid"},
            "units": {"items": {"contentType": "xref" }},
          }
        }
      _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
        {
          "properties": {
            "uid" : {"contentType": "uid"}
          }
        }
  - time: 10/30/2018 12:00:00
    files:
      a-module.yml: |
        ### YamlMime:Module
        uid: module
        units: ['unit']
      a-unit.yml: |
        ### YamlMime:ModuleUnit
        uid: unit
outputs:
  path.mta.json:
  path.raw.page.json:
  c-module.mta.json:
  c-module.raw.page.json:
  full-dependent-list.txt:
  .errors.log: |
    {"message_severity":"error","code":"duplicate-uid","message":"UID 'unit' is duplicated in 'a-unit.yml(2,6)', 'b-unit.yml(2,6)'.","file":"a-unit.yml"}
    {"message_severity":"error","code":"duplicate-uid","message":"UID 'unit' is duplicated in 'a-unit.yml(2,6)', 'b-unit.yml(2,6)'.","file":"b-unit.yml"}
    {"message_severity":"error","code":"duplicate-uid","message":"UID 'module' is duplicated in 'a-module.yml(2,6)', 'b-module.yml(2,6)'.","file":"a-module.yml"}
    {"message_severity":"error","code":"duplicate-uid","message":"UID 'module' is duplicated in 'a-module.yml(2,6)', 'b-module.yml(2,6)'.","file":"b-module.yml"}
  op_aggregated_file_map_info.json: |
    {
      "aggregated_file_map_items": {
        "path.yml": {
          "dependencies": [
            {
              "from_file_path": "path.yml",
              "to_file_path": "b-module.yml",
              "dependency_type": "hierarchy"
            }
          ]
        },
        "c-module.yml": {
          "dependencies": [
            {
              "from_file_path": "c-module.yml",
              "to_file_path": "b-unit.yml",
              "dependency_type": "hierarchy"
            }
          ]
        }
      }
    }
---
# Validate if jupyter notebook points to insecure link
inputs:
  docfx.yml: |
    markdownValidationRules: rules.json
  rules.json: |
    {
      "links": {
        "rules": [
          {
            "type": "SecureLinks",
            "message": "Link '{0}' is insecure. Links to Microsoft sites must use 'https' instead of 'http'.",
            "code": "insecure-link",
            "severity": "WARNING",
            "contentTypes": ["moduleunit"],
            "domains": [
              "microsoft.com",
              "office.com",
              "msdn.com",
              "aka.ms",
              "visualstudio.com",
              "azure.com",
              "technet.com",
              "githubusercontent.com"
            ]
          }
        ]
      }
    }
  _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
    {
      "properties": {
        "notebook" : {"type": "string", "contentType": "Href"}
      }
    }
  a.yml: |
    ### YamlMime:ModuleUnit
    notebook: http://raw.githubusercontent.com/test.ipynb
outputs:
  a.json:
  .errors.log: |
    {"message_severity":"warning","code":"insecure-link","message":"Link 'http://raw.githubusercontent.com/test.ipynb' is insecure. Links to Microsoft sites must use 'https' instead of 'http'.","file":"a.yml","line":2,"end_line":2,"column":11,"end_column":54}
---
# Validate if jupyter notebook key missing paired attribute sandbox, or notebook and tasks coexist
inputs:
  docfx.yml: 
  _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
    {
      "properties": {
        "notebook" : {"type": "string", "contentType": "Href"},
        "sandbox": {"type": "boolean"}
      },
      "dependentSchemas": {
        "notebook": {
          "required": ["sandbox"],
          "precludes": [["notebook", "tasks"]]
        }
      }
    }
  a.yml: |
    ### YamlMime:ModuleUnit
    notebook: https://raw.githubusercontent.com/test.ipynb
    tasks: task_a
outputs:
  .errors.log: |
    {"message_severity":"error","code":"missing-attribute","message":"Missing required attribute: 'sandbox'.","file":"a.yml","line":2,"end_line":2,"column":1,"end_column":1}
    {"message_severity":"error","code":"precluded-attributes","message": "Only one of the following attributes can exist: 'notebook', 'tasks'.","file":"a.yml","line":2,"end_line":2,"column":1,"end_column":1}
---
# Validate if sandbox value set to true when jupyter notebook is present
inputs:
  docfx.yml: 
  _themes/ContentTemplate/schemas/ModuleUnit.schema.json: |
    {
      "properties": {
        "notebook" : {"type": "string", "contentType": "Href"},
        "sandbox": {"type": "boolean"}
      },
      "dependentSchemas": {
        "notebook": {
          "properties": { "sandbox": { "enum": [true] } },
        }
      }
    }
  a.yml: |
    ### YamlMime:ModuleUnit
    notebook: https://raw.githubusercontent.com/test.ipynb
    sandbox: false
outputs:
  .errors.log: |
    {"message_severity":"error","code":"invalid-value","message":"Invalid value for 'sandbox': 'False'.","file":"a.yml","line":3,"end_line":3,"column":10,"end_column":15}
