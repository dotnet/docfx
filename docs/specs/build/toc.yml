---
# Normal file reference
inputs:
  docfx.yml:
  index.md:
  docs/toc.md: |
    # [Index Reference](index.md)
    ## Existing File Reference
    ### [Reference Normal File 1](n1.md)
    ### [Reference Normal File 2](../index.md)
    ### [Reference Normal File 3](f1/n1.md?branch=master#row=4)
    ### [Reference Normal File 4](~/docs/n1.md)
  docs/index.md:
  docs/n1.md:
  docs/f1/n1.md:
outputs:
  docs/index.json:
  docs/n1.json:
  docs/f1/n1.json:
  docs/toc.json: |
    {  
      "items":[  
          {  
            "children":[  
                {  
                  "children":[  
                      {  
                        "toc_title":"Reference Normal File 1",
                        "href":"n1"
                      },
                      {  
                        "toc_title":"Reference Normal File 2",
                        "href":"../"
                      },
                      {  
                        "toc_title":"Reference Normal File 3",
                        "href":"f1/n1#row=4?branch=master"
                      },
                      {  
                        "toc_title":"Reference Normal File 4",
                        "href":"n1"
                      }
                  ],
                  "toc_title":"Existing File Reference"
                }
            ],
            "toc_title":"Index Reference",
            "href":"."
          }
      ]
    }
  build.manifest:
---
# No-existing file reference
inputs:
  docfx.yml:
  docs/index.md:
  docs/toc.md: |
    # [Index Reference](index.md)
    ## No Existing File Reference
    ### [Reference No-Existing File 1](no-existing.md)
    ### [Reference No-Existing File 2](no-existing.system.md)
    ### [Reference No-Existing File 3](../no-existing.md)
    ### [Reference No-Existing File 4](~/docs/no-existing.md)
outputs:
  docs/index.json:
  docs/toc.json: |
    {  
      "items":[  
          {  
            "children":[  
                {  
                  "children":[  
                      {  
                        "toc_title":"Reference No-Existing File 1",
                        "href":"no-existing.md"
                      },
                      {  
                        "toc_title":"Reference No-Existing File 2",
                        "href":"no-existing.system.md"
                      },
                      {  
                        "toc_title":"Reference No-Existing File 3",
                        "href":"../no-existing.md"
                      },
                      {  
                        "toc_title":"Reference No-Existing File 4",
                        "href":"~/docs/no-existing.md"
                      }
                  ],
                  "toc_title":"No Existing File Reference"
                }
            ],
            "toc_title":"Index Reference",
            "href":"."
          }
      ]
    }
  build.manifest:
---
# Absolute file reference
inputs:
  docfx.yml:
  docs/index.md:
  docs/toc.md: |
    # [Index Reference](index.md)
    ## Absolute File Reference
    ### [Reference Absolute path 1](https://worldready.cloudapp.net/Styleguide/Read?id=2700&topicid=26906)
    ### [Reference Absolute Path 2](/help/style/style-how-to-accessibility?toc=/help/contribute/TOC.json&bc=/help/breadcrumb/toc.json)
outputs:
  docs/index.json:
  docs/toc.json: |
    {  
      "items":[  
          {  
            "children":[  
                {  
                  "children":[  
                      {  
                        "toc_title":"Reference Absolute path 1",
                        "href":"https://worldready.cloudapp.net/styleguide/read?id=2700&topicid=26906"
                      },
                      {  
                        "toc_title":"Reference Absolute Path 2",
                        "href":"/help/style/style-how-to-accessibility?toc=/help/contribute/toc.json&bc=/help/breadcrumb/toc.json"
                      }
                  ],
                  "toc_title":"Absolute File Reference"
                }
            ],
            "toc_title":"Index Reference",
            "href":"."
          }
      ]
    }
  build.manifest:
---
# Nested TOC reference 1
# reference toc
inputs:
  docfx.yml:
  docs/toc.md: |
    # [Reference TOC File 1](f1/toc.md)
    # [Reference TOC File 2](../docs/f1/toc.md)
    # [Reference TOC File 3](~/docs/f1/toc.md)
  docs/f1/toc.md: |
    # [Index Reference](index.md)
  docs/f1/index.md:
outputs:
  docs/f1/index.json:
  docs/toc.json: |
    {  
       "items":[  
          {  
             "children":[  
                {  
                   "toc_title":"Index Reference",
                   "href":"f1/"
                }
             ],
             "toc_title":"Reference TOC File 1"
          },
          {  
             "children":[  
                {  
                   "toc_title":"Index Reference",
                   "href":"f1/"
                }
             ],
             "toc_title":"Reference TOC File 2"
          },
          {  
             "children":[  
                {  
                   "toc_title":"Index Reference",
                   "href":"f1/"
                }
             ],
             "toc_title":"Reference TOC File 3"
          }
       ]
    }
  build.manifest:
---
# Nested TOC reference 2
# multiple level
# docs/toc.md -> docs/f1/toc.md  -> docs/f2/toc.md
#             -> docs/f2/toc.md --> docs/f1/f11/toc.md
inputs:
  docfx.yml:
  docs/toc.md: |
    # [Reference TOC File 1](f1/toc.md)
    # [Reference TOC File 2](~/docs/f2/toc.yml)
  docs/f1/toc.md: |
    # [Reference TOC File](../f2/)
  docs/f2/toc.yml: |
    - name: Toc Reference
      href: ../f1/f11/toc.md
  docs/f1/f11/toc.md: |
    # [Index Reference](index.md)
  docs/f1/f11/index.md:
outputs:
  docs/f1/f11/index.json:
  docs/toc.json: |
   {  
       "items":[  
          {  
             "children":[  
                {  
                   "href": "f1/f11/",
                   "toc_title":"Reference TOC File"
                }
             ],
             "toc_title":"Reference TOC File 1"
          },
          {  
             "children":[  
                {  
                   "children":[  
                      {  
                         "toc_title":"Index Reference",
                         "href":"f1/f11/"
                      }
                   ],
                   "toc_title":"Toc Reference"
                }
             ],
             "toc_title":"Reference TOC File 2"
          }
       ]
    }
  build.manifest:
---
# Topic href for normal reference
# topic href has higher priority
inputs:
  docfx.yml: |
    content: docs/f1/toc.yml
  docs/f1/n1.md:
  docs/f1/n2.md:
  docs/f1/toc.yml: |
    - name: normal file reference
      href: ~/docs/f1/n1.md
      topicHref: ~/docs/f1/n2.md
outputs:
  docs/f1/toc.json: |
    {  
       "items":[  
          {  
             "toc_title":"normal file reference",
             "href":"n2",
          }
       ]
    }
  build.manifest:

---
# Topic href for toc reference
# replace href finally
inputs:
  docfx.yml: |
    content: docs/f1/toc.yml
  docs/f1/toc.yml: |
    - name: Toc Reference 1
      href: f11/toc.md
      topicHref: f11/n1.md
    - name: Toc Reference 2
      href: f11/
  docs/f1/f11/toc.md: |
    # [Index Reference](n1.md)
  docs/f1/f11/n1.md:
outputs:
  docs/f1/toc.json: |
    {  
       "items":[  
          {  
             "children":[  
                {  
                   "toc_title":"Index Reference",
                   "href":"f11/n1"
                }
             ],
             "toc_title":"Toc Reference 1",
             "href":"f11/n1"
          },
          {  
             "href":"f11/n1",
             "toc_title":"Toc Reference 2"
          }
       ]
    }
  build.manifest:
---
# Title with # or End with #
inputs:
  docfx.yml:
  docs/toc.md: |
    # [Topic1](index.md) #
    ## Topic1.1 Lanaguage C#
    ### [Topic1.1.1](/href1.1.1) ##
    ## [Topic1.2 Language Java]() ##
    ### [Topic1.2.1](/href1.2.1) ##
    # [Topic2](https://github.com/docfx) #
  docs/index.md:
outputs:
  docs/index.json:
  docs/toc.json: |
    {  
      "items":[  
          {  
            "children":[  
                {  
                  "children":[  
                      {  
                        "toc_title":"Topic1.1.1",
                        "href":"/href1.1.1"
                      }
                  ],
                  "toc_title":"Topic1.1 Lanaguage C#"
                },
                {  
                  "children":[  
                      {  
                        "toc_title":"Topic1.2.1",
                        "href":"/href1.2.1"
                      }
                  ],
                  "toc_title":"Topic1.2 Language Java",
                  "href":""
                }
            ],
            "toc_title":"Topic1",
            "href":"."
          },
          {  
            "toc_title":"Topic2",
            "href":"https://github.com/docfx"
          }
      ]
    }
  build.manifest:
---
# Circle toc referenceing 1
inputs:
  docfx.yml: |
    content:
      include:
        - docs/toc.md
  docs/toc.md: |
    # [Topic1](index.md) #
    ## Refernce toc
    ### [Reference TOC 1.1](f1/toc.md)
    ### [Reference TOC 1.2](f1/toc.md)
    ### [Reference TOC 2.1](f2/toc.md)
  docs/f1/toc.md: |
    # [Topic1](../index.md)
    ## [Reference TOC 1.1.1](../f2/toc.md)
  docs/f2/toc.md: |
    # [Topic1](../index.md)
    ## [Reference TOC back](../toc.md)
  docs/index.md:
outputs:
  build.log: |
    ["error","circular-reference","Found circular reference: docs/toc.md --> docs/f1/toc.md --> docs/f2/toc.md --> docs/toc.md","docs/toc.md"]
---
# Circle toc referenceing 2
inputs:
  docfx.yml: |
    content:
      include:
        - docs/toc.md
  docs/toc.md: |
    # [Topic1](index.md) #
    ## [Reference itself](toc.md)
  docs/index.md:
outputs:
  build.log: |
    ["error","circular-reference","Found circular reference: docs/toc.md --> docs/toc.md","docs/toc.md"]
---
# Reference to a folder, basic usages
# Reference to a folder behavior is not same with reference to a toc file
inputs:
  docfx.yml:
  docs/toc.yml: |
    - name: Toc Reference
      href: f1/toc.md
    - name: Folder Reference1
      href: f1/
    - name: Folder Reference2
      href: f1/
      topicHref: f1/a.md
  docs/f1/toc.md: |
    # [Index Reference](index.md)
  docs/f1/index.md:
  docs/f1/a.md:
outputs:
  docs/f1/a.json:
  docs/f1/index.json:
  docs/toc.json: |
    {  
       "items":[  
          {  
             "toc_title":"Toc Reference",
             "children":[  
                {  
                   "toc_title":"Index Reference",
                   "href":"f1/"
                }
             ]
          },
          {  
             "toc_title":"Folder Reference1",
             "href":"f1/"
          },
          {  
             "toc_title":"Folder Reference2",
             "href":"f1/a"
          }
       ]
    }
  build.manifest:
---
# Reference to a folder, nested toc
# Folder referenced toc doesn't belong to nested toc
inputs:
  docfx.yml:
  docs/toc.md: |
    # [Folder Reference](f1/)
  docs/f1/toc.md: |
    # [Index Reference](index.md)
  docs/f1/index.md:
outputs:
  docs/f1/index.json:
  docs/toc.json: |
   {  
       "items":[  
          {  
             "toc_title":"Folder Reference",
             "href": "f1/"
          }
       ]
    }
  docs/f1/toc.json:
  build.manifest:
---
# Reference to a folder, first child
# The href should be the first child with href in referenced toc
# Horizontal traversal first
inputs:
  docfx.yml:
  docs/toc.md: |
    # [Folder Reference1](f1/)
    # [Folder Reference2](f2/)
  docs/f1/toc.md: |
    # Title
    # [File Reference](b.md)
  docs/f2/toc.md: |
    # Title1
    ## Child Title1
    ## [File Reference](b.md)
    # [File Reference](a.md)
  docs/f1/b.md:
  docs/f2/a.md:
outputs:
  docs/f2/a.json:
  docs/f1/b.json:
  docs/toc.json: |
   {  
       "items":[  
          {  
             "toc_title":"Folder Reference1",
             "href":"f1/b"
          },
          {  
             "toc_title":"Folder Reference2",
             "href":"f2/a"
          }
       ]
    }
  docs/f1/toc.json:
  docs/f2/toc.json:
  build.manifest:
